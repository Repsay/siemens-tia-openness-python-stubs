# encoding: utf-8
# module System.Windows.Forms calls itself Forms
# from System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
# by generator 1.145
""" no doc """
from __future__ import annotations
from Babel import Region

from Microsoft.JScript import Binding

from Microsoft.Office.Interop.Access import Screen

from Microsoft.Office.Interop.Excel import (ListBox, Menu, MenuItem, 
    ScrollBar, ScrollBars, TextBox)

from Microsoft.SqlServer.Management.Smo import View

from Microsoft.SqlServer.Management.UI.Grid import (
    ColumnWidthChangedEventArgs)

from Microsoft.SqlServer.Server import Format

from Microsoft.Vbe.Interop.Forms import ComboBox, DataObject

from Microsoft.VisualBasic import Collection

from Microsoft.VisualStudio.CommandBars import IAccessible

from Microsoft.Win32 import RegistryKey

from System import (Array, AsyncCallback, Attribute, Byte, Char, DateTime, 
    Decimal, Enum, EventArgs, EventHandler, Guid, IAsyncResult, ICloneable, 
    IDisposable, IFormatProvider, IServiceProvider, Int16, Int64, IntPtr, 
    MarshalByRefObject, MulticastDelegate, Single, Type, Uri, Version)

from System.Activities.Debugger import State

from System.Collections import (ICollection, IComparer, IEnumerator, IList, 
    ReadOnlyCollectionBase)

from System.Collections.Generic import Dictionary

from System.Collections.Specialized import StringCollection

from System.ComponentModel import (AttributeCollection, CancelEventArgs, 
    Component, ExpandableObjectConverter, HandledEventArgs, IBindingListView, 
    ICancelAddNew, IComponent, IContainer, ICustomTypeDescriptor, 
    IExtenderProvider, ISite, ISupportInitialize, 
    ISupportInitializeNotification, ISynchronizeInvoke, 
    ITypeDescriptorContext, ITypedList, Int32Converter, ListChangedType, 
    ListSortDirection, MaskedTextProvider, MaskedTextResultHint, 
    PropertyDescriptor, PropertyDescriptorCollection, PropertyTabScope, 
    StringConverter, TypeConverter)

from System.Configuration import ConfigurationSection

from System.Data.Linq import Link

from System.Data.SqlClient import SortOrder

from System.Drawing import (Bitmap, Color, ContentAlignment, Font, Graphics, 
    IDeviceContext, Icon, Image, Rectangle, RectangleF, SizeF, StringFormat)

from System.Drawing.Printing import (Margins, PageSettings, PrintController, 
    PrintDocument, PrinterSettings)

from System.Globalization import CultureInfo

from System.IO import Stream

from System.Management.Automation import ListControl

from System.Messaging import Cursor, Message

from System.Reflection import IReflect

from System.Reflection.Emit import Label

from System.Runtime.InteropServices import StandardOleMarshalObject

from System.Runtime.InteropServices.ComTypes import IDataObject

from System.Runtime.Serialization import ISerializable

from System.ServiceModel.Channels import BindingContext

from System.Threading import ApartmentState, SynchronizationContext

from System.Web.ModelBinding import IValueProvider

from System.Web.UI import Control, ControlCollection

from System.Web.UI.HtmlControls import HtmlElement

from System.Web.UI.MobileControls import Form, Panel

from System.Web.UI.WebControls import ListView, ListViewItem

from System.Windows.Forms.Automation import (AutomationNotificationKind, 
    AutomationNotificationProcessing, IAutomationLiveRegion)

from System.Windows.Forms.ComponentModel.Com2Interop import (
    IComPropertyBrowser)

from System.Windows.Forms.Layout import (ArrangedElementCollection, 
    LayoutEngine)

from System.Windows.Forms.VisualStyles import (CheckBoxState, ComboBoxState, 
    EdgeStyle, GroupBoxState, PushButtonState, RadioButtonState, 
    ScrollBarArrowButtonState, ScrollBarSizeBoxState, ScrollBarState, 
    TabItemState, TextBoxState, TrackBarThumbState, VisualStyleState)

from System.Workflow.ComponentModel.Design import HitTestInfo

from typing import Self, Tuple as Tuple_

from Windows.Foundation import Point, Size

"""The following names are not found in the module: (AccessibleRole, 
    AccessibleSelection, AccessibleStates, BindingCompleteState, 
    BindingManagerBase, BindingMemberInfo, BindingSource, BindingsCollection, 
    BoundEvent, BoundsSpecified, CheckState, CheckedIndexCollection, 
    CheckedItemCollection, CheckedListViewItemCollection, 
    ColumnHeaderAutoResizeStyle, ColumnHeaderCollection, ComboBoxStyle, 
    ContainerControl, ContextMenu, ContextMenuStrip, 
    ControlBindingsCollection, ControlUpdateMode, CurrencyManager, 
    DataGridCell, DataGridColumnStyle, DataGridLineStyle, 
    DataGridParentRowsLabelStyle, DataGridTableStyle, 
    DataGridViewAdvancedBorderStyle, DataGridViewAdvancedCellBorderStyle, 
    DataGridViewAutoSizeColumnMode, DataGridViewAutoSizeColumnsMode, 
    DataGridViewAutoSizeRowMode, DataGridViewAutoSizeRowsMode, 
    DataGridViewCell, DataGridViewCellBorderStyle, DataGridViewCellStyle, 
    DataGridViewCellStyleScopes, DataGridViewClipboardCopyMode, 
    DataGridViewColumn, DataGridViewColumnCollection, 
    DataGridViewColumnHeaderCell, DataGridViewColumnHeadersHeightSizeMode, 
    DataGridViewColumnSortMode, DataGridViewComboBoxDisplayStyle, 
    DataGridViewContentAlignment, DataGridViewDataErrorContexts, 
    DataGridViewEditMode, DataGridViewElementStates, 
    DataGridViewHeaderBorderStyle, DataGridViewHeaderCell, 
    DataGridViewImageCellLayout, DataGridViewPaintParts, DataGridViewRow, 
    DataGridViewRowCollection, DataGridViewRowHeaderCell, 
    DataGridViewRowHeadersWidthSizeMode, DataGridViewSelectedCellCollection, 
    DataGridViewSelectedColumnCollection, DataGridViewSelectedRowCollection, 
    DataGridViewSelectionMode, DataGridViewTriState, DataSourceUpdateMode, 
    DateTimePickerFormat, DialogResult, DockPaddingEdges, DockStyle, 
    DockingBehavior, DomainUpDownItemCollection, DragDropEffects, 
    DragEventArgs, DrawItemState, DrawMode, FileDialogCustomPlacesCollection, 
    FlatButtonAppearance, FlatStyle, FormBorderStyle, FormCollection, 
    FormStartPosition, FormWindowState, FrameStyle, GetChildAtPointSkip, 
    GridColumnStylesCollection, GridItemCollection, GridItemType, 
    GridTableStylesCollection, HScrollProperties, HelpNavigator, 
    HorizontalAlignment, HtmlElementCollection, 
    HtmlElementInsertionOrientation, HtmlWindow, HtmlWindowCollection, 
    IAccessibleEx, IArrangedElement, IContainerControl, 
    IDataGridViewEditingCell, IEnumVariant, IExpandCollapseProvider, 
    IFeatureSupport, IGridItemProvider, IGridProvider, IInvokeProvider, 
    IKeyboardToolTip, ILegacyIAccessibleProvider, IMessageFilter, 
    IOleClientSite, IOleControl, IOleControlSite, IOleInPlaceActiveObject, 
    IOleInPlaceObject, IOleInPlaceSite, IOleObject, IOleWindow, IPersist, 
    IPersistPropertyBag, IPersistStorage, IPersistStreamInit, 
    IPropertyNotifySink, IQuickActivate, IRangeValueProvider, 
    IRawElementProviderFragmentRoot, IRawElementProviderHwndOverride, 
    IScrollItemProvider, ISelectionItemProvider, ISelectionProvider, 
    ISimpleFrameSite, ISupportOleDropSource, ISupportToolStripPanel, 
    ITableItemProvider, ITableProvider, IToggleProvider, IViewObject, 
    IViewObject2, IWindowTarget, ImageCollection, ImageLayout, ImageList, 
    ImageListStreamer, ImeMode, InputLanguage, InputLanguageCollection, 
    IntegerCollection, KeyEventArgs, Keys, LayoutSettings, LeftRightAlignment, 
    LinkBehavior, LinkCollection, ListViewAlignment, ListViewGroupCollection, 
    ListViewHitTestInfo, ListViewHitTestLocations, ListViewInsertionMark, 
    ListViewItemCollection, ListViewItemStates, ListViewSubItem, 
    ListViewSubItemCollection, MainMenu, MaskFormat, MdiLayout, MenuGlyph, 
    MenuItemCollection, MenuMerge, MenuStrip, MessageLoopCallback, 
    MouseButtons, NumericUpDownAccelerationCollection, ObjectCollection, 
    Orientation, Padding, PictureBoxSizeMode, PowerState, 
    PreProcessControlState, ProgressBarStyle, PropertySort, PropertyTab, 
    PropertyTabCollection, RichTextBoxLanguageOptions, RichTextBoxScrollBars, 
    RichTextBoxSelectionTypes, RightToLeft, ScrollButton, ScrollEventType, 
    ScrollOrientation, SearchDirectionHint, SelectedIndexCollection, 
    SelectedListViewItemCollection, SelectedObjectCollection, SelectionMode, 
    SelectionRange, Shortcut, SizeGripStyle, SizeType, SpecialFolder, 
    SplitterCancelEventArgs, SplitterEventArgs, SplitterPanel, 
    StandardValuesCollection, StatusBarPanel, StatusBarPanelAutoSize, 
    StatusBarPanelBorderStyle, StatusBarPanelCollection, StatusBarPanelStyle, 
    TabDrawMode, TabPage, TabPageCollection, TabSizeMode, TableLayoutPanel, 
    TableLayoutPanelCellBorderStyle, TableLayoutPanelCellPosition, 
    TableLayoutPanelGrowStyle, TableLayoutRowStyleCollection, 
    TableLayoutSettings, TextDataFormat, TextFormatFlags, TextImageRelation, 
    ToolBarAppearance, ToolBarButtonCollection, ToolBarButtonStyle, 
    ToolBarTextAlign, ToolStripContentPanel, ToolStripDropDownCloseReason, 
    ToolStripDropDownDirection, ToolStripGripDisplayStyle, ToolStripGripStyle, 
    ToolStripItem, ToolStripItemAccessibleObject, ToolStripItemAlignment, 
    ToolStripItemCollection, ToolStripItemDisplayStyle, 
    ToolStripItemImageScaling, ToolStripItemOverflow, ToolStripItemPlacement, 
    ToolStripLayoutStyle, ToolStripManagerRenderMode, ToolStripMenuItem, 
    ToolStripOverflowButton, ToolStripPanel, ToolStripPanelRow, 
    ToolStripRenderMode, ToolStripRenderer, ToolStripSeparatorRenderEventArgs, 
    ToolStripStatusLabelBorderSides, ToolStripTextDirection, ToolTipIcon, 
    TreeNode, TreeNodeCollection, TreeNodeStates, TreeView, TreeViewDrawMode, 
    TreeViewHitTestInfo, TreeViewHitTestLocations, UnhandledExceptionMode, 
    VScrollProperties, ValidationConstraints, WebBrowserEncryptionLevel, 
    WebBrowserReadyState, WebBrowserRefreshOption, field#, type)
"""

# no functions
# classes

class AccessibleEvents(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AccessibleEvents, values: AcceleratorChange (32786), Create (32768), DefaultActionChange (32785), DescriptionChange (32781), Destroy (32769), Focus (32773), HelpChange (32784), Hide (32771), LocationChange (32779), NameChange (32780), ParentChange (32783), Reorder (32772), Selection (32774), SelectionAdd (32775), SelectionRemove (32776), SelectionWithin (32777), Show (32770), StateChange (32778), SystemAlert (2), SystemCaptureEnd (9), SystemCaptureStart (8), SystemContextHelpEnd (13), SystemContextHelpStart (12), SystemDialogEnd (17), SystemDialogStart (16), SystemDragDropEnd (15), SystemDragDropStart (14), SystemForeground (3), SystemMenuEnd (5), SystemMenuPopupEnd (7), SystemMenuPopupStart (6), SystemMenuStart (4), SystemMinimizeEnd (23), SystemMinimizeStart (22), SystemMoveSizeEnd (11), SystemMoveSizeStart (10), SystemScrollingEnd (19), SystemScrollingStart (18), SystemSound (1), SystemSwitchEnd (21), SystemSwitchStart (20), ValueChange (32782) """
    AcceleratorChange: AccessibleEvents = ...
    Create: AccessibleEvents = ...
    DefaultActionChange: AccessibleEvents = ...
    DescriptionChange: AccessibleEvents = ...
    Destroy: AccessibleEvents = ...
    Focus: AccessibleEvents = ...
    HelpChange: AccessibleEvents = ...
    Hide: AccessibleEvents = ...
    LocationChange: AccessibleEvents = ...
    NameChange: AccessibleEvents = ...
    ParentChange: AccessibleEvents = ...
    Reorder: AccessibleEvents = ...
    Selection: AccessibleEvents = ...
    SelectionAdd: AccessibleEvents = ...
    SelectionRemove: AccessibleEvents = ...
    SelectionWithin: AccessibleEvents = ...
    Show: AccessibleEvents = ...
    StateChange: AccessibleEvents = ...
    SystemAlert: AccessibleEvents = ...
    SystemCaptureEnd: AccessibleEvents = ...
    SystemCaptureStart: AccessibleEvents = ...
    SystemContextHelpEnd: AccessibleEvents = ...
    SystemContextHelpStart: AccessibleEvents = ...
    SystemDialogEnd: AccessibleEvents = ...
    SystemDialogStart: AccessibleEvents = ...
    SystemDragDropEnd: AccessibleEvents = ...
    SystemDragDropStart: AccessibleEvents = ...
    SystemForeground: AccessibleEvents = ...
    SystemMenuEnd: AccessibleEvents = ...
    SystemMenuPopupEnd: AccessibleEvents = ...
    SystemMenuPopupStart: AccessibleEvents = ...
    SystemMenuStart: AccessibleEvents = ...
    SystemMinimizeEnd: AccessibleEvents = ...
    SystemMinimizeStart: AccessibleEvents = ...
    SystemMoveSizeEnd: AccessibleEvents = ...
    SystemMoveSizeStart: AccessibleEvents = ...
    SystemScrollingEnd: AccessibleEvents = ...
    SystemScrollingStart: AccessibleEvents = ...
    SystemSound: AccessibleEvents = ...
    SystemSwitchEnd: AccessibleEvents = ...
    SystemSwitchStart: AccessibleEvents = ...
    ValueChange: AccessibleEvents = ...
    value__ = ...


class AccessibleNavigation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AccessibleNavigation, values: Down (2), FirstChild (7), LastChild (8), Left (3), Next (5), Previous (6), Right (4), Up (1) """
    Down: AccessibleNavigation = ...
    FirstChild: AccessibleNavigation = ...
    LastChild: AccessibleNavigation = ...
    Left: AccessibleNavigation = ...
    Next: AccessibleNavigation = ...
    Previous: AccessibleNavigation = ...
    Right: AccessibleNavigation = ...
    Up: AccessibleNavigation = ...
    value__ = ...


class AccessibleObject(IToggleProvider, IGridProvider, ISelectionProvider, IInvokeProvider, IExpandCollapseProvider, IReflect, ITableProvider, IAccessibleEx, IRawElementProviderFragmentRoot, ILegacyIAccessibleProvider, IRangeValueProvider, ITableItemProvider, IServiceProvider, ISelectionItemProvider, IAccessible, StandardOleMarshalObject, IValueProvider, IGridItemProvider, IRawElementProviderHwndOverride, IScrollItemProvider, IEnumVariant, IOleWindow): # skipped bases: <type 'IRawElementProviderSimple'>, <type 'IMarshal'>, <type 'IRawElementProviderFragment'>, <type 'object'>
    """ AccessibleObject() """
    @property
    def Bounds(self) -> Rectangle:
        """ Get: Bounds(self: AccessibleObject) -> Rectangle """
        ...

    @property
    def DefaultAction(self) -> str:
        """ Get: DefaultAction(self: AccessibleObject) -> str """
        ...

    @property
    def Description(self) -> str:
        """ Get: Description(self: AccessibleObject) -> str """
        ...

    @property
    def Help(self) -> str:
        """ Get: Help(self: AccessibleObject) -> str """
        ...

    @property
    def KeyboardShortcut(self) -> str:
        """ Get: KeyboardShortcut(self: AccessibleObject) -> str """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: AccessibleObject) -> str
        Set: Name(self: AccessibleObject) = value
        """
        ...

    @property
    def Parent(self) -> AccessibleObject:
        """ Get: Parent(self: AccessibleObject) -> AccessibleObject """
        ...

    @property
    def Role(self): # -> AccessibleRole
        """ Get: Role(self: AccessibleObject) -> AccessibleRole """
        ...

    @property
    def State(self): # -> AccessibleStates
        """ Get: State(self: AccessibleObject) -> AccessibleStates """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: AccessibleObject) -> str
        Set: Value(self: AccessibleObject) = value
        """
        ...


    def DoDefaultAction(self): # -> 
        """ DoDefaultAction(self: AccessibleObject) """
        ...

    def GetChild(self, index:int) -> AccessibleObject:
        """ GetChild(self: AccessibleObject, index: int) -> AccessibleObject """
        ...

    def GetChildCount(self) -> int:
        """ GetChildCount(self: AccessibleObject) -> int """
        ...

    def GetFocused(self) -> AccessibleObject:
        """ GetFocused(self: AccessibleObject) -> AccessibleObject """
        ...

    def GetHelpTopic(self, fileName) -> Tuple_[int, str]:
        """ GetHelpTopic(self: AccessibleObject) -> (int, str) """
        ...

    def GetSelected(self) -> AccessibleObject:
        """ GetSelected(self: AccessibleObject) -> AccessibleObject """
        ...

    def HitTest(self, x:int, y:int) -> AccessibleObject:
        """ HitTest(self: AccessibleObject, x: int, y: int) -> AccessibleObject """
        ...

    def Navigate(self, navdir:AccessibleNavigation) -> AccessibleObject:
        """ Navigate(self: AccessibleObject, navdir: AccessibleNavigation) -> AccessibleObject """
        ...

    def RaiseAutomationNotification(self, notificationKind:AutomationNotificationKind, notificationProcessing:AutomationNotificationProcessing, notificationText:str) -> bool:
        """ RaiseAutomationNotification(self: AccessibleObject, notificationKind: AutomationNotificationKind, notificationProcessing: AutomationNotificationProcessing, notificationText: str) -> bool """
        ...

    def RaiseLiveRegionChanged(self) -> bool:
        """ RaiseLiveRegionChanged(self: AccessibleObject) -> bool """
        ...

    def Select(self, flags): # ->  # Not found arg types: {'flags': 'AccessibleSelection'}
        """ Select(self: AccessibleObject, flags: AccessibleSelection) """
        ...

    def UseStdAccessibleObjects(self, *args): #cannot find CLR method
        """ UseStdAccessibleObjects(self: AccessibleObject, handle: IntPtr)UseStdAccessibleObjects(self: AccessibleObject, handle: IntPtr, objid: int) """
        ...


class AccessibleRole(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AccessibleRole, values: Alert (8), Animation (54), Application (14), Border (19), ButtonDropDown (56), ButtonDropDownGrid (58), ButtonMenu (57), Caret (7), Cell (29), Character (32), Chart (17), CheckButton (44), Client (10), Clock (61), Column (27), ColumnHeader (25), ComboBox (46), Cursor (6), Default (-1), Diagram (53), Dial (49), Dialog (18), Document (15), DropList (47), Equation (55), Graphic (40), Grip (4), Grouping (20), HelpBalloon (31), HotkeyField (50), Indicator (39), IpAddress (63), Link (30), List (33), ListItem (34), MenuBar (2), MenuItem (12), MenuPopup (11), None (0), Outline (35), OutlineButton (64), OutlineItem (36), PageTab (37), PageTabList (60), Pane (16), ProgressBar (48), PropertyPage (38), PushButton (43), RadioButton (45), Row (28), RowHeader (26), ScrollBar (3), Separator (21), Slider (51), Sound (5), SpinButton (52), SplitButton (62), StaticText (41), StatusBar (23), Table (24), Text (42), TitleBar (1), ToolBar (22), ToolTip (13), WhiteSpace (59), Window (9) """
    Alert: AccessibleRole = ...
    Animation: AccessibleRole = ...
    Application: AccessibleRole = ...
    Border: AccessibleRole = ...
    ButtonDropDown: AccessibleRole = ...
    ButtonDropDownGrid: AccessibleRole = ...
    ButtonMenu: AccessibleRole = ...
    Caret: AccessibleRole = ...
    Cell: AccessibleRole = ...
    Character: AccessibleRole = ...
    Chart: AccessibleRole = ...
    CheckButton: AccessibleRole = ...
    Client: AccessibleRole = ...
    Clock: AccessibleRole = ...
    Column: AccessibleRole = ...
    ColumnHeader: AccessibleRole = ...
    ComboBox: AccessibleRole = ...
    Cursor: AccessibleRole = ...
    Default: AccessibleRole = ...
    Diagram: AccessibleRole = ...
    Dial: AccessibleRole = ...
    Dialog: AccessibleRole = ...
    Document: AccessibleRole = ...
    DropList: AccessibleRole = ...
    Equation: AccessibleRole = ...
    Graphic: AccessibleRole = ...
    Grip: AccessibleRole = ...
    Grouping: AccessibleRole = ...
    HelpBalloon: AccessibleRole = ...
    HotkeyField: AccessibleRole = ...
    Indicator: AccessibleRole = ...
    IpAddress: AccessibleRole = ...
    Link: AccessibleRole = ...
    List: AccessibleRole = ...
    ListItem: AccessibleRole = ...
    MenuBar: AccessibleRole = ...
    MenuItem: AccessibleRole = ...
    MenuPopup: AccessibleRole = ...
    Outline: AccessibleRole = ...
    OutlineButton: AccessibleRole = ...
    OutlineItem: AccessibleRole = ...
    PageTab: AccessibleRole = ...
    PageTabList: AccessibleRole = ...
    Pane: AccessibleRole = ...
    ProgressBar: AccessibleRole = ...
    PropertyPage: AccessibleRole = ...
    PushButton: AccessibleRole = ...
    RadioButton: AccessibleRole = ...
    Row: AccessibleRole = ...
    RowHeader: AccessibleRole = ...
    ScrollBar: AccessibleRole = ...
    Separator: AccessibleRole = ...
    Slider: AccessibleRole = ...
    Sound: AccessibleRole = ...
    SpinButton: AccessibleRole = ...
    SplitButton: AccessibleRole = ...
    StaticText: AccessibleRole = ...
    StatusBar: AccessibleRole = ...
    Table: AccessibleRole = ...
    Text: AccessibleRole = ...
    TitleBar: AccessibleRole = ...
    ToolBar: AccessibleRole = ...
    ToolTip: AccessibleRole = ...
    value__ = ...
    WhiteSpace: AccessibleRole = ...
    Window: AccessibleRole = ...


class AccessibleSelection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) AccessibleSelection, values: AddSelection (8), ExtendSelection (4), None (0), RemoveSelection (16), TakeFocus (1), TakeSelection (2) """
    AddSelection: AccessibleSelection = ...
    ExtendSelection: AccessibleSelection = ...
    RemoveSelection: AccessibleSelection = ...
    TakeFocus: AccessibleSelection = ...
    TakeSelection: AccessibleSelection = ...
    value__ = ...


class AccessibleStates(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) AccessibleStates, values: AlertHigh (268435456), AlertLow (67108864), AlertMedium (134217728), Animated (16384), Busy (2048), Checked (16), Collapsed (1024), Default (256), Expanded (512), ExtSelectable (33554432), Floating (4096), Focusable (1048576), Focused (4), HasPopup (1073741824), HotTracked (128), Indeterminate (32), Invisible (32768), Linked (4194304), Marqueed (8192), Mixed (32), Moveable (262144), MultiSelectable (16777216), None (0), Offscreen (65536), Pressed (8), Protected (536870912), ReadOnly (64), Selectable (2097152), Selected (2), SelfVoicing (524288), Sizeable (131072), Traversed (8388608), Unavailable (1), Valid (1073741823) """
    AlertHigh: AccessibleStates = ...
    AlertLow: AccessibleStates = ...
    AlertMedium: AccessibleStates = ...
    Animated: AccessibleStates = ...
    Busy: AccessibleStates = ...
    Checked: AccessibleStates = ...
    Collapsed: AccessibleStates = ...
    Default: AccessibleStates = ...
    Expanded: AccessibleStates = ...
    ExtSelectable: AccessibleStates = ...
    Floating: AccessibleStates = ...
    Focusable: AccessibleStates = ...
    Focused: AccessibleStates = ...
    HasPopup: AccessibleStates = ...
    HotTracked: AccessibleStates = ...
    Indeterminate: AccessibleStates = ...
    Invisible: AccessibleStates = ...
    Linked: AccessibleStates = ...
    Marqueed: AccessibleStates = ...
    Mixed: AccessibleStates = ...
    Moveable: AccessibleStates = ...
    MultiSelectable: AccessibleStates = ...
    Offscreen: AccessibleStates = ...
    Pressed: AccessibleStates = ...
    Protected: AccessibleStates = ...
    ReadOnly: AccessibleStates = ...
    Selectable: AccessibleStates = ...
    Selected: AccessibleStates = ...
    SelfVoicing: AccessibleStates = ...
    Sizeable: AccessibleStates = ...
    Traversed: AccessibleStates = ...
    Unavailable: AccessibleStates = ...
    Valid: AccessibleStates = ...
    value__ = ...


class AmbientProperties: # skipped bases: <type 'object'>, <type 'object'>
    """ AmbientProperties() """
    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: AmbientProperties) -> Color
        Set: BackColor(self: AmbientProperties) = value
        """
        ...

    @property
    def Cursor(self) -> Cursor:
        """
        Get: Cursor(self: AmbientProperties) -> Cursor
        Set: Cursor(self: AmbientProperties) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: AmbientProperties) -> Font
        Set: Font(self: AmbientProperties) = value
        """
        ...

    @property
    def ForeColor(self) -> Color:
        """
        Get: ForeColor(self: AmbientProperties) -> Color
        Set: ForeColor(self: AmbientProperties) = value
        """
        ...



class AnchorStyles(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) AnchorStyles, values: Bottom (2), Left (4), None (0), Right (8), Top (1) """
    Bottom: AnchorStyles = ...
    Left: AnchorStyles = ...
    Right: AnchorStyles = ...
    Top: AnchorStyles = ...
    value__ = ...


class Appearance(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum Appearance, values: Button (1), Normal (0) """
    Button: Appearance = ...
    Normal: Appearance = ...
    value__ = ...


class Application: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AllowQuit(self) -> bool:
        """ Get: AllowQuit() -> bool """
        ...

    @property
    def CommonAppDataPath(self) -> str:
        """ Get: CommonAppDataPath() -> str """
        ...

    @property
    def CommonAppDataRegistry(self) -> RegistryKey:
        """ Get: CommonAppDataRegistry() -> RegistryKey """
        ...

    @property
    def CompanyName(self) -> str:
        """ Get: CompanyName() -> str """
        ...

    @property
    def CurrentCulture(self) -> CultureInfo:
        """
        Get: CurrentCulture() -> CultureInfo
        Set: CurrentCulture() = value
        """
        ...

    @property
    def CurrentInputLanguage(self): # -> InputLanguage
        """
        Get: CurrentInputLanguage() -> InputLanguage
        Set: CurrentInputLanguage() = value
        """
        ...

    @property
    def ExecutablePath(self) -> str:
        """ Get: ExecutablePath() -> str """
        ...

    @property
    def LocalUserAppDataPath(self) -> str:
        """ Get: LocalUserAppDataPath() -> str """
        ...

    @property
    def MessageLoop(self) -> bool:
        """ Get: MessageLoop() -> bool """
        ...

    @property
    def OpenForms(self): # -> FormCollection
        """ Get: OpenForms() -> FormCollection """
        ...

    @property
    def ProductName(self) -> str:
        """ Get: ProductName() -> str """
        ...

    @property
    def ProductVersion(self) -> str:
        """ Get: ProductVersion() -> str """
        ...

    @property
    def RenderWithVisualStyles(self) -> bool:
        """ Get: RenderWithVisualStyles() -> bool """
        ...

    @property
    def SafeTopLevelCaptionFormat(self) -> str:
        """
        Get: SafeTopLevelCaptionFormat() -> str
        Set: SafeTopLevelCaptionFormat() = value
        """
        ...

    @property
    def StartupPath(self) -> str:
        """ Get: StartupPath() -> str """
        ...

    @property
    def UserAppDataPath(self) -> str:
        """ Get: UserAppDataPath() -> str """
        ...

    @property
    def UserAppDataRegistry(self) -> RegistryKey:
        """ Get: UserAppDataRegistry() -> RegistryKey """
        ...

    @property
    def UseWaitCursor(self) -> bool:
        """
        Get: UseWaitCursor() -> bool
        Set: UseWaitCursor() = value
        """
        ...

    @property
    def VisualStyleState(self) -> VisualStyleState:
        """
        Get: VisualStyleState() -> VisualStyleState
        Set: VisualStyleState() = value
        """
        ...


    @staticmethod
    def AddMessageFilter(value): # ->  # Not found arg types: {'value': 'IMessageFilter'}
        """ AddMessageFilter(value: IMessageFilter) """
        ...

    @staticmethod
    def DoEvents(): # -> 
        """ DoEvents() """
        ...

    @staticmethod
    def EnableVisualStyles(): # -> 
        """ EnableVisualStyles() """
        ...

    @staticmethod
    def Exit(e=None): # -> 
        """ Exit()Exit(e: CancelEventArgs) """
        ...

    @staticmethod
    def ExitThread(): # -> 
        """ ExitThread() """
        ...

    @staticmethod
    def FilterMessage(message:Message) -> Tuple_[bool, Message]:
        """ FilterMessage(message: Message) -> (bool, Message) """
        ...

    def MessageLoopCallback(self, *args): #cannot find CLR method
        """ MessageLoopCallback(object: object, method: IntPtr) """
        ...

    @staticmethod
    def OleRequired() -> ApartmentState:
        """ OleRequired() -> ApartmentState """
        ...

    @staticmethod
    def OnThreadException(t:Exception): # -> 
        """ OnThreadException(t: Exception) """
        ...

    @staticmethod
    def RaiseIdle(e:EventArgs): # -> 
        """ RaiseIdle(e: EventArgs) """
        ...

    @staticmethod
    def RegisterMessageLoop(callback): # ->  # Not found arg types: {'callback': 'MessageLoopCallback'}
        """ RegisterMessageLoop(callback: MessageLoopCallback) """
        ...

    @staticmethod
    def RemoveMessageFilter(value): # ->  # Not found arg types: {'value': 'IMessageFilter'}
        """ RemoveMessageFilter(value: IMessageFilter) """
        ...

    @staticmethod
    def Restart(): # -> 
        """ Restart() """
        ...

    @staticmethod
    def Run(*__args): # -> 
        """ Run()Run(mainForm: Form)Run(context: ApplicationContext) """
        ...

    @staticmethod
    def SetCompatibleTextRenderingDefault(defaultValue:bool): # -> 
        """ SetCompatibleTextRenderingDefault(defaultValue: bool) """
        ...

    @staticmethod
    def SetSuspendState(state, force:bool, disableWakeEvent:bool) -> bool: # Not found arg types: {'state': 'PowerState'}
        """ SetSuspendState(state: PowerState, force: bool, disableWakeEvent: bool) -> bool """
        ...

    @staticmethod
    def SetUnhandledExceptionMode(mode, threadScope:bool = ...): # ->  # Not found arg types: {'mode': 'UnhandledExceptionMode'}
        """ SetUnhandledExceptionMode(mode: UnhandledExceptionMode)SetUnhandledExceptionMode(mode: UnhandledExceptionMode, threadScope: bool) """
        ...

    @staticmethod
    def UnregisterMessageLoop(): # -> 
        """ UnregisterMessageLoop() """
        ...

    ApplicationExit = ...
    EnterThreadModal = ...
    Idle = ...
    LeaveThreadModal = ...
    ThreadException = ...
    ThreadExit = ...


class ApplicationContext(IDisposable): # skipped bases: <type 'object'>
    """
    ApplicationContext()
    ApplicationContext(mainForm: Form)
    """
    @property
    def MainForm(self) -> Form:
        """
        Get: MainForm(self: ApplicationContext) -> Form
        Set: MainForm(self: ApplicationContext) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: ApplicationContext) -> object
        Set: Tag(self: ApplicationContext) = value
        """
        ...


    def ExitThread(self): # -> 
        """ ExitThread(self: ApplicationContext) """
        ...

    def ExitThreadCore(self, *args): #cannot find CLR method
        """ ExitThreadCore(self: ApplicationContext) """
        ...

    def OnMainFormClosed(self, *args): #cannot find CLR method
        """ OnMainFormClosed(self: ApplicationContext, sender: object, e: EventArgs) """
        ...

    ThreadExit = ...


class ArrangeDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) ArrangeDirection, values: Down (4), Left (0), Right (0), Up (4) """
    Down: ArrangeDirection = ...
    Left: ArrangeDirection = ...
    Right: ArrangeDirection = ...
    Up: ArrangeDirection = ...
    value__ = ...


class ArrangeStartingPosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) ArrangeStartingPosition, values: BottomLeft (0), BottomRight (1), Hide (8), TopLeft (2), TopRight (3) """
    BottomLeft: ArrangeStartingPosition = ...
    BottomRight: ArrangeStartingPosition = ...
    Hide: ArrangeStartingPosition = ...
    TopLeft: ArrangeStartingPosition = ...
    TopRight: ArrangeStartingPosition = ...
    value__ = ...


class ArrowDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ArrowDirection, values: Down (17), Left (0), Right (16), Up (1) """
    Down: ArrowDirection = ...
    Left: ArrowDirection = ...
    Right: ArrowDirection = ...
    Up: ArrowDirection = ...
    value__ = ...


class AutoCompleteMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AutoCompleteMode, values: Append (2), None (0), Suggest (1), SuggestAppend (3) """
    Append: AutoCompleteMode = ...
    Suggest: AutoCompleteMode = ...
    SuggestAppend: AutoCompleteMode = ...
    value__ = ...


class AutoCompleteSource(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AutoCompleteSource, values: AllSystemSources (7), AllUrl (6), CustomSource (64), FileSystem (1), FileSystemDirectories (32), HistoryList (2), ListItems (256), None (128), RecentlyUsedList (4) """
    AllSystemSources: AutoCompleteSource = ...
    AllUrl: AutoCompleteSource = ...
    CustomSource: AutoCompleteSource = ...
    FileSystem: AutoCompleteSource = ...
    FileSystemDirectories: AutoCompleteSource = ...
    HistoryList: AutoCompleteSource = ...
    ListItems: AutoCompleteSource = ...
    RecentlyUsedList: AutoCompleteSource = ...
    value__ = ...


class AutoCompleteStringCollection(IList): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ AutoCompleteStringCollection() """
    @property
    def Count(self) -> int:
        """ Get: Count(self: AutoCompleteStringCollection) -> int """
        ...

    @property
    def IsSynchronized(self) -> bool:
        """ Get: IsSynchronized(self: AutoCompleteStringCollection) -> bool """
        ...

    @property
    def SyncRoot(self) -> object:
        """ Get: SyncRoot(self: AutoCompleteStringCollection) -> object """
        ...


    def AddRange(self, value:Array): # -> 
        """ AddRange(self: AutoCompleteStringCollection, value: Array[str]) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: AutoCompleteStringCollection, array: Array[str], index: int) """
        ...

    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: AutoCompleteStringCollection) -> IEnumerator """
        ...

    def OnCollectionChanged(self, *args): #cannot find CLR method
        """ OnCollectionChanged(self: AutoCompleteStringCollection, e: CollectionChangeEventArgs) """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ Contains(self: IList, value: object) -> bool """
        ...

    CollectionChanged = ...


class AutoScaleMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AutoScaleMode, values: Dpi (2), Font (1), Inherit (3), None (0) """
    Dpi: AutoScaleMode = ...
    Font: AutoScaleMode = ...
    Inherit: AutoScaleMode = ...
    value__ = ...


class AutoSizeMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AutoSizeMode, values: GrowAndShrink (0), GrowOnly (1) """
    GrowAndShrink: AutoSizeMode = ...
    GrowOnly: AutoSizeMode = ...
    value__ = ...


class AutoValidate(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AutoValidate, values: Disable (0), EnableAllowFocusChange (2), EnablePreventFocusChange (1), Inherit (-1) """
    Disable: AutoValidate = ...
    EnableAllowFocusChange: AutoValidate = ...
    EnablePreventFocusChange: AutoValidate = ...
    Inherit: AutoValidate = ...
    value__ = ...


class IBindableComponent(IComponent): # skipped bases: <type 'IDisposable'>, <type 'object'>
    """ no doc """
    @property
    def BindingContext(self) -> BindingContext:
        """
        Get: BindingContext(self: IBindableComponent) -> BindingContext
        Set: BindingContext(self: IBindableComponent) = value
        """
        ...

    @property
    def DataBindings(self): # -> ControlBindingsCollection
        """ Get: DataBindings(self: IBindableComponent) -> ControlBindingsCollection """
        ...



class IDropTarget: # skipped bases: <type 'object'>
    """ no doc """
    def OnDragDrop(self, e): # ->  # Not found arg types: {'e': 'DragEventArgs'}
        """ OnDragDrop(self: IDropTarget, e: DragEventArgs) """
        ...

    def OnDragEnter(self, e): # ->  # Not found arg types: {'e': 'DragEventArgs'}
        """ OnDragEnter(self: IDropTarget, e: DragEventArgs) """
        ...

    def OnDragLeave(self, e:EventArgs): # -> 
        """ OnDragLeave(self: IDropTarget, e: EventArgs) """
        ...

    def OnDragOver(self, e): # ->  # Not found arg types: {'e': 'DragEventArgs'}
        """ OnDragOver(self: IDropTarget, e: DragEventArgs) """
        ...


class IWin32Window: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Handle(self) -> IntPtr:
        """ Get: Handle(self: IWin32Window) -> IntPtr """
        ...



class Control(IWin32Window, IQuickActivate, ISupportOleDropSource, IViewObject2, IPersist, IKeyboardToolTip, IArrangedElement, IViewObject, IOleObject, IPersistStreamInit, IOleInPlaceObject, Component, IOleInPlaceActiveObject, IPersistStorage, IOleControl, ISynchronizeInvoke, IPersistPropertyBag, IDropTarget, IBindableComponent, IOleWindow): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """
    Control()
    Control(text: str)
    Control(text: str, left: int, top: int, width: int, height: int)
    Control(parent: Control, text: str)
    Control(parent: Control, text: str, left: int, top: int, width: int, height: int)
    """
    @property
    def AccessibilityObject(self) -> AccessibleObject:
        """ Get: AccessibilityObject(self: Control) -> AccessibleObject """
        ...

    @property
    def AccessibleDefaultActionDescription(self) -> str:
        """
        Get: AccessibleDefaultActionDescription(self: Control) -> str
        Set: AccessibleDefaultActionDescription(self: Control) = value
        """
        ...

    @property
    def AccessibleDescription(self) -> str:
        """
        Get: AccessibleDescription(self: Control) -> str
        Set: AccessibleDescription(self: Control) = value
        """
        ...

    @property
    def AccessibleName(self) -> str:
        """
        Get: AccessibleName(self: Control) -> str
        Set: AccessibleName(self: Control) = value
        """
        ...

    @property
    def AccessibleRole(self) -> AccessibleRole:
        """
        Get: AccessibleRole(self: Control) -> AccessibleRole
        Set: AccessibleRole(self: Control) = value
        """
        ...

    @property
    def AllowDrop(self) -> bool:
        """
        Get: AllowDrop(self: Control) -> bool
        Set: AllowDrop(self: Control) = value
        """
        ...

    @property
    def Anchor(self) -> AnchorStyles:
        """
        Get: Anchor(self: Control) -> AnchorStyles
        Set: Anchor(self: Control) = value
        """
        ...

    @property
    def AutoScrollOffset(self) -> Point:
        """
        Get: AutoScrollOffset(self: Control) -> Point
        Set: AutoScrollOffset(self: Control) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: Control) -> bool
        Set: AutoSize(self: Control) = value
        """
        ...

    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: Control) -> Color
        Set: BackColor(self: Control) = value
        """
        ...

    @property
    def BackgroundImage(self) -> Image:
        """
        Get: BackgroundImage(self: Control) -> Image
        Set: BackgroundImage(self: Control) = value
        """
        ...

    @property
    def BackgroundImageLayout(self): # -> ImageLayout
        """
        Get: BackgroundImageLayout(self: Control) -> ImageLayout
        Set: BackgroundImageLayout(self: Control) = value
        """
        ...

    @property
    def Bottom(self) -> int:
        """ Get: Bottom(self: Control) -> int """
        ...

    @property
    def Bounds(self) -> Rectangle:
        """
        Get: Bounds(self: Control) -> Rectangle
        Set: Bounds(self: Control) = value
        """
        ...

    @property
    def CanEnableIme(self):
        ...

    @property
    def CanFocus(self) -> bool:
        """ Get: CanFocus(self: Control) -> bool """
        ...

    @property
    def CanSelect(self) -> bool:
        """ Get: CanSelect(self: Control) -> bool """
        ...

    @property
    def Capture(self) -> bool:
        """
        Get: Capture(self: Control) -> bool
        Set: Capture(self: Control) = value
        """
        ...

    @property
    def CausesValidation(self) -> bool:
        """
        Get: CausesValidation(self: Control) -> bool
        Set: CausesValidation(self: Control) = value
        """
        ...

    @property
    def CheckForIllegalCrossThreadCalls(self) -> bool:
        """
        Get: CheckForIllegalCrossThreadCalls() -> bool
        Set: CheckForIllegalCrossThreadCalls() = value
        """
        ...

    @property
    def ClientRectangle(self) -> Rectangle:
        """ Get: ClientRectangle(self: Control) -> Rectangle """
        ...

    @property
    def ClientSize(self) -> Size:
        """
        Get: ClientSize(self: Control) -> Size
        Set: ClientSize(self: Control) = value
        """
        ...

    @property
    def CompanyName(self) -> str:
        """ Get: CompanyName(self: Control) -> str """
        ...

    @property
    def ContainsFocus(self) -> bool:
        """ Get: ContainsFocus(self: Control) -> bool """
        ...

    @property
    def ContextMenu(self): # -> ContextMenu
        """
        Get: ContextMenu(self: Control) -> ContextMenu
        Set: ContextMenu(self: Control) = value
        """
        ...

    @property
    def ContextMenuStrip(self): # -> ContextMenuStrip
        """
        Get: ContextMenuStrip(self: Control) -> ContextMenuStrip
        Set: ContextMenuStrip(self: Control) = value
        """
        ...

    @property
    def Controls(self) -> ControlCollection:
        """ Get: Controls(self: Control) -> ControlCollection """
        ...

    @property
    def Created(self) -> bool:
        """ Get: Created(self: Control) -> bool """
        ...

    @property
    def CreateParams(self):
        ...

    @property
    def Cursor(self) -> Cursor:
        """
        Get: Cursor(self: Control) -> Cursor
        Set: Cursor(self: Control) = value
        """
        ...

    @property
    def DefaultBackColor(self) -> Color:
        """ Get: DefaultBackColor() -> Color """
        ...

    @property
    def DefaultCursor(self):
        ...

    @property
    def DefaultFont(self) -> Font:
        """ Get: DefaultFont() -> Font """
        ...

    @property
    def DefaultForeColor(self) -> Color:
        """ Get: DefaultForeColor() -> Color """
        ...

    @property
    def DefaultImeMode(self):
        ...

    @property
    def DefaultMargin(self):
        ...

    @property
    def DefaultMaximumSize(self):
        ...

    @property
    def DefaultMinimumSize(self):
        ...

    @property
    def DefaultPadding(self):
        ...

    @property
    def DefaultSize(self):
        ...

    @property
    def DeviceDpi(self) -> int:
        """ Get: DeviceDpi(self: Control) -> int """
        ...

    @property
    def DisplayRectangle(self) -> Rectangle:
        """ Get: DisplayRectangle(self: Control) -> Rectangle """
        ...

    @property
    def Disposing(self) -> bool:
        """ Get: Disposing(self: Control) -> bool """
        ...

    @property
    def Dock(self): # -> DockStyle
        """
        Get: Dock(self: Control) -> DockStyle
        Set: Dock(self: Control) = value
        """
        ...

    @property
    def DoubleBuffered(self):
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Control) -> bool
        Set: Enabled(self: Control) = value
        """
        ...

    @property
    def Focused(self) -> bool:
        """ Get: Focused(self: Control) -> bool """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: Control) -> Font
        Set: Font(self: Control) = value
        """
        ...

    @property
    def FontHeight(self):
        ...

    @property
    def ForeColor(self) -> Color:
        """
        Get: ForeColor(self: Control) -> Color
        Set: ForeColor(self: Control) = value
        """
        ...

    @property
    def HasChildren(self) -> bool:
        """ Get: HasChildren(self: Control) -> bool """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: Control) -> int
        Set: Height(self: Control) = value
        """
        ...

    @property
    def ImeMode(self): # -> ImeMode
        """
        Get: ImeMode(self: Control) -> ImeMode
        Set: ImeMode(self: Control) = value
        """
        ...

    @property
    def ImeModeBase(self):
        ...

    @property
    def IsAccessible(self) -> bool:
        """
        Get: IsAccessible(self: Control) -> bool
        Set: IsAccessible(self: Control) = value
        """
        ...

    @property
    def IsDisposed(self) -> bool:
        """ Get: IsDisposed(self: Control) -> bool """
        ...

    @property
    def IsHandleCreated(self) -> bool:
        """ Get: IsHandleCreated(self: Control) -> bool """
        ...

    @property
    def IsMirrored(self) -> bool:
        """ Get: IsMirrored(self: Control) -> bool """
        ...

    @property
    def LayoutEngine(self) -> LayoutEngine:
        """ Get: LayoutEngine(self: Control) -> LayoutEngine """
        ...

    @property
    def Left(self) -> int:
        """
        Get: Left(self: Control) -> int
        Set: Left(self: Control) = value
        """
        ...

    @property
    def Location(self) -> Point:
        """
        Get: Location(self: Control) -> Point
        Set: Location(self: Control) = value
        """
        ...

    @property
    def Margin(self): # -> Padding
        """
        Get: Margin(self: Control) -> Padding
        Set: Margin(self: Control) = value
        """
        ...

    @property
    def MaximumSize(self) -> Size:
        """
        Get: MaximumSize(self: Control) -> Size
        Set: MaximumSize(self: Control) = value
        """
        ...

    @property
    def MinimumSize(self) -> Size:
        """
        Get: MinimumSize(self: Control) -> Size
        Set: MinimumSize(self: Control) = value
        """
        ...

    @property
    def ModifierKeys(self): # -> Keys
        """ Get: ModifierKeys() -> Keys """
        ...

    @property
    def MouseButtons(self): # -> MouseButtons
        """ Get: MouseButtons() -> MouseButtons """
        ...

    @property
    def MousePosition(self) -> Point:
        """ Get: MousePosition() -> Point """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Control) -> str
        Set: Name(self: Control) = value
        """
        ...

    @property
    def Padding(self): # -> Padding
        """
        Get: Padding(self: Control) -> Padding
        Set: Padding(self: Control) = value
        """
        ...

    @property
    def Parent(self) -> Control:
        """
        Get: Parent(self: Control) -> Control
        Set: Parent(self: Control) = value
        """
        ...

    @property
    def PreferredSize(self) -> Size:
        """ Get: PreferredSize(self: Control) -> Size """
        ...

    @property
    def ProductName(self) -> str:
        """ Get: ProductName(self: Control) -> str """
        ...

    @property
    def ProductVersion(self) -> str:
        """ Get: ProductVersion(self: Control) -> str """
        ...

    @property
    def PropagatingImeMode(self):
        ...

    @property
    def RecreatingHandle(self) -> bool:
        """ Get: RecreatingHandle(self: Control) -> bool """
        ...

    @property
    def Region(self) -> Region:
        """
        Get: Region(self: Control) -> Region
        Set: Region(self: Control) = value
        """
        ...

    @property
    def RenderRightToLeft(self):
        ...

    @property
    def ResizeRedraw(self):
        ...

    @property
    def Right(self) -> int:
        """ Get: Right(self: Control) -> int """
        ...

    @property
    def RightToLeft(self): # -> RightToLeft
        """
        Get: RightToLeft(self: Control) -> RightToLeft
        Set: RightToLeft(self: Control) = value
        """
        ...

    @property
    def ScaleChildren(self):
        ...

    @property
    def ShowFocusCues(self):
        ...

    @property
    def ShowKeyboardCues(self):
        ...

    @property
    def Size(self) -> Size:
        """
        Get: Size(self: Control) -> Size
        Set: Size(self: Control) = value
        """
        ...

    @property
    def TabIndex(self) -> int:
        """
        Get: TabIndex(self: Control) -> int
        Set: TabIndex(self: Control) = value
        """
        ...

    @property
    def TabStop(self) -> bool:
        """
        Get: TabStop(self: Control) -> bool
        Set: TabStop(self: Control) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: Control) -> object
        Set: Tag(self: Control) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Control) -> str
        Set: Text(self: Control) = value
        """
        ...

    @property
    def Top(self) -> int:
        """
        Get: Top(self: Control) -> int
        Set: Top(self: Control) = value
        """
        ...

    @property
    def TopLevelControl(self) -> Control:
        """ Get: TopLevelControl(self: Control) -> Control """
        ...

    @property
    def UseWaitCursor(self) -> bool:
        """
        Get: UseWaitCursor(self: Control) -> bool
        Set: UseWaitCursor(self: Control) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Control) -> bool
        Set: Visible(self: Control) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: Control) -> int
        Set: Width(self: Control) = value
        """
        ...

    @property
    def WindowTarget(self): # -> IWindowTarget
        """
        Get: WindowTarget(self: Control) -> IWindowTarget
        Set: WindowTarget(self: Control) = value
        """
        ...


    def AccessibilityNotifyClients(self, *args): #cannot find CLR method
        """ AccessibilityNotifyClients(self: Control, accEvent: AccessibleEvents, childID: int)AccessibilityNotifyClients(self: Control, accEvent: AccessibleEvents, objectID: int, childID: int) """
        ...

    def BringToFront(self): # -> 
        """ BringToFront(self: Control) """
        ...

    def Contains(self, ctl:Control) -> bool:
        """ Contains(self: Control, ctl: Control) -> bool """
        ...

    def ControlAccessibleObject(self, *args): #cannot find CLR method
        """ ControlAccessibleObject(ownerControl: Control) """
        ...

    def ControlCollection(self, *args): #cannot find CLR method
        """ ControlCollection(owner: Control) """
        ...

    def CreateAccessibilityInstance(self, *args): #cannot find CLR method
        """ CreateAccessibilityInstance(self: Control) -> AccessibleObject """
        ...

    def CreateControl(self): # -> 
        """ CreateControl(self: Control) """
        ...

    def CreateControlsInstance(self, *args): #cannot find CLR method
        """ CreateControlsInstance(self: Control) -> ControlCollection """
        ...

    def CreateGraphics(self) -> Graphics:
        """ CreateGraphics(self: Control) -> Graphics """
        ...

    def CreateHandle(self, *args): #cannot find CLR method
        """ CreateHandle(self: Control) """
        ...

    def DefWndProc(self, *args): #cannot find CLR method
        """ DefWndProc(self: Control, m: Message) -> Message """
        ...

    def DestroyHandle(self, *args): #cannot find CLR method
        """ DestroyHandle(self: Control) """
        ...

    def DoDragDrop(self, data:object, allowedEffects): # -> DragDropEffects # Not found arg types: {'allowedEffects': 'DragDropEffects'}
        """ DoDragDrop(self: Control, data: object, allowedEffects: DragDropEffects) -> DragDropEffects """
        ...

    def DrawToBitmap(self, bitmap:Bitmap, targetBounds:Rectangle): # -> 
        """ DrawToBitmap(self: Control, bitmap: Bitmap, targetBounds: Rectangle) """
        ...

    def FindForm(self) -> Form:
        """ FindForm(self: Control) -> Form """
        ...

    def Focus(self) -> bool:
        """ Focus(self: Control) -> bool """
        ...

    @staticmethod
    def FromChildHandle(handle:IntPtr) -> Control:
        """ FromChildHandle(handle: IntPtr) -> Control """
        ...

    @staticmethod
    def FromHandle(handle:IntPtr) -> Control:
        """ FromHandle(handle: IntPtr) -> Control """
        ...

    def GetAccessibilityObjectById(self, *args): #cannot find CLR method
        """ GetAccessibilityObjectById(self: Control, objectId: int) -> AccessibleObject """
        ...

    def GetAutoSizeMode(self, *args): #cannot find CLR method
        """ GetAutoSizeMode(self: Control) -> AutoSizeMode """
        ...

    def GetChildAtPoint(self, pt:Point, skipValue = ...) -> Control: # Not found arg types: {'skipValue': 'GetChildAtPointSkip'}
        """
        GetChildAtPoint(self: Control, pt: Point, skipValue: GetChildAtPointSkip) -> Control
        GetChildAtPoint(self: Control, pt: Point) -> Control
        """
        ...

    def GetContainerControl(self): # -> IContainerControl
        """ GetContainerControl(self: Control) -> IContainerControl """
        ...

    def GetNextControl(self, ctl:Control, forward:bool) -> Control:
        """ GetNextControl(self: Control, ctl: Control, forward: bool) -> Control """
        ...

    def GetPreferredSize(self, proposedSize:Size) -> Size:
        """ GetPreferredSize(self: Control, proposedSize: Size) -> Size """
        ...

    def GetScaledBounds(self, *args): #cannot find CLR method
        """ GetScaledBounds(self: Control, bounds: Rectangle, factor: SizeF, specified: BoundsSpecified) -> Rectangle """
        ...

    def GetStyle(self, *args): #cannot find CLR method
        """ GetStyle(self: Control, flag: ControlStyles) -> bool """
        ...

    def GetTopLevel(self, *args): #cannot find CLR method
        """ GetTopLevel(self: Control) -> bool """
        ...

    def Hide(self): # -> 
        """ Hide(self: Control) """
        ...

    def InitLayout(self, *args): #cannot find CLR method
        """ InitLayout(self: Control) """
        ...

    def Invalidate(self, *__args:Region): # -> 
        """ Invalidate(self: Control, region: Region)Invalidate(self: Control, region: Region, invalidateChildren: bool)Invalidate(self: Control)Invalidate(self: Control, invalidateChildren: bool)Invalidate(self: Control, rc: Rectangle)Invalidate(self: Control, rc: Rectangle, invalidateChildren: bool) """
        ...

    def InvokeGotFocus(self, *args): #cannot find CLR method
        """ InvokeGotFocus(self: Control, toInvoke: Control, e: EventArgs) """
        ...

    def InvokeLostFocus(self, *args): #cannot find CLR method
        """ InvokeLostFocus(self: Control, toInvoke: Control, e: EventArgs) """
        ...

    def InvokeOnClick(self, *args): #cannot find CLR method
        """ InvokeOnClick(self: Control, toInvoke: Control, e: EventArgs) """
        ...

    def InvokePaint(self, *args): #cannot find CLR method
        """ InvokePaint(self: Control, c: Control, e: PaintEventArgs) """
        ...

    def InvokePaintBackground(self, *args): #cannot find CLR method
        """ InvokePaintBackground(self: Control, c: Control, e: PaintEventArgs) """
        ...

    def IsInputChar(self, *args): #cannot find CLR method
        """ IsInputChar(self: Control, charCode: Char) -> bool """
        ...

    def IsInputKey(self, *args): #cannot find CLR method
        """ IsInputKey(self: Control, keyData: Keys) -> bool """
        ...

    @staticmethod
    def IsKeyLocked(keyVal) -> bool: # Not found arg types: {'keyVal': 'Keys'}
        """ IsKeyLocked(keyVal: Keys) -> bool """
        ...

    @staticmethod
    def IsMnemonic(charCode:Char, text:str) -> bool:
        """ IsMnemonic(charCode: Char, text: str) -> bool """
        ...

    def LogicalToDeviceUnits(self, value:int) -> int:
        """
        LogicalToDeviceUnits(self: Control, value: int) -> int
        LogicalToDeviceUnits(self: Control, value: Size) -> Size
        """
        ...

    def NotifyInvalidate(self, *args): #cannot find CLR method
        """ NotifyInvalidate(self: Control, invalidatedArea: Rectangle) """
        ...

    def OnAutoSizeChanged(self, *args): #cannot find CLR method
        """ OnAutoSizeChanged(self: Control, e: EventArgs) """
        ...

    def OnBackColorChanged(self, *args): #cannot find CLR method
        """ OnBackColorChanged(self: Control, e: EventArgs) """
        ...

    def OnBackgroundImageChanged(self, *args): #cannot find CLR method
        """ OnBackgroundImageChanged(self: Control, e: EventArgs) """
        ...

    def OnBackgroundImageLayoutChanged(self, *args): #cannot find CLR method
        """ OnBackgroundImageLayoutChanged(self: Control, e: EventArgs) """
        ...

    def OnBindingContextChanged(self, *args): #cannot find CLR method
        """ OnBindingContextChanged(self: Control, e: EventArgs) """
        ...

    def OnCausesValidationChanged(self, *args): #cannot find CLR method
        """ OnCausesValidationChanged(self: Control, e: EventArgs) """
        ...

    def OnChangeUICues(self, *args): #cannot find CLR method
        """ OnChangeUICues(self: Control, e: UICuesEventArgs) """
        ...

    def OnClick(self, *args): #cannot find CLR method
        """ OnClick(self: Control, e: EventArgs) """
        ...

    def OnClientSizeChanged(self, *args): #cannot find CLR method
        """ OnClientSizeChanged(self: Control, e: EventArgs) """
        ...

    def OnContextMenuChanged(self, *args): #cannot find CLR method
        """ OnContextMenuChanged(self: Control, e: EventArgs) """
        ...

    def OnContextMenuStripChanged(self, *args): #cannot find CLR method
        """ OnContextMenuStripChanged(self: Control, e: EventArgs) """
        ...

    def OnControlAdded(self, *args): #cannot find CLR method
        """ OnControlAdded(self: Control, e: ControlEventArgs) """
        ...

    def OnControlRemoved(self, *args): #cannot find CLR method
        """ OnControlRemoved(self: Control, e: ControlEventArgs) """
        ...

    def OnCreateControl(self, *args): #cannot find CLR method
        """ OnCreateControl(self: Control) """
        ...

    def OnCursorChanged(self, *args): #cannot find CLR method
        """ OnCursorChanged(self: Control, e: EventArgs) """
        ...

    def OnDockChanged(self, *args): #cannot find CLR method
        """ OnDockChanged(self: Control, e: EventArgs) """
        ...

    def OnDoubleClick(self, *args): #cannot find CLR method
        """ OnDoubleClick(self: Control, e: EventArgs) """
        ...

    def OnDpiChangedAfterParent(self, *args): #cannot find CLR method
        """ OnDpiChangedAfterParent(self: Control, e: EventArgs) """
        ...

    def OnDpiChangedBeforeParent(self, *args): #cannot find CLR method
        """ OnDpiChangedBeforeParent(self: Control, e: EventArgs) """
        ...

    def OnEnabledChanged(self, *args): #cannot find CLR method
        """ OnEnabledChanged(self: Control, e: EventArgs) """
        ...

    def OnEnter(self, *args): #cannot find CLR method
        """ OnEnter(self: Control, e: EventArgs) """
        ...

    def OnFontChanged(self, *args): #cannot find CLR method
        """ OnFontChanged(self: Control, e: EventArgs) """
        ...

    def OnForeColorChanged(self, *args): #cannot find CLR method
        """ OnForeColorChanged(self: Control, e: EventArgs) """
        ...

    def OnGiveFeedback(self, *args): #cannot find CLR method
        """ OnGiveFeedback(self: Control, gfbevent: GiveFeedbackEventArgs) """
        ...

    def OnGotFocus(self, *args): #cannot find CLR method
        """ OnGotFocus(self: Control, e: EventArgs) """
        ...

    def OnHandleCreated(self, *args): #cannot find CLR method
        """ OnHandleCreated(self: Control, e: EventArgs) """
        ...

    def OnHandleDestroyed(self, *args): #cannot find CLR method
        """ OnHandleDestroyed(self: Control, e: EventArgs) """
        ...

    def OnHelpRequested(self, *args): #cannot find CLR method
        """ OnHelpRequested(self: Control, hevent: HelpEventArgs) """
        ...

    def OnImeModeChanged(self, *args): #cannot find CLR method
        """ OnImeModeChanged(self: Control, e: EventArgs) """
        ...

    def OnInvalidated(self, *args): #cannot find CLR method
        """ OnInvalidated(self: Control, e: InvalidateEventArgs) """
        ...

    def OnKeyDown(self, *args): #cannot find CLR method
        """ OnKeyDown(self: Control, e: KeyEventArgs) """
        ...

    def OnKeyPress(self, *args): #cannot find CLR method
        """ OnKeyPress(self: Control, e: KeyPressEventArgs) """
        ...

    def OnKeyUp(self, *args): #cannot find CLR method
        """ OnKeyUp(self: Control, e: KeyEventArgs) """
        ...

    def OnLayout(self, *args): #cannot find CLR method
        """ OnLayout(self: Control, levent: LayoutEventArgs) """
        ...

    def OnLeave(self, *args): #cannot find CLR method
        """ OnLeave(self: Control, e: EventArgs) """
        ...

    def OnLocationChanged(self, *args): #cannot find CLR method
        """ OnLocationChanged(self: Control, e: EventArgs) """
        ...

    def OnLostFocus(self, *args): #cannot find CLR method
        """ OnLostFocus(self: Control, e: EventArgs) """
        ...

    def OnMarginChanged(self, *args): #cannot find CLR method
        """ OnMarginChanged(self: Control, e: EventArgs) """
        ...

    def OnMouseCaptureChanged(self, *args): #cannot find CLR method
        """ OnMouseCaptureChanged(self: Control, e: EventArgs) """
        ...

    def OnMouseClick(self, *args): #cannot find CLR method
        """ OnMouseClick(self: Control, e: MouseEventArgs) """
        ...

    def OnMouseDoubleClick(self, *args): #cannot find CLR method
        """ OnMouseDoubleClick(self: Control, e: MouseEventArgs) """
        ...

    def OnMouseDown(self, *args): #cannot find CLR method
        """ OnMouseDown(self: Control, e: MouseEventArgs) """
        ...

    def OnMouseEnter(self, *args): #cannot find CLR method
        """ OnMouseEnter(self: Control, e: EventArgs) """
        ...

    def OnMouseHover(self, *args): #cannot find CLR method
        """ OnMouseHover(self: Control, e: EventArgs) """
        ...

    def OnMouseLeave(self, *args): #cannot find CLR method
        """ OnMouseLeave(self: Control, e: EventArgs) """
        ...

    def OnMouseMove(self, *args): #cannot find CLR method
        """ OnMouseMove(self: Control, e: MouseEventArgs) """
        ...

    def OnMouseUp(self, *args): #cannot find CLR method
        """ OnMouseUp(self: Control, e: MouseEventArgs) """
        ...

    def OnMouseWheel(self, *args): #cannot find CLR method
        """ OnMouseWheel(self: Control, e: MouseEventArgs) """
        ...

    def OnMove(self, *args): #cannot find CLR method
        """ OnMove(self: Control, e: EventArgs) """
        ...

    def OnNotifyMessage(self, *args): #cannot find CLR method
        """ OnNotifyMessage(self: Control, m: Message) """
        ...

    def OnPaddingChanged(self, *args): #cannot find CLR method
        """ OnPaddingChanged(self: Control, e: EventArgs) """
        ...

    def OnPaint(self, *args): #cannot find CLR method
        """ OnPaint(self: Control, e: PaintEventArgs) """
        ...

    def OnPaintBackground(self, *args): #cannot find CLR method
        """ OnPaintBackground(self: Control, pevent: PaintEventArgs) """
        ...

    def OnParentBackColorChanged(self, *args): #cannot find CLR method
        """ OnParentBackColorChanged(self: Control, e: EventArgs) """
        ...

    def OnParentBackgroundImageChanged(self, *args): #cannot find CLR method
        """ OnParentBackgroundImageChanged(self: Control, e: EventArgs) """
        ...

    def OnParentBindingContextChanged(self, *args): #cannot find CLR method
        """ OnParentBindingContextChanged(self: Control, e: EventArgs) """
        ...

    def OnParentChanged(self, *args): #cannot find CLR method
        """ OnParentChanged(self: Control, e: EventArgs) """
        ...

    def OnParentCursorChanged(self, *args): #cannot find CLR method
        """ OnParentCursorChanged(self: Control, e: EventArgs) """
        ...

    def OnParentEnabledChanged(self, *args): #cannot find CLR method
        """ OnParentEnabledChanged(self: Control, e: EventArgs) """
        ...

    def OnParentFontChanged(self, *args): #cannot find CLR method
        """ OnParentFontChanged(self: Control, e: EventArgs) """
        ...

    def OnParentForeColorChanged(self, *args): #cannot find CLR method
        """ OnParentForeColorChanged(self: Control, e: EventArgs) """
        ...

    def OnParentRightToLeftChanged(self, *args): #cannot find CLR method
        """ OnParentRightToLeftChanged(self: Control, e: EventArgs) """
        ...

    def OnParentVisibleChanged(self, *args): #cannot find CLR method
        """ OnParentVisibleChanged(self: Control, e: EventArgs) """
        ...

    def OnPreviewKeyDown(self, *args): #cannot find CLR method
        """ OnPreviewKeyDown(self: Control, e: PreviewKeyDownEventArgs) """
        ...

    def OnPrint(self, *args): #cannot find CLR method
        """ OnPrint(self: Control, e: PaintEventArgs) """
        ...

    def OnQueryContinueDrag(self, *args): #cannot find CLR method
        """ OnQueryContinueDrag(self: Control, qcdevent: QueryContinueDragEventArgs) """
        ...

    def OnRegionChanged(self, *args): #cannot find CLR method
        """ OnRegionChanged(self: Control, e: EventArgs) """
        ...

    def OnResize(self, *args): #cannot find CLR method
        """ OnResize(self: Control, e: EventArgs) """
        ...

    def OnRightToLeftChanged(self, *args): #cannot find CLR method
        """ OnRightToLeftChanged(self: Control, e: EventArgs) """
        ...

    def OnSizeChanged(self, *args): #cannot find CLR method
        """ OnSizeChanged(self: Control, e: EventArgs) """
        ...

    def OnStyleChanged(self, *args): #cannot find CLR method
        """ OnStyleChanged(self: Control, e: EventArgs) """
        ...

    def OnSystemColorsChanged(self, *args): #cannot find CLR method
        """ OnSystemColorsChanged(self: Control, e: EventArgs) """
        ...

    def OnTabIndexChanged(self, *args): #cannot find CLR method
        """ OnTabIndexChanged(self: Control, e: EventArgs) """
        ...

    def OnTabStopChanged(self, *args): #cannot find CLR method
        """ OnTabStopChanged(self: Control, e: EventArgs) """
        ...

    def OnTextChanged(self, *args): #cannot find CLR method
        """ OnTextChanged(self: Control, e: EventArgs) """
        ...

    def OnValidated(self, *args): #cannot find CLR method
        """ OnValidated(self: Control, e: EventArgs) """
        ...

    def OnValidating(self, *args): #cannot find CLR method
        """ OnValidating(self: Control, e: CancelEventArgs) """
        ...

    def OnVisibleChanged(self, *args): #cannot find CLR method
        """ OnVisibleChanged(self: Control, e: EventArgs) """
        ...

    def PerformLayout(self, affectedControl:Control = ..., affectedProperty:str = ...): # -> 
        """ PerformLayout(self: Control)PerformLayout(self: Control, affectedControl: Control, affectedProperty: str) """
        ...

    def PointToClient(self, p:Point) -> Point:
        """ PointToClient(self: Control, p: Point) -> Point """
        ...

    def PointToScreen(self, p:Point) -> Point:
        """ PointToScreen(self: Control, p: Point) -> Point """
        ...

    def PreProcessControlMessage(self, msg:Message): # -> Tuple_[PreProcessControlState, Message]
        """ PreProcessControlMessage(self: Control, msg: Message) -> (PreProcessControlState, Message) """
        ...

    def PreProcessMessage(self, msg:Message) -> Tuple_[bool, Message]:
        """ PreProcessMessage(self: Control, msg: Message) -> (bool, Message) """
        ...

    def ProcessCmdKey(self, *args): #cannot find CLR method
        """ ProcessCmdKey(self: Control, msg: Message, keyData: Keys) -> (bool, Message) """
        ...

    def ProcessDialogChar(self, *args): #cannot find CLR method
        """ ProcessDialogChar(self: Control, charCode: Char) -> bool """
        ...

    def ProcessDialogKey(self, *args): #cannot find CLR method
        """ ProcessDialogKey(self: Control, keyData: Keys) -> bool """
        ...

    def ProcessKeyEventArgs(self, *args): #cannot find CLR method
        """ ProcessKeyEventArgs(self: Control, m: Message) -> (bool, Message) """
        ...

    def ProcessKeyMessage(self, *args): #cannot find CLR method
        """ ProcessKeyMessage(self: Control, m: Message) -> (bool, Message) """
        ...

    def ProcessKeyPreview(self, *args): #cannot find CLR method
        """ ProcessKeyPreview(self: Control, m: Message) -> (bool, Message) """
        ...

    def ProcessMnemonic(self, *args): #cannot find CLR method
        """ ProcessMnemonic(self: Control, charCode: Char) -> bool """
        ...

    def RaiseDragEvent(self, *args): #cannot find CLR method
        """ RaiseDragEvent(self: Control, key: object, e: DragEventArgs) """
        ...

    def RaiseKeyEvent(self, *args): #cannot find CLR method
        """ RaiseKeyEvent(self: Control, key: object, e: KeyEventArgs) """
        ...

    def RaiseMouseEvent(self, *args): #cannot find CLR method
        """ RaiseMouseEvent(self: Control, key: object, e: MouseEventArgs) """
        ...

    def RaisePaintEvent(self, *args): #cannot find CLR method
        """ RaisePaintEvent(self: Control, key: object, e: PaintEventArgs) """
        ...

    def RecreateHandle(self, *args): #cannot find CLR method
        """ RecreateHandle(self: Control) """
        ...

    def RectangleToClient(self, r:Rectangle) -> Rectangle:
        """ RectangleToClient(self: Control, r: Rectangle) -> Rectangle """
        ...

    def RectangleToScreen(self, r:Rectangle) -> Rectangle:
        """ RectangleToScreen(self: Control, r: Rectangle) -> Rectangle """
        ...

    def ReflectMessage(self, *args): #cannot find CLR method
        """ ReflectMessage(hWnd: IntPtr, m: Message) -> (bool, Message) """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: Control) """
        ...

    def RescaleConstantsForDpi(self, *args): #cannot find CLR method
        """ RescaleConstantsForDpi(self: Control, deviceDpiOld: int, deviceDpiNew: int) """
        ...

    def ResetBackColor(self): # -> 
        """ ResetBackColor(self: Control) """
        ...

    def ResetBindings(self): # -> 
        """ ResetBindings(self: Control) """
        ...

    def ResetCursor(self): # -> 
        """ ResetCursor(self: Control) """
        ...

    def ResetFont(self): # -> 
        """ ResetFont(self: Control) """
        ...

    def ResetForeColor(self): # -> 
        """ ResetForeColor(self: Control) """
        ...

    def ResetImeMode(self): # -> 
        """ ResetImeMode(self: Control) """
        ...

    def ResetMouseEventArgs(self, *args): #cannot find CLR method
        """ ResetMouseEventArgs(self: Control) """
        ...

    def ResetRightToLeft(self): # -> 
        """ ResetRightToLeft(self: Control) """
        ...

    def ResetText(self): # -> 
        """ ResetText(self: Control) """
        ...

    def ResumeLayout(self, performLayout:bool = ...): # -> 
        """ ResumeLayout(self: Control)ResumeLayout(self: Control, performLayout: bool) """
        ...

    def RtlTranslateAlignment(self, *args): #cannot find CLR method
        """
        RtlTranslateAlignment(self: Control, align: HorizontalAlignment) -> HorizontalAlignment
        RtlTranslateAlignment(self: Control, align: LeftRightAlignment) -> LeftRightAlignment
        RtlTranslateAlignment(self: Control, align: ContentAlignment) -> ContentAlignment
        """
        ...

    def RtlTranslateContent(self, *args): #cannot find CLR method
        """ RtlTranslateContent(self: Control, align: ContentAlignment) -> ContentAlignment """
        ...

    def RtlTranslateHorizontal(self, *args): #cannot find CLR method
        """ RtlTranslateHorizontal(self: Control, align: HorizontalAlignment) -> HorizontalAlignment """
        ...

    def RtlTranslateLeftRight(self, *args): #cannot find CLR method
        """ RtlTranslateLeftRight(self: Control, align: LeftRightAlignment) -> LeftRightAlignment """
        ...

    def Scale(self, *__args:Single): # -> 
        """ Scale(self: Control, ratio: Single)Scale(self: Control, dx: Single, dy: Single)Scale(self: Control, factor: SizeF) """
        ...

    def ScaleBitmapLogicalToDevice(self, logicalBitmap:Bitmap) -> Bitmap:
        """ ScaleBitmapLogicalToDevice(self: Control, logicalBitmap: Bitmap) -> Bitmap """
        ...

    def ScaleControl(self, *args): #cannot find CLR method
        """ ScaleControl(self: Control, factor: SizeF, specified: BoundsSpecified) """
        ...

    def ScaleCore(self, *args): #cannot find CLR method
        """ ScaleCore(self: Control, dx: Single, dy: Single) """
        ...

    def Select(self): # -> 
        """ Select(self: Control) """
        ...

    def SelectNextControl(self, ctl:Control, forward:bool, tabStopOnly:bool, nested:bool, wrap:bool) -> bool:
        """ SelectNextControl(self: Control, ctl: Control, forward: bool, tabStopOnly: bool, nested: bool, wrap: bool) -> bool """
        ...

    def SendToBack(self): # -> 
        """ SendToBack(self: Control) """
        ...

    def SetAutoSizeMode(self, *args): #cannot find CLR method
        """ SetAutoSizeMode(self: Control, mode: AutoSizeMode) """
        ...

    def SetBounds(self, x:int, y:int, width:int, height:int, specified = ...): # ->  # Not found arg types: {'specified': 'BoundsSpecified'}
        """ SetBounds(self: Control, x: int, y: int, width: int, height: int)SetBounds(self: Control, x: int, y: int, width: int, height: int, specified: BoundsSpecified) """
        ...

    def SetBoundsCore(self, *args): #cannot find CLR method
        """ SetBoundsCore(self: Control, x: int, y: int, width: int, height: int, specified: BoundsSpecified) """
        ...

    def SetClientSizeCore(self, *args): #cannot find CLR method
        """ SetClientSizeCore(self: Control, x: int, y: int) """
        ...

    def SetStyle(self, *args): #cannot find CLR method
        """ SetStyle(self: Control, flag: ControlStyles, value: bool) """
        ...

    def SetTopLevel(self, *args): #cannot find CLR method
        """ SetTopLevel(self: Control, value: bool) """
        ...

    def SetVisibleCore(self, *args): #cannot find CLR method
        """ SetVisibleCore(self: Control, value: bool) """
        ...

    def Show(self): # -> 
        """ Show(self: Control) """
        ...

    def SizeFromClientSize(self, *args): #cannot find CLR method
        """ SizeFromClientSize(self: Control, clientSize: Size) -> Size """
        ...

    def SuspendLayout(self): # -> 
        """ SuspendLayout(self: Control) """
        ...

    def Update(self): # -> 
        """ Update(self: Control) """
        ...

    def UpdateBounds(self, *args): #cannot find CLR method
        """ UpdateBounds(self: Control)UpdateBounds(self: Control, x: int, y: int, width: int, height: int)UpdateBounds(self: Control, x: int, y: int, width: int, height: int, clientWidth: int, clientHeight: int) """
        ...

    def UpdateStyles(self, *args): #cannot find CLR method
        """ UpdateStyles(self: Control) """
        ...

    def UpdateZOrder(self, *args): #cannot find CLR method
        """ UpdateZOrder(self: Control) """
        ...

    def WndProc(self, *args): #cannot find CLR method
        """ WndProc(self: Control, m: Message) -> Message """
        ...

    def __new__(cls, *__args:str) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, text: str)
        __new__(cls: type, text: str, left: int, top: int, width: int, height: int)
        __new__(cls: type, parent: Control, text: str)
        __new__(cls: type, parent: Control, text: str, left: int, top: int, width: int, height: int)
        """
        ...

    AutoSizeChanged = ...
    BackColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    BindingContextChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    ControlRemoved = ...
    CursorChanged = ...
    DockChanged = ...
    DoubleClick = ...
    DpiChangedAfterParent = ...
    DpiChangedBeforeParent = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    Enter = ...
    FontChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    GotFocus = ...
    HandleCreated = ...
    HandleDestroyed = ...
    HelpRequested = ...
    ImeModeChanged = ...
    Invalidated = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    LostFocus = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    MouseWheel = ...
    Move = ...
    PaddingChanged = ...
    Paint = ...
    ParentChanged = ...
    PreviewKeyDown = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    TextChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class AxHost(ICustomTypeDescriptor, Control, ISupportInitialize): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ no doc """
    @property
    def ContainingControl(self): # -> ContainerControl
        """
        Get: ContainingControl(self: AxHost) -> ContainerControl
        Set: ContainingControl(self: AxHost) = value
        """
        ...

    @property
    def EditMode(self) -> bool:
        """ Get: EditMode(self: AxHost) -> bool """
        ...

    @property
    def HasAboutBox(self) -> bool:
        """ Get: HasAboutBox(self: AxHost) -> bool """
        ...

    @property
    def OcxState(self) -> State:
        """
        Get: OcxState(self: AxHost) -> State
        Set: OcxState(self: AxHost) = value
        """
        ...


    def AboutBoxDelegate(self, *args): #cannot find CLR method
        """ AboutBoxDelegate(object: object, method: IntPtr) """
        ...

    def ActiveXInvokeKind(self, *args): #cannot find CLR method
        """ enum ActiveXInvokeKind, values: MethodInvoke (0), PropertyGet (1), PropertySet (2) """
        ...

    def AttachInterfaces(self, *args): #cannot find CLR method
        """ AttachInterfaces(self: AxHost) """
        ...

    def AxComponentEditor(self, *args): #cannot find CLR method
        """ AxComponentEditor() """
        ...

    def ClsidAttribute(self, *args): #cannot find CLR method
        """ ClsidAttribute(clsid: str) """
        ...

    def ConnectionPointCookie(self, *args): #cannot find CLR method
        """ ConnectionPointCookie(source: object, sink: object, eventInterface: Type) """
        ...

    def CreateInstanceCore(self, *args): #cannot find CLR method
        """ CreateInstanceCore(self: AxHost, clsid: Guid) -> object """
        ...

    def CreateSink(self, *args): #cannot find CLR method
        """ CreateSink(self: AxHost) """
        ...

    def DetachSink(self, *args): #cannot find CLR method
        """ DetachSink(self: AxHost) """
        ...

    def DoVerb(self, verb:int): # -> 
        """ DoVerb(self: AxHost, verb: int) """
        ...

    def GetColorFromOleColor(self, *args): #cannot find CLR method
        """ GetColorFromOleColor(color: UInt32) -> Color """
        ...

    def GetFontFromIFont(self, *args): #cannot find CLR method
        """ GetFontFromIFont(font: object) -> Font """
        ...

    def GetFontFromIFontDisp(self, *args): #cannot find CLR method
        """ GetFontFromIFontDisp(font: object) -> Font """
        ...

    def GetIFontDispFromFont(self, *args): #cannot find CLR method
        """ GetIFontDispFromFont(font: Font) -> object """
        ...

    def GetIFontFromFont(self, *args): #cannot find CLR method
        """ GetIFontFromFont(font: Font) -> object """
        ...

    def GetIPictureDispFromPicture(self, *args): #cannot find CLR method
        """ GetIPictureDispFromPicture(image: Image) -> object """
        ...

    def GetIPictureFromCursor(self, *args): #cannot find CLR method
        """ GetIPictureFromCursor(cursor: Cursor) -> object """
        ...

    def GetIPictureFromPicture(self, *args): #cannot find CLR method
        """ GetIPictureFromPicture(image: Image) -> object """
        ...

    def GetOADateFromTime(self, *args): #cannot find CLR method
        """ GetOADateFromTime(time: DateTime) -> float """
        ...

    def GetOcx(self) -> object:
        """ GetOcx(self: AxHost) -> object """
        ...

    def GetOleColorFromColor(self, *args): #cannot find CLR method
        """ GetOleColorFromColor(color: Color) -> UInt32 """
        ...

    def GetPictureFromIPicture(self, *args): #cannot find CLR method
        """ GetPictureFromIPicture(picture: object) -> Image """
        ...

    def GetPictureFromIPictureDisp(self, *args): #cannot find CLR method
        """ GetPictureFromIPictureDisp(picture: object) -> Image """
        ...

    def GetTimeFromOADate(self, *args): #cannot find CLR method
        """ GetTimeFromOADate(date: float) -> DateTime """
        ...

    def HasPropertyPages(self) -> bool:
        """ HasPropertyPages(self: AxHost) -> bool """
        ...

    def InvalidActiveXStateException(self, *args): #cannot find CLR method
        """
        InvalidActiveXStateException(name: str, kind: ActiveXInvokeKind)
        InvalidActiveXStateException()
        """
        ...

    def InvokeEditMode(self): # -> 
        """ InvokeEditMode(self: AxHost) """
        ...

    def MakeDirty(self): # -> 
        """ MakeDirty(self: AxHost) """
        ...

    def OnInPlaceActive(self, *args): #cannot find CLR method
        """ OnInPlaceActive(self: AxHost) """
        ...

    def PropsValid(self, *args): #cannot find CLR method
        """ PropsValid(self: AxHost) -> bool """
        ...

    def RaiseOnMouseDown(self, *args): #cannot find CLR method
        """ RaiseOnMouseDown(self: AxHost, o1: object, o2: object, o3: object, o4: object)RaiseOnMouseDown(self: AxHost, button: Int16, shift: Int16, x: Single, y: Single)RaiseOnMouseDown(self: AxHost, button: Int16, shift: Int16, x: int, y: int) """
        ...

    def RaiseOnMouseMove(self, *args): #cannot find CLR method
        """ RaiseOnMouseMove(self: AxHost, o1: object, o2: object, o3: object, o4: object)RaiseOnMouseMove(self: AxHost, button: Int16, shift: Int16, x: Single, y: Single)RaiseOnMouseMove(self: AxHost, button: Int16, shift: Int16, x: int, y: int) """
        ...

    def RaiseOnMouseUp(self, *args): #cannot find CLR method
        """ RaiseOnMouseUp(self: AxHost, o1: object, o2: object, o3: object, o4: object)RaiseOnMouseUp(self: AxHost, button: Int16, shift: Int16, x: Single, y: Single)RaiseOnMouseUp(self: AxHost, button: Int16, shift: Int16, x: int, y: int) """
        ...

    def SetAboutBoxDelegate(self, *args): #cannot find CLR method
        """ SetAboutBoxDelegate(self: AxHost, d: AboutBoxDelegate) """
        ...

    def ShowAboutBox(self): # -> 
        """ ShowAboutBox(self: AxHost) """
        ...

    def ShowPropertyPages(self, control:Control = ...): # -> 
        """ ShowPropertyPages(self: AxHost)ShowPropertyPages(self: AxHost, control: Control) """
        ...

    def State(self, *args): #cannot find CLR method
        """ State(ms: Stream, storageType: int, manualUpdate: bool, licKey: str) """
        ...

    def StateConverter(self, *args): #cannot find CLR method
        """ StateConverter() """
        ...

    def TypeLibraryTimeStampAttribute(self, *args): #cannot find CLR method
        """ TypeLibraryTimeStampAttribute(timestamp: str) """
        ...

    BackColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    BindingContextChanged = ...
    ChangeUICues = ...
    Click = ...
    ContextMenuChanged = ...
    CursorChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    FontChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    ImeModeChanged = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    MouseWheel = ...
    Paint = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RightToLeftChanged = ...
    StyleChanged = ...
    TextChanged = ...


class BaseCollection(MarshalByRefObject, ICollection): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ BaseCollection() """
    @property
    def IsReadOnly(self) -> bool:
        """ Get: IsReadOnly(self: BaseCollection) -> bool """
        ...

    @property
    def List(self):
        ...


    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: BaseCollection) -> IEnumerator """
        ...

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        ...


class BatteryChargeStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) BatteryChargeStatus, values: Charging (8), Critical (4), High (1), Low (2), NoSystemBattery (128), Unknown (255) """
    Charging: BatteryChargeStatus = ...
    Critical: BatteryChargeStatus = ...
    High: BatteryChargeStatus = ...
    Low: BatteryChargeStatus = ...
    NoSystemBattery: BatteryChargeStatus = ...
    Unknown: BatteryChargeStatus = ...
    value__ = ...


class Binding: # skipped bases: <type 'object'>, <type 'object'>
    """
    Binding(propertyName: str, dataSource: object, dataMember: str)
    Binding(propertyName: str, dataSource: object, dataMember: str, formattingEnabled: bool)
    Binding(propertyName: str, dataSource: object, dataMember: str, formattingEnabled: bool, dataSourceUpdateMode: DataSourceUpdateMode)
    Binding(propertyName: str, dataSource: object, dataMember: str, formattingEnabled: bool, dataSourceUpdateMode: DataSourceUpdateMode, nullValue: object)
    Binding(propertyName: str, dataSource: object, dataMember: str, formattingEnabled: bool, dataSourceUpdateMode: DataSourceUpdateMode, nullValue: object, formatString: str)
    Binding(propertyName: str, dataSource: object, dataMember: str, formattingEnabled: bool, dataSourceUpdateMode: DataSourceUpdateMode, nullValue: object, formatString: str, formatInfo: IFormatProvider)
    """
    @property
    def BindableComponent(self) -> IBindableComponent:
        """ Get: BindableComponent(self: Binding) -> IBindableComponent """
        ...

    @property
    def BindingManagerBase(self): # -> BindingManagerBase
        """ Get: BindingManagerBase(self: Binding) -> BindingManagerBase """
        ...

    @property
    def BindingMemberInfo(self): # -> BindingMemberInfo
        """ Get: BindingMemberInfo(self: Binding) -> BindingMemberInfo """
        ...

    @property
    def Control(self) -> Control:
        """ Get: Control(self: Binding) -> Control """
        ...

    @property
    def ControlUpdateMode(self): # -> ControlUpdateMode
        """
        Get: ControlUpdateMode(self: Binding) -> ControlUpdateMode
        Set: ControlUpdateMode(self: Binding) = value
        """
        ...

    @property
    def DataSource(self) -> object:
        """ Get: DataSource(self: Binding) -> object """
        ...

    @property
    def DataSourceNullValue(self) -> object:
        """
        Get: DataSourceNullValue(self: Binding) -> object
        Set: DataSourceNullValue(self: Binding) = value
        """
        ...

    @property
    def DataSourceUpdateMode(self): # -> DataSourceUpdateMode
        """
        Get: DataSourceUpdateMode(self: Binding) -> DataSourceUpdateMode
        Set: DataSourceUpdateMode(self: Binding) = value
        """
        ...

    @property
    def FormatInfo(self) -> IFormatProvider:
        """
        Get: FormatInfo(self: Binding) -> IFormatProvider
        Set: FormatInfo(self: Binding) = value
        """
        ...

    @property
    def FormatString(self) -> str:
        """
        Get: FormatString(self: Binding) -> str
        Set: FormatString(self: Binding) = value
        """
        ...

    @property
    def FormattingEnabled(self) -> bool:
        """
        Get: FormattingEnabled(self: Binding) -> bool
        Set: FormattingEnabled(self: Binding) = value
        """
        ...

    @property
    def IsBinding(self) -> bool:
        """ Get: IsBinding(self: Binding) -> bool """
        ...

    @property
    def NullValue(self) -> object:
        """
        Get: NullValue(self: Binding) -> object
        Set: NullValue(self: Binding) = value
        """
        ...

    @property
    def PropertyName(self) -> str:
        """ Get: PropertyName(self: Binding) -> str """
        ...


    def OnBindingComplete(self, *args): #cannot find CLR method
        """ OnBindingComplete(self: Binding, e: BindingCompleteEventArgs) """
        ...

    def OnFormat(self, *args): #cannot find CLR method
        """ OnFormat(self: Binding, cevent: ConvertEventArgs) """
        ...

    def OnParse(self, *args): #cannot find CLR method
        """ OnParse(self: Binding, cevent: ConvertEventArgs) """
        ...

    def ReadValue(self): # -> 
        """ ReadValue(self: Binding) """
        ...

    def WriteValue(self): # -> 
        """ WriteValue(self: Binding) """
        ...

    BindingComplete = ...
    Format = ...
    Parse = ...


class BindingCompleteContext(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum BindingCompleteContext, values: ControlUpdate (0), DataSourceUpdate (1) """
    ControlUpdate: BindingCompleteContext = ...
    DataSourceUpdate: BindingCompleteContext = ...
    value__ = ...


class BindingCompleteEventArgs(CancelEventArgs): # skipped bases: <type 'object'>
    """
    BindingCompleteEventArgs(binding: Binding, state: BindingCompleteState, context: BindingCompleteContext, errorText: str, exception: Exception, cancel: bool)
    BindingCompleteEventArgs(binding: Binding, state: BindingCompleteState, context: BindingCompleteContext, errorText: str, exception: Exception)
    BindingCompleteEventArgs(binding: Binding, state: BindingCompleteState, context: BindingCompleteContext, errorText: str)
    BindingCompleteEventArgs(binding: Binding, state: BindingCompleteState, context: BindingCompleteContext)
    """
    @property
    def Binding(self) -> Binding:
        """ Get: Binding(self: BindingCompleteEventArgs) -> Binding """
        ...

    @property
    def BindingCompleteContext(self) -> BindingCompleteContext:
        """ Get: BindingCompleteContext(self: BindingCompleteEventArgs) -> BindingCompleteContext """
        ...

    @property
    def BindingCompleteState(self): # -> BindingCompleteState
        """ Get: BindingCompleteState(self: BindingCompleteEventArgs) -> BindingCompleteState """
        ...

    @property
    def ErrorText(self) -> str:
        """ Get: ErrorText(self: BindingCompleteEventArgs) -> str """
        ...

    @property
    def Exception(self) -> Exception:
        """ Get: Exception(self: BindingCompleteEventArgs) -> Exception """
        ...



class BindingCompleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ BindingCompleteEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:BindingCompleteEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: BindingCompleteEventHandler, sender: object, e: BindingCompleteEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: BindingCompleteEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:BindingCompleteEventArgs): # -> 
        """ Invoke(self: BindingCompleteEventHandler, sender: object, e: BindingCompleteEventArgs) """
        ...


class BindingCompleteState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum BindingCompleteState, values: DataError (1), Exception (2), Success (0) """
    DataError: BindingCompleteState = ...
    Exception: BindingCompleteState = ...
    Success: BindingCompleteState = ...
    value__ = ...


class BindingContext(ICollection): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ BindingContext() """
    @property
    def IsReadOnly(self) -> bool:
        """ Get: IsReadOnly(self: BindingContext) -> bool """
        ...


    def Add(self, *args): #cannot find CLR method
        """ Add(self: BindingContext, dataSource: object, listManager: BindingManagerBase) """
        ...

    def AddCore(self, *args): #cannot find CLR method
        """ AddCore(self: BindingContext, dataSource: object, listManager: BindingManagerBase) """
        ...

    def Clear(self, *args): #cannot find CLR method
        """ Clear(self: BindingContext) """
        ...

    def ClearCore(self, *args): #cannot find CLR method
        """ ClearCore(self: BindingContext) """
        ...

    def Contains(self, dataSource:object, dataMember:str = ...) -> bool:
        """
        Contains(self: BindingContext, dataSource: object) -> bool
        Contains(self: BindingContext, dataSource: object, dataMember: str) -> bool
        """
        ...

    def OnCollectionChanged(self, *args): #cannot find CLR method
        """ OnCollectionChanged(self: BindingContext, ccevent: CollectionChangeEventArgs) """
        ...

    def Remove(self, *args): #cannot find CLR method
        """ Remove(self: BindingContext, dataSource: object) """
        ...

    def RemoveCore(self, *args): #cannot find CLR method
        """ RemoveCore(self: BindingContext, dataSource: object) """
        ...

    @staticmethod
    def UpdateBinding(newBindingContext:BindingContext, binding:Binding): # -> 
        """ UpdateBinding(newBindingContext: BindingContext, binding: Binding) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        ...

    CollectionChanged = ...


class BindingManagerBase: # skipped bases: <type 'object'>, <type 'object'>
    """ BindingManagerBase() """
    @property
    def Bindings(self): # -> BindingsCollection
        """ Get: Bindings(self: BindingManagerBase) -> BindingsCollection """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: BindingManagerBase) -> int """
        ...

    @property
    def Current(self) -> object:
        """ Get: Current(self: BindingManagerBase) -> object """
        ...

    @property
    def IsBindingSuspended(self) -> bool:
        """ Get: IsBindingSuspended(self: BindingManagerBase) -> bool """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: BindingManagerBase) -> int
        Set: Position(self: BindingManagerBase) = value
        """
        ...


    def AddNew(self): # -> 
        """ AddNew(self: BindingManagerBase) """
        ...

    def CancelCurrentEdit(self): # -> 
        """ CancelCurrentEdit(self: BindingManagerBase) """
        ...

    def EndCurrentEdit(self): # -> 
        """ EndCurrentEdit(self: BindingManagerBase) """
        ...

    def GetItemProperties(self) -> PropertyDescriptorCollection:
        """ GetItemProperties(self: BindingManagerBase) -> PropertyDescriptorCollection """
        ...

    def GetListName(self, *args): #cannot find CLR method
        """ GetListName(self: BindingManagerBase, listAccessors: ArrayList) -> str """
        ...

    def OnBindingComplete(self, *args): #cannot find CLR method
        """ OnBindingComplete(self: BindingManagerBase, args: BindingCompleteEventArgs) """
        ...

    def OnCurrentChanged(self, *args): #cannot find CLR method
        """ OnCurrentChanged(self: BindingManagerBase, e: EventArgs) """
        ...

    def OnCurrentItemChanged(self, *args): #cannot find CLR method
        """ OnCurrentItemChanged(self: BindingManagerBase, e: EventArgs) """
        ...

    def OnDataError(self, *args): #cannot find CLR method
        """ OnDataError(self: BindingManagerBase, e: Exception) """
        ...

    def PullData(self, *args): #cannot find CLR method
        """ PullData(self: BindingManagerBase) """
        ...

    def PushData(self, *args): #cannot find CLR method
        """ PushData(self: BindingManagerBase) """
        ...

    def RemoveAt(self, index:int): # -> 
        """ RemoveAt(self: BindingManagerBase, index: int) """
        ...

    def ResumeBinding(self): # -> 
        """ ResumeBinding(self: BindingManagerBase) """
        ...

    def SuspendBinding(self): # -> 
        """ SuspendBinding(self: BindingManagerBase) """
        ...

    def UpdateIsBinding(self, *args): #cannot find CLR method
        """ UpdateIsBinding(self: BindingManagerBase) """
        ...

    BindingComplete = ...
    CurrentChanged = ...
    CurrentItemChanged = ...
    DataError = ...
    onCurrentChangedHandler = ...
    onPositionChangedHandler = ...
    PositionChanged = ...


class BindingManagerDataErrorEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ BindingManagerDataErrorEventArgs(exception: Exception) """
    @property
    def Exception(self) -> Exception:
        """ Get: Exception(self: BindingManagerDataErrorEventArgs) -> Exception """
        ...


    def __new__(cls, exception:Exception) -> Self:
        """ __new__(cls: type, exception: Exception) """
        ...


class BindingManagerDataErrorEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ BindingManagerDataErrorEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:BindingManagerDataErrorEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: BindingManagerDataErrorEventHandler, sender: object, e: BindingManagerDataErrorEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: BindingManagerDataErrorEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:BindingManagerDataErrorEventArgs): # -> 
        """ Invoke(self: BindingManagerDataErrorEventHandler, sender: object, e: BindingManagerDataErrorEventArgs) """
        ...


class BindingMemberInfo: # skipped bases: <type 'object'>, <type 'object'>
    """ BindingMemberInfo(dataMember: str) """
    @property
    def BindingField(self) -> str:
        """ Get: BindingField(self: BindingMemberInfo) -> str """
        ...

    @property
    def BindingMember(self) -> str:
        """ Get: BindingMember(self: BindingMemberInfo) -> str """
        ...

    @property
    def BindingPath(self) -> str:
        """ Get: BindingPath(self: BindingMemberInfo) -> str """
        ...


    def Equals(self, otherObject:object) -> bool:
        """ Equals(self: BindingMemberInfo, otherObject: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: BindingMemberInfo) -> int """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class ScrollableControl(Control): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ ScrollableControl() """
    @property
    def AutoScroll(self) -> bool:
        """
        Get: AutoScroll(self: ScrollableControl) -> bool
        Set: AutoScroll(self: ScrollableControl) = value
        """
        ...

    @property
    def AutoScrollMargin(self) -> Size:
        """
        Get: AutoScrollMargin(self: ScrollableControl) -> Size
        Set: AutoScrollMargin(self: ScrollableControl) = value
        """
        ...

    @property
    def AutoScrollMinSize(self) -> Size:
        """
        Get: AutoScrollMinSize(self: ScrollableControl) -> Size
        Set: AutoScrollMinSize(self: ScrollableControl) = value
        """
        ...

    @property
    def AutoScrollPosition(self) -> Point:
        """
        Get: AutoScrollPosition(self: ScrollableControl) -> Point
        Set: AutoScrollPosition(self: ScrollableControl) = value
        """
        ...

    @property
    def DockPadding(self): # -> DockPaddingEdges
        """ Get: DockPadding(self: ScrollableControl) -> DockPaddingEdges """
        ...

    @property
    def HorizontalScroll(self): # -> HScrollProperties
        """ Get: HorizontalScroll(self: ScrollableControl) -> HScrollProperties """
        ...

    @property
    def HScroll(self):
        ...

    @property
    def VerticalScroll(self): # -> VScrollProperties
        """ Get: VerticalScroll(self: ScrollableControl) -> VScrollProperties """
        ...

    @property
    def VScroll(self):
        ...


    def AdjustFormScrollbars(self, *args): #cannot find CLR method
        """ AdjustFormScrollbars(self: ScrollableControl, displayScrollbars: bool) """
        ...

    def DockPaddingEdges(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def DockPaddingEdgesConverter(self, *args): #cannot find CLR method
        """ DockPaddingEdgesConverter() """
        ...

    def GetScrollState(self, *args): #cannot find CLR method
        """ GetScrollState(self: ScrollableControl, bit: int) -> bool """
        ...

    def OnScroll(self, *args): #cannot find CLR method
        """ OnScroll(self: ScrollableControl, se: ScrollEventArgs) """
        ...

    def ScrollControlIntoView(self, activeControl:Control): # -> 
        """ ScrollControlIntoView(self: ScrollableControl, activeControl: Control) """
        ...

    def ScrollToControl(self, *args): #cannot find CLR method
        """ ScrollToControl(self: ScrollableControl, activeControl: Control) -> Point """
        ...

    def SetAutoScrollMargin(self, x:int, y:int): # -> 
        """ SetAutoScrollMargin(self: ScrollableControl, x: int, y: int) """
        ...

    def SetDisplayRectLocation(self, *args): #cannot find CLR method
        """ SetDisplayRectLocation(self: ScrollableControl, x: int, y: int) """
        ...

    def SetScrollState(self, *args): #cannot find CLR method
        """ SetScrollState(self: ScrollableControl, bit: int, value: bool) """
        ...

    Scroll = ...
    ScrollStateAutoScrolling: int = ...
    ScrollStateFullDrag: int = ...
    ScrollStateHScrollVisible: int = ...
    ScrollStateUserHasScrolled: int = ...
    ScrollStateVScrollVisible: int = ...


class ToolStrip(ISupportToolStripPanel, ScrollableControl): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'object'>
    """
    ToolStrip()
    ToolStrip(*items: Array[ToolStripItem])
    """
    @property
    def AllowDrop(self) -> bool:
        """
        Get: AllowDrop(self: ToolStrip) -> bool
        Set: AllowDrop(self: ToolStrip) = value
        """
        ...

    @property
    def AllowItemReorder(self) -> bool:
        """
        Get: AllowItemReorder(self: ToolStrip) -> bool
        Set: AllowItemReorder(self: ToolStrip) = value
        """
        ...

    @property
    def AllowMerge(self) -> bool:
        """
        Get: AllowMerge(self: ToolStrip) -> bool
        Set: AllowMerge(self: ToolStrip) = value
        """
        ...

    @property
    def Anchor(self) -> AnchorStyles:
        """
        Get: Anchor(self: ToolStrip) -> AnchorStyles
        Set: Anchor(self: ToolStrip) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: ToolStrip) -> bool
        Set: AutoSize(self: ToolStrip) = value
        """
        ...

    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: ToolStrip) -> Color
        Set: BackColor(self: ToolStrip) = value
        """
        ...

    @property
    def CanOverflow(self) -> bool:
        """
        Get: CanOverflow(self: ToolStrip) -> bool
        Set: CanOverflow(self: ToolStrip) = value
        """
        ...

    @property
    def CausesValidation(self) -> bool:
        """
        Get: CausesValidation(self: ToolStrip) -> bool
        Set: CausesValidation(self: ToolStrip) = value
        """
        ...

    @property
    def Controls(self) -> ControlCollection:
        """ Get: Controls(self: ToolStrip) -> ControlCollection """
        ...

    @property
    def Cursor(self) -> Cursor:
        """
        Get: Cursor(self: ToolStrip) -> Cursor
        Set: Cursor(self: ToolStrip) = value
        """
        ...

    @property
    def DefaultDock(self):
        ...

    @property
    def DefaultDropDownDirection(self): # -> ToolStripDropDownDirection
        """
        Get: DefaultDropDownDirection(self: ToolStrip) -> ToolStripDropDownDirection
        Set: DefaultDropDownDirection(self: ToolStrip) = value
        """
        ...

    @property
    def DefaultGripMargin(self):
        ...

    @property
    def DefaultShowItemToolTips(self):
        ...

    @property
    def DisplayedItems(self):
        ...

    @property
    def Dock(self): # -> DockStyle
        """
        Get: Dock(self: ToolStrip) -> DockStyle
        Set: Dock(self: ToolStrip) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: ToolStrip) -> Font
        Set: Font(self: ToolStrip) = value
        """
        ...

    @property
    def ForeColor(self) -> Color:
        """
        Get: ForeColor(self: ToolStrip) -> Color
        Set: ForeColor(self: ToolStrip) = value
        """
        ...

    @property
    def GripDisplayStyle(self): # -> ToolStripGripDisplayStyle
        """ Get: GripDisplayStyle(self: ToolStrip) -> ToolStripGripDisplayStyle """
        ...

    @property
    def GripMargin(self): # -> Padding
        """
        Get: GripMargin(self: ToolStrip) -> Padding
        Set: GripMargin(self: ToolStrip) = value
        """
        ...

    @property
    def GripRectangle(self) -> Rectangle:
        """ Get: GripRectangle(self: ToolStrip) -> Rectangle """
        ...

    @property
    def GripStyle(self): # -> ToolStripGripStyle
        """
        Get: GripStyle(self: ToolStrip) -> ToolStripGripStyle
        Set: GripStyle(self: ToolStrip) = value
        """
        ...

    @property
    def HasChildren(self) -> bool:
        """ Get: HasChildren(self: ToolStrip) -> bool """
        ...

    @property
    def ImageList(self): # -> ImageList
        """
        Get: ImageList(self: ToolStrip) -> ImageList
        Set: ImageList(self: ToolStrip) = value
        """
        ...

    @property
    def ImageScalingSize(self) -> Size:
        """
        Get: ImageScalingSize(self: ToolStrip) -> Size
        Set: ImageScalingSize(self: ToolStrip) = value
        """
        ...

    @property
    def IsCurrentlyDragging(self) -> bool:
        """ Get: IsCurrentlyDragging(self: ToolStrip) -> bool """
        ...

    @property
    def IsDropDown(self) -> bool:
        """ Get: IsDropDown(self: ToolStrip) -> bool """
        ...

    @property
    def Items(self): # -> ToolStripItemCollection
        """ Get: Items(self: ToolStrip) -> ToolStripItemCollection """
        ...

    @property
    def LayoutEngine(self) -> LayoutEngine:
        """ Get: LayoutEngine(self: ToolStrip) -> LayoutEngine """
        ...

    @property
    def LayoutSettings(self): # -> LayoutSettings
        """
        Get: LayoutSettings(self: ToolStrip) -> LayoutSettings
        Set: LayoutSettings(self: ToolStrip) = value
        """
        ...

    @property
    def LayoutStyle(self): # -> ToolStripLayoutStyle
        """
        Get: LayoutStyle(self: ToolStrip) -> ToolStripLayoutStyle
        Set: LayoutStyle(self: ToolStrip) = value
        """
        ...

    @property
    def MaxItemSize(self):
        ...

    @property
    def Orientation(self): # -> Orientation
        """ Get: Orientation(self: ToolStrip) -> Orientation """
        ...

    @property
    def OverflowButton(self): # -> ToolStripOverflowButton
        """ Get: OverflowButton(self: ToolStrip) -> ToolStripOverflowButton """
        ...

    @property
    def Renderer(self): # -> ToolStripRenderer
        """
        Get: Renderer(self: ToolStrip) -> ToolStripRenderer
        Set: Renderer(self: ToolStrip) = value
        """
        ...

    @property
    def RenderMode(self): # -> ToolStripRenderMode
        """
        Get: RenderMode(self: ToolStrip) -> ToolStripRenderMode
        Set: RenderMode(self: ToolStrip) = value
        """
        ...

    @property
    def ShowItemToolTips(self) -> bool:
        """
        Get: ShowItemToolTips(self: ToolStrip) -> bool
        Set: ShowItemToolTips(self: ToolStrip) = value
        """
        ...

    @property
    def Stretch(self) -> bool:
        """
        Get: Stretch(self: ToolStrip) -> bool
        Set: Stretch(self: ToolStrip) = value
        """
        ...

    @property
    def TabStop(self) -> bool:
        """
        Get: TabStop(self: ToolStrip) -> bool
        Set: TabStop(self: ToolStrip) = value
        """
        ...

    @property
    def TextDirection(self): # -> ToolStripTextDirection
        """
        Get: TextDirection(self: ToolStrip) -> ToolStripTextDirection
        Set: TextDirection(self: ToolStrip) = value
        """
        ...


    def CreateDefaultItem(self, *args): #cannot find CLR method
        """ CreateDefaultItem(self: ToolStrip, text: str, image: Image, onClick: EventHandler) -> ToolStripItem """
        ...

    def CreateLayoutSettings(self, *args): #cannot find CLR method
        """ CreateLayoutSettings(self: ToolStrip, layoutStyle: ToolStripLayoutStyle) -> LayoutSettings """
        ...

    def GetChildAtPoint(self, *__args:Point) -> Control:
        """
        GetChildAtPoint(self: ToolStrip, point: Point) -> Control
        GetChildAtPoint(self: ToolStrip, pt: Point, skipValue: GetChildAtPointSkip) -> Control
        """
        ...

    def GetItemAt(self, *__args:Point): # -> ToolStripItem
        """
        GetItemAt(self: ToolStrip, x: int, y: int) -> ToolStripItem
        GetItemAt(self: ToolStrip, point: Point) -> ToolStripItem
        """
        ...

    def GetNextItem(self, start, direction:ArrowDirection): # -> ToolStripItem # Not found arg types: {'start': 'ToolStripItem'}
        """ GetNextItem(self: ToolStrip, start: ToolStripItem, direction: ArrowDirection) -> ToolStripItem """
        ...

    def OnBeginDrag(self, *args): #cannot find CLR method
        """ OnBeginDrag(self: ToolStrip, e: EventArgs) """
        ...

    def OnEndDrag(self, *args): #cannot find CLR method
        """ OnEndDrag(self: ToolStrip, e: EventArgs) """
        ...

    def OnItemAdded(self, *args): #cannot find CLR method
        """ OnItemAdded(self: ToolStrip, e: ToolStripItemEventArgs) """
        ...

    def OnItemClicked(self, *args): #cannot find CLR method
        """ OnItemClicked(self: ToolStrip, e: ToolStripItemClickedEventArgs) """
        ...

    def OnItemRemoved(self, *args): #cannot find CLR method
        """ OnItemRemoved(self: ToolStrip, e: ToolStripItemEventArgs) """
        ...

    def OnLayoutCompleted(self, *args): #cannot find CLR method
        """ OnLayoutCompleted(self: ToolStrip, e: EventArgs) """
        ...

    def OnLayoutStyleChanged(self, *args): #cannot find CLR method
        """ OnLayoutStyleChanged(self: ToolStrip, e: EventArgs) """
        ...

    def OnPaintGrip(self, *args): #cannot find CLR method
        """ OnPaintGrip(self: ToolStrip, e: PaintEventArgs) """
        ...

    def OnRendererChanged(self, *args): #cannot find CLR method
        """ OnRendererChanged(self: ToolStrip, e: EventArgs) """
        ...

    def ResetMinimumSize(self): # -> 
        """ ResetMinimumSize(self: ToolStrip) """
        ...

    def RestoreFocus(self, *args): #cannot find CLR method
        """ RestoreFocus(self: ToolStrip) """
        ...

    def SetDisplayedItems(self, *args): #cannot find CLR method
        """ SetDisplayedItems(self: ToolStrip) """
        ...

    def SetItemLocation(self, *args): #cannot find CLR method
        """ SetItemLocation(self: ToolStrip, item: ToolStripItem, location: Point) """
        ...

    def SetItemParent(self, *args): #cannot find CLR method
        """ SetItemParent(item: ToolStripItem, parent: ToolStrip) """
        ...

    def ToolStripAccessibleObject(self, *args): #cannot find CLR method
        """ ToolStripAccessibleObject(owner: ToolStrip) """
        ...

    def ToString(self) -> str:
        """ ToString(self: ToolStrip) -> str """
        ...

    def __new__(cls, items:Array = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, *items: Array[ToolStripItem])
        """
        ...

    AutoSizeChanged = ...
    BeginDrag = ...
    CausesValidationChanged = ...
    ControlAdded = ...
    ControlRemoved = ...
    CursorChanged = ...
    EndDrag = ...
    ForeColorChanged = ...
    ItemAdded = ...
    ItemClicked = ...
    ItemRemoved = ...
    LayoutCompleted = ...
    LayoutStyleChanged = ...
    PaintGrip = ...
    RendererChanged = ...


class BindingNavigator(ToolStrip, ISupportInitialize): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'ISupportToolStripPanel'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """
    BindingNavigator()
    BindingNavigator(bindingSource: BindingSource)
    BindingNavigator(container: IContainer)
    BindingNavigator(addStandardItems: bool)
    """
    @property
    def AddNewItem(self): # -> ToolStripItem
        """
        Get: AddNewItem(self: BindingNavigator) -> ToolStripItem
        Set: AddNewItem(self: BindingNavigator) = value
        """
        ...

    @property
    def BindingSource(self): # -> BindingSource
        """
        Get: BindingSource(self: BindingNavigator) -> BindingSource
        Set: BindingSource(self: BindingNavigator) = value
        """
        ...

    @property
    def CountItem(self): # -> ToolStripItem
        """
        Get: CountItem(self: BindingNavigator) -> ToolStripItem
        Set: CountItem(self: BindingNavigator) = value
        """
        ...

    @property
    def CountItemFormat(self) -> str:
        """
        Get: CountItemFormat(self: BindingNavigator) -> str
        Set: CountItemFormat(self: BindingNavigator) = value
        """
        ...

    @property
    def DeleteItem(self): # -> ToolStripItem
        """
        Get: DeleteItem(self: BindingNavigator) -> ToolStripItem
        Set: DeleteItem(self: BindingNavigator) = value
        """
        ...

    @property
    def MoveFirstItem(self): # -> ToolStripItem
        """
        Get: MoveFirstItem(self: BindingNavigator) -> ToolStripItem
        Set: MoveFirstItem(self: BindingNavigator) = value
        """
        ...

    @property
    def MoveLastItem(self): # -> ToolStripItem
        """
        Get: MoveLastItem(self: BindingNavigator) -> ToolStripItem
        Set: MoveLastItem(self: BindingNavigator) = value
        """
        ...

    @property
    def MoveNextItem(self): # -> ToolStripItem
        """
        Get: MoveNextItem(self: BindingNavigator) -> ToolStripItem
        Set: MoveNextItem(self: BindingNavigator) = value
        """
        ...

    @property
    def MovePreviousItem(self): # -> ToolStripItem
        """
        Get: MovePreviousItem(self: BindingNavigator) -> ToolStripItem
        Set: MovePreviousItem(self: BindingNavigator) = value
        """
        ...

    @property
    def PositionItem(self): # -> ToolStripItem
        """
        Get: PositionItem(self: BindingNavigator) -> ToolStripItem
        Set: PositionItem(self: BindingNavigator) = value
        """
        ...


    def AddStandardItems(self): # -> 
        """ AddStandardItems(self: BindingNavigator) """
        ...

    def OnRefreshItems(self, *args): #cannot find CLR method
        """ OnRefreshItems(self: BindingNavigator) """
        ...

    def RefreshItemsCore(self, *args): #cannot find CLR method
        """ RefreshItemsCore(self: BindingNavigator) """
        ...

    def Validate(self) -> bool:
        """ Validate(self: BindingNavigator) -> bool """
        ...

    RefreshItems = ...


class BindingsCollection(BaseCollection): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def Add(self, *args): #cannot find CLR method
        """ Add(self: BindingsCollection, binding: Binding) """
        ...

    def AddCore(self, *args): #cannot find CLR method
        """ AddCore(self: BindingsCollection, dataBinding: Binding) """
        ...

    def Clear(self, *args): #cannot find CLR method
        """ Clear(self: BindingsCollection) """
        ...

    def ClearCore(self, *args): #cannot find CLR method
        """ ClearCore(self: BindingsCollection) """
        ...

    def OnCollectionChanged(self, *args): #cannot find CLR method
        """ OnCollectionChanged(self: BindingsCollection, ccevent: CollectionChangeEventArgs) """
        ...

    def OnCollectionChanging(self, *args): #cannot find CLR method
        """ OnCollectionChanging(self: BindingsCollection, e: CollectionChangeEventArgs) """
        ...

    def Remove(self, *args): #cannot find CLR method
        """ Remove(self: BindingsCollection, binding: Binding) """
        ...

    def RemoveAt(self, *args): #cannot find CLR method
        """ RemoveAt(self: BindingsCollection, index: int) """
        ...

    def RemoveCore(self, *args): #cannot find CLR method
        """ RemoveCore(self: BindingsCollection, dataBinding: Binding) """
        ...

    def ShouldSerializeMyAll(self, *args): #cannot find CLR method
        """ ShouldSerializeMyAll(self: BindingsCollection) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    CollectionChanged = ...
    CollectionChanging = ...


class ICurrencyManagerProvider: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def CurrencyManager(self): # -> CurrencyManager
        """ Get: CurrencyManager(self: ICurrencyManagerProvider) -> CurrencyManager """
        ...


    def GetRelatedCurrencyManager(self, dataMember:str): # -> CurrencyManager
        """ GetRelatedCurrencyManager(self: ICurrencyManagerProvider, dataMember: str) -> CurrencyManager """
        ...


class BindingSource(ICancelAddNew, IBindingListView, ITypedList, ICurrencyManagerProvider, Component, ISupportInitializeNotification): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'IEnumerable'>, <type 'IBindingList'>, <type 'IList'>, <type 'ISupportInitialize'>, <type 'ICollection'>, <type 'object'>
    """
    BindingSource()
    BindingSource(dataSource: object, dataMember: str)
    BindingSource(container: IContainer)
    """
    @property
    def AllowEdit(self) -> bool:
        """ Get: AllowEdit(self: BindingSource) -> bool """
        ...

    @property
    def AllowNew(self) -> bool:
        """
        Get: AllowNew(self: BindingSource) -> bool
        Set: AllowNew(self: BindingSource) = value
        """
        ...

    @property
    def AllowRemove(self) -> bool:
        """ Get: AllowRemove(self: BindingSource) -> bool """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: BindingSource) -> int """
        ...

    @property
    def Current(self) -> object:
        """ Get: Current(self: BindingSource) -> object """
        ...

    @property
    def DataMember(self) -> str:
        """
        Get: DataMember(self: BindingSource) -> str
        Set: DataMember(self: BindingSource) = value
        """
        ...

    @property
    def DataSource(self) -> object:
        """
        Get: DataSource(self: BindingSource) -> object
        Set: DataSource(self: BindingSource) = value
        """
        ...

    @property
    def IsBindingSuspended(self) -> bool:
        """ Get: IsBindingSuspended(self: BindingSource) -> bool """
        ...

    @property
    def IsFixedSize(self) -> bool:
        """ Get: IsFixedSize(self: BindingSource) -> bool """
        ...

    @property
    def IsReadOnly(self) -> bool:
        """ Get: IsReadOnly(self: BindingSource) -> bool """
        ...

    @property
    def IsSorted(self) -> bool:
        """ Get: IsSorted(self: BindingSource) -> bool """
        ...

    @property
    def IsSynchronized(self) -> bool:
        """ Get: IsSynchronized(self: BindingSource) -> bool """
        ...

    @property
    def List(self) -> IList:
        """ Get: List(self: BindingSource) -> IList """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: BindingSource) -> int
        Set: Position(self: BindingSource) = value
        """
        ...

    @property
    def RaiseListChangedEvents(self) -> bool:
        """
        Get: RaiseListChangedEvents(self: BindingSource) -> bool
        Set: RaiseListChangedEvents(self: BindingSource) = value
        """
        ...

    @property
    def Sort(self) -> str:
        """
        Get: Sort(self: BindingSource) -> str
        Set: Sort(self: BindingSource) = value
        """
        ...

    @property
    def SortDirection(self) -> ListSortDirection:
        """ Get: SortDirection(self: BindingSource) -> ListSortDirection """
        ...

    @property
    def SortProperty(self) -> PropertyDescriptor:
        """ Get: SortProperty(self: BindingSource) -> PropertyDescriptor """
        ...

    @property
    def SupportsChangeNotification(self) -> bool:
        """ Get: SupportsChangeNotification(self: BindingSource) -> bool """
        ...

    @property
    def SupportsSearching(self) -> bool:
        """ Get: SupportsSearching(self: BindingSource) -> bool """
        ...

    @property
    def SupportsSorting(self) -> bool:
        """ Get: SupportsSorting(self: BindingSource) -> bool """
        ...

    @property
    def SyncRoot(self) -> object:
        """ Get: SyncRoot(self: BindingSource) -> object """
        ...


    def Add(self, value:object) -> int:
        """ Add(self: BindingSource, value: object) -> int """
        ...

    def AddNew(self) -> object:
        """ AddNew(self: BindingSource) -> object """
        ...

    def CancelEdit(self): # -> 
        """ CancelEdit(self: BindingSource) """
        ...

    def Clear(self): # -> 
        """ Clear(self: BindingSource) """
        ...

    def Contains(self, value:object) -> bool:
        """ Contains(self: BindingSource, value: object) -> bool """
        ...

    def CopyTo(self, arr:Array, index:int): # -> 
        """ CopyTo(self: BindingSource, arr: Array, index: int) """
        ...

    def EndEdit(self): # -> 
        """ EndEdit(self: BindingSource) """
        ...

    def Find(self, *__args) -> int:
        """
        Find(self: BindingSource, prop: PropertyDescriptor, key: object) -> int
        Find(self: BindingSource, propertyName: str, key: object) -> int
        """
        ...

    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: BindingSource) -> IEnumerator """
        ...

    def IndexOf(self, value:object) -> int:
        """ IndexOf(self: BindingSource, value: object) -> int """
        ...

    def Insert(self, index:int, value:object): # -> 
        """ Insert(self: BindingSource, index: int, value: object) """
        ...

    def MoveFirst(self): # -> 
        """ MoveFirst(self: BindingSource) """
        ...

    def MoveLast(self): # -> 
        """ MoveLast(self: BindingSource) """
        ...

    def MoveNext(self): # -> 
        """ MoveNext(self: BindingSource) """
        ...

    def MovePrevious(self): # -> 
        """ MovePrevious(self: BindingSource) """
        ...

    def OnAddingNew(self, *args): #cannot find CLR method
        """ OnAddingNew(self: BindingSource, e: AddingNewEventArgs) """
        ...

    def OnBindingComplete(self, *args): #cannot find CLR method
        """ OnBindingComplete(self: BindingSource, e: BindingCompleteEventArgs) """
        ...

    def OnCurrentChanged(self, *args): #cannot find CLR method
        """ OnCurrentChanged(self: BindingSource, e: EventArgs) """
        ...

    def OnCurrentItemChanged(self, *args): #cannot find CLR method
        """ OnCurrentItemChanged(self: BindingSource, e: EventArgs) """
        ...

    def OnDataError(self, *args): #cannot find CLR method
        """ OnDataError(self: BindingSource, e: BindingManagerDataErrorEventArgs) """
        ...

    def OnDataMemberChanged(self, *args): #cannot find CLR method
        """ OnDataMemberChanged(self: BindingSource, e: EventArgs) """
        ...

    def OnDataSourceChanged(self, *args): #cannot find CLR method
        """ OnDataSourceChanged(self: BindingSource, e: EventArgs) """
        ...

    def OnListChanged(self, *args): #cannot find CLR method
        """ OnListChanged(self: BindingSource, e: ListChangedEventArgs) """
        ...

    def OnPositionChanged(self, *args): #cannot find CLR method
        """ OnPositionChanged(self: BindingSource, e: EventArgs) """
        ...

    def Remove(self, value:object): # -> 
        """ Remove(self: BindingSource, value: object) """
        ...

    def RemoveAt(self, index:int): # -> 
        """ RemoveAt(self: BindingSource, index: int) """
        ...

    def RemoveCurrent(self): # -> 
        """ RemoveCurrent(self: BindingSource) """
        ...

    def RemoveSort(self): # -> 
        """ RemoveSort(self: BindingSource) """
        ...

    def ResetAllowNew(self): # -> 
        """ ResetAllowNew(self: BindingSource) """
        ...

    def ResetBindings(self, metadataChanged:bool): # -> 
        """ ResetBindings(self: BindingSource, metadataChanged: bool) """
        ...

    def ResetCurrentItem(self): # -> 
        """ ResetCurrentItem(self: BindingSource) """
        ...

    def ResetItem(self, itemIndex:int): # -> 
        """ ResetItem(self: BindingSource, itemIndex: int) """
        ...

    def ResumeBinding(self): # -> 
        """ ResumeBinding(self: BindingSource) """
        ...

    def SuspendBinding(self): # -> 
        """ SuspendBinding(self: BindingSource) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __new__(cls, *__args:IContainer) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, dataSource: object, dataMember: str)
        __new__(cls: type, container: IContainer)
        """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...

    AddingNew = ...
    BindingComplete = ...
    CurrentChanged = ...
    CurrentItemChanged = ...
    DataError = ...
    DataMemberChanged = ...
    DataSourceChanged = ...
    ListChanged = ...
    PositionChanged = ...


class BootMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum BootMode, values: FailSafe (1), FailSafeWithNetwork (2), Normal (0) """
    FailSafe: BootMode = ...
    FailSafeWithNetwork: BootMode = ...
    Normal: BootMode = ...
    value__ = ...


class Border3DSide(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) Border3DSide, values: All (2063), Bottom (8), Left (1), Middle (2048), Right (4), Top (2) """
    All: Border3DSide = ...
    Bottom: Border3DSide = ...
    Left: Border3DSide = ...
    Middle: Border3DSide = ...
    Right: Border3DSide = ...
    Top: Border3DSide = ...
    value__ = ...


class Border3DStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum Border3DStyle, values: Adjust (8192), Bump (9), Etched (6), Flat (16394), Raised (5), RaisedInner (4), RaisedOuter (1), Sunken (10), SunkenInner (8), SunkenOuter (2) """
    Adjust: Border3DStyle = ...
    Bump: Border3DStyle = ...
    Etched: Border3DStyle = ...
    Flat: Border3DStyle = ...
    Raised: Border3DStyle = ...
    RaisedInner: Border3DStyle = ...
    RaisedOuter: Border3DStyle = ...
    Sunken: Border3DStyle = ...
    SunkenInner: Border3DStyle = ...
    SunkenOuter: Border3DStyle = ...
    value__ = ...


class BorderStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum BorderStyle, values: Fixed3D (2), FixedSingle (1), None (0) """
    Fixed3D: BorderStyle = ...
    FixedSingle: BorderStyle = ...
    value__ = ...


class BoundsSpecified(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) BoundsSpecified, values: All (15), Height (8), Location (3), None (0), Size (12), Width (4), X (1), Y (2) """
    All: BoundsSpecified = ...
    Height: BoundsSpecified = ...
    Location: BoundsSpecified = ...
    Size: BoundsSpecified = ...
    value__ = ...
    Width: BoundsSpecified = ...
    X: BoundsSpecified = ...
    Y: BoundsSpecified = ...


class ButtonBase(Control): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ no doc """
    @property
    def AutoEllipsis(self) -> bool:
        """
        Get: AutoEllipsis(self: ButtonBase) -> bool
        Set: AutoEllipsis(self: ButtonBase) = value
        """
        ...

    @property
    def FlatAppearance(self): # -> FlatButtonAppearance
        """ Get: FlatAppearance(self: ButtonBase) -> FlatButtonAppearance """
        ...

    @property
    def FlatStyle(self): # -> FlatStyle
        """
        Get: FlatStyle(self: ButtonBase) -> FlatStyle
        Set: FlatStyle(self: ButtonBase) = value
        """
        ...

    @property
    def Image(self) -> Image:
        """
        Get: Image(self: ButtonBase) -> Image
        Set: Image(self: ButtonBase) = value
        """
        ...

    @property
    def ImageAlign(self) -> ContentAlignment:
        """
        Get: ImageAlign(self: ButtonBase) -> ContentAlignment
        Set: ImageAlign(self: ButtonBase) = value
        """
        ...

    @property
    def ImageIndex(self) -> int:
        """
        Get: ImageIndex(self: ButtonBase) -> int
        Set: ImageIndex(self: ButtonBase) = value
        """
        ...

    @property
    def ImageKey(self) -> str:
        """
        Get: ImageKey(self: ButtonBase) -> str
        Set: ImageKey(self: ButtonBase) = value
        """
        ...

    @property
    def ImageList(self): # -> ImageList
        """
        Get: ImageList(self: ButtonBase) -> ImageList
        Set: ImageList(self: ButtonBase) = value
        """
        ...

    @property
    def IsDefault(self):
        ...

    @property
    def TextAlign(self) -> ContentAlignment:
        """
        Get: TextAlign(self: ButtonBase) -> ContentAlignment
        Set: TextAlign(self: ButtonBase) = value
        """
        ...

    @property
    def TextImageRelation(self): # -> TextImageRelation
        """
        Get: TextImageRelation(self: ButtonBase) -> TextImageRelation
        Set: TextImageRelation(self: ButtonBase) = value
        """
        ...

    @property
    def UseCompatibleTextRendering(self) -> bool:
        """
        Get: UseCompatibleTextRendering(self: ButtonBase) -> bool
        Set: UseCompatibleTextRendering(self: ButtonBase) = value
        """
        ...

    @property
    def UseMnemonic(self) -> bool:
        """
        Get: UseMnemonic(self: ButtonBase) -> bool
        Set: UseMnemonic(self: ButtonBase) = value
        """
        ...

    @property
    def UseVisualStyleBackColor(self) -> bool:
        """
        Get: UseVisualStyleBackColor(self: ButtonBase) -> bool
        Set: UseVisualStyleBackColor(self: ButtonBase) = value
        """
        ...


    def ButtonBaseAccessibleObject(self, *args): #cannot find CLR method
        """ ButtonBaseAccessibleObject(owner: Control) """
        ...

    def ResetFlagsandPaint(self, *args): #cannot find CLR method
        """ ResetFlagsandPaint(self: ButtonBase) """
        ...

    AutoSizeChanged = ...
    ImeModeChanged = ...


class IButtonControl: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def DialogResult(self): # -> DialogResult
        """
        Get: DialogResult(self: IButtonControl) -> DialogResult
        Set: DialogResult(self: IButtonControl) = value
        """
        ...


    def NotifyDefault(self, value:bool): # -> 
        """ NotifyDefault(self: IButtonControl, value: bool) """
        ...

    def PerformClick(self): # -> 
        """ PerformClick(self: IButtonControl) """
        ...


class Button(IButtonControl, ButtonBase): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'object'>
    """ Button() """
    @property
    def AutoSizeMode(self) -> AutoSizeMode:
        """
        Get: AutoSizeMode(self: Button) -> AutoSizeMode
        Set: AutoSizeMode(self: Button) = value
        """
        ...


    def ToString(self) -> str:
        """ ToString(self: Button) -> str """
        ...

    DoubleClick = ...
    MouseDoubleClick = ...


class ButtonBorderStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ButtonBorderStyle, values: Dashed (2), Dotted (1), Inset (4), None (0), Outset (5), Solid (3) """
    Dashed: ButtonBorderStyle = ...
    Dotted: ButtonBorderStyle = ...
    Inset: ButtonBorderStyle = ...
    Outset: ButtonBorderStyle = ...
    Solid: ButtonBorderStyle = ...
    value__ = ...


class ButtonRenderer: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def RenderMatchingApplicationState(self) -> bool:
        """
        Get: RenderMatchingApplicationState() -> bool
        Set: RenderMatchingApplicationState() = value
        """
        ...


    @staticmethod
    def DrawButton(g:Graphics, bounds:Rectangle, *__args:PushButtonState): # -> 
        """ DrawButton(g: Graphics, bounds: Rectangle, state: PushButtonState)DrawButton(g: Graphics, bounds: Rectangle, focused: bool, state: PushButtonState)DrawButton(g: Graphics, bounds: Rectangle, buttonText: str, font: Font, focused: bool, state: PushButtonState)DrawButton(g: Graphics, bounds: Rectangle, buttonText: str, font: Font, image: Image, imageBounds: Rectangle, focused: bool, state: PushButtonState)DrawButton(g: Graphics, bounds: Rectangle, buttonText: str, font: Font, flags: TextFormatFlags, focused: bool, state: PushButtonState)DrawButton(g: Graphics, bounds: Rectangle, image: Image, imageBounds: Rectangle, focused: bool, state: PushButtonState)DrawButton(g: Graphics, bounds: Rectangle, buttonText: str, font: Font, flags: TextFormatFlags, image: Image, imageBounds: Rectangle, focused: bool, state: PushButtonState) """
        ...

    @staticmethod
    def DrawParentBackground(g:Graphics, bounds:Rectangle, childControl:Control): # -> 
        """ DrawParentBackground(g: Graphics, bounds: Rectangle, childControl: Control) """
        ...

    @staticmethod
    def IsBackgroundPartiallyTransparent(state:PushButtonState) -> bool:
        """ IsBackgroundPartiallyTransparent(state: PushButtonState) -> bool """
        ...



class ButtonState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) ButtonState, values: All (18176), Checked (1024), Flat (16384), Inactive (256), Normal (0), Pushed (512) """
    All: ButtonState = ...
    Checked: ButtonState = ...
    Flat: ButtonState = ...
    Inactive: ButtonState = ...
    Normal: ButtonState = ...
    Pushed: ButtonState = ...
    value__ = ...


class CacheVirtualItemsEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ CacheVirtualItemsEventArgs(startIndex: int, endIndex: int) """
    @property
    def EndIndex(self) -> int:
        """ Get: EndIndex(self: CacheVirtualItemsEventArgs) -> int """
        ...

    @property
    def StartIndex(self) -> int:
        """ Get: StartIndex(self: CacheVirtualItemsEventArgs) -> int """
        ...


    def __new__(cls, startIndex:int, endIndex:int) -> Self:
        """ __new__(cls: type, startIndex: int, endIndex: int) """
        ...


class CacheVirtualItemsEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ CacheVirtualItemsEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:CacheVirtualItemsEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: CacheVirtualItemsEventHandler, sender: object, e: CacheVirtualItemsEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: CacheVirtualItemsEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:CacheVirtualItemsEventArgs): # -> 
        """ Invoke(self: CacheVirtualItemsEventHandler, sender: object, e: CacheVirtualItemsEventArgs) """
        ...


class CaptionButton(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum CaptionButton, values: Close (0), Help (4), Maximize (2), Minimize (1), Restore (3) """
    Close: CaptionButton = ...
    Help: CaptionButton = ...
    Maximize: CaptionButton = ...
    Minimize: CaptionButton = ...
    Restore: CaptionButton = ...
    value__ = ...


class CharacterCasing(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum CharacterCasing, values: Lower (2), Normal (0), Upper (1) """
    Lower: CharacterCasing = ...
    Normal: CharacterCasing = ...
    Upper: CharacterCasing = ...
    value__ = ...


class CheckBox(ButtonBase): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'object'>
    """ CheckBox() """
    @property
    def Appearance(self) -> Appearance:
        """
        Get: Appearance(self: CheckBox) -> Appearance
        Set: Appearance(self: CheckBox) = value
        """
        ...

    @property
    def AutoCheck(self) -> bool:
        """
        Get: AutoCheck(self: CheckBox) -> bool
        Set: AutoCheck(self: CheckBox) = value
        """
        ...

    @property
    def CheckAlign(self) -> ContentAlignment:
        """
        Get: CheckAlign(self: CheckBox) -> ContentAlignment
        Set: CheckAlign(self: CheckBox) = value
        """
        ...

    @property
    def Checked(self) -> bool:
        """
        Get: Checked(self: CheckBox) -> bool
        Set: Checked(self: CheckBox) = value
        """
        ...

    @property
    def CheckState(self): # -> CheckState
        """
        Get: CheckState(self: CheckBox) -> CheckState
        Set: CheckState(self: CheckBox) = value
        """
        ...

    @property
    def ThreeState(self) -> bool:
        """
        Get: ThreeState(self: CheckBox) -> bool
        Set: ThreeState(self: CheckBox) = value
        """
        ...


    def CheckBoxAccessibleObject(self, *args): #cannot find CLR method
        """ CheckBoxAccessibleObject(owner: Control) """
        ...

    def OnAppearanceChanged(self, *args): #cannot find CLR method
        """ OnAppearanceChanged(self: CheckBox, e: EventArgs) """
        ...

    def OnCheckedChanged(self, *args): #cannot find CLR method
        """ OnCheckedChanged(self: CheckBox, e: EventArgs) """
        ...

    def OnCheckStateChanged(self, *args): #cannot find CLR method
        """ OnCheckStateChanged(self: CheckBox, e: EventArgs) """
        ...

    def ToString(self) -> str:
        """ ToString(self: CheckBox) -> str """
        ...

    AppearanceChanged = ...
    CheckedChanged = ...
    CheckStateChanged = ...
    DoubleClick = ...
    MouseDoubleClick = ...


class CheckBoxRenderer: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def RenderMatchingApplicationState(self) -> bool:
        """
        Get: RenderMatchingApplicationState() -> bool
        Set: RenderMatchingApplicationState() = value
        """
        ...


    @staticmethod
    def DrawCheckBox(g:Graphics, glyphLocation:Point, *__args:CheckBoxState): # -> 
        """ DrawCheckBox(g: Graphics, glyphLocation: Point, state: CheckBoxState)DrawCheckBox(g: Graphics, glyphLocation: Point, textBounds: Rectangle, checkBoxText: str, font: Font, focused: bool, state: CheckBoxState)DrawCheckBox(g: Graphics, glyphLocation: Point, textBounds: Rectangle, checkBoxText: str, font: Font, flags: TextFormatFlags, focused: bool, state: CheckBoxState)DrawCheckBox(g: Graphics, glyphLocation: Point, textBounds: Rectangle, checkBoxText: str, font: Font, image: Image, imageBounds: Rectangle, focused: bool, state: CheckBoxState)DrawCheckBox(g: Graphics, glyphLocation: Point, textBounds: Rectangle, checkBoxText: str, font: Font, flags: TextFormatFlags, image: Image, imageBounds: Rectangle, focused: bool, state: CheckBoxState) """
        ...

    @staticmethod
    def DrawParentBackground(g:Graphics, bounds:Rectangle, childControl:Control): # -> 
        """ DrawParentBackground(g: Graphics, bounds: Rectangle, childControl: Control) """
        ...

    @staticmethod
    def GetGlyphSize(g:Graphics, state:CheckBoxState) -> Size:
        """ GetGlyphSize(g: Graphics, state: CheckBoxState) -> Size """
        ...

    @staticmethod
    def IsBackgroundPartiallyTransparent(state:CheckBoxState) -> bool:
        """ IsBackgroundPartiallyTransparent(state: CheckBoxState) -> bool """
        ...



class ListControl(Control): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ no doc """
    @property
    def AllowSelection(self):
        ...

    @property
    def DataManager(self):
        ...

    @property
    def DataSource(self) -> object:
        """
        Get: DataSource(self: ListControl) -> object
        Set: DataSource(self: ListControl) = value
        """
        ...

    @property
    def DisplayMember(self) -> str:
        """
        Get: DisplayMember(self: ListControl) -> str
        Set: DisplayMember(self: ListControl) = value
        """
        ...

    @property
    def FormatInfo(self) -> IFormatProvider:
        """
        Get: FormatInfo(self: ListControl) -> IFormatProvider
        Set: FormatInfo(self: ListControl) = value
        """
        ...

    @property
    def FormatString(self) -> str:
        """
        Get: FormatString(self: ListControl) -> str
        Set: FormatString(self: ListControl) = value
        """
        ...

    @property
    def FormattingEnabled(self) -> bool:
        """
        Get: FormattingEnabled(self: ListControl) -> bool
        Set: FormattingEnabled(self: ListControl) = value
        """
        ...

    @property
    def SelectedIndex(self) -> int:
        """
        Get: SelectedIndex(self: ListControl) -> int
        Set: SelectedIndex(self: ListControl) = value
        """
        ...

    @property
    def SelectedValue(self) -> object:
        """
        Get: SelectedValue(self: ListControl) -> object
        Set: SelectedValue(self: ListControl) = value
        """
        ...

    @property
    def ValueMember(self) -> str:
        """
        Get: ValueMember(self: ListControl) -> str
        Set: ValueMember(self: ListControl) = value
        """
        ...


    def FilterItemOnProperty(self, *args): #cannot find CLR method
        """
        FilterItemOnProperty(self: ListControl, item: object) -> object
        FilterItemOnProperty(self: ListControl, item: object, field: str) -> object
        """
        ...

    def GetItemText(self, item:object) -> str:
        """ GetItemText(self: ListControl, item: object) -> str """
        ...

    def OnDataSourceChanged(self, *args): #cannot find CLR method
        """ OnDataSourceChanged(self: ListControl, e: EventArgs) """
        ...

    def OnDisplayMemberChanged(self, *args): #cannot find CLR method
        """ OnDisplayMemberChanged(self: ListControl, e: EventArgs) """
        ...

    def OnFormat(self, *args): #cannot find CLR method
        """ OnFormat(self: ListControl, e: ListControlConvertEventArgs) """
        ...

    def OnFormatInfoChanged(self, *args): #cannot find CLR method
        """ OnFormatInfoChanged(self: ListControl, e: EventArgs) """
        ...

    def OnFormatStringChanged(self, *args): #cannot find CLR method
        """ OnFormatStringChanged(self: ListControl, e: EventArgs) """
        ...

    def OnFormattingEnabledChanged(self, *args): #cannot find CLR method
        """ OnFormattingEnabledChanged(self: ListControl, e: EventArgs) """
        ...

    def OnSelectedIndexChanged(self, *args): #cannot find CLR method
        """ OnSelectedIndexChanged(self: ListControl, e: EventArgs) """
        ...

    def OnSelectedValueChanged(self, *args): #cannot find CLR method
        """ OnSelectedValueChanged(self: ListControl, e: EventArgs) """
        ...

    def OnValueMemberChanged(self, *args): #cannot find CLR method
        """ OnValueMemberChanged(self: ListControl, e: EventArgs) """
        ...

    def RefreshItem(self, *args): #cannot find CLR method
        """ RefreshItem(self: ListControl, index: int) """
        ...

    def RefreshItems(self, *args): #cannot find CLR method
        """ RefreshItems(self: ListControl) """
        ...

    def SetItemCore(self, *args): #cannot find CLR method
        """ SetItemCore(self: ListControl, index: int, value: object) """
        ...

    def SetItemsCore(self, *args): #cannot find CLR method
        """ SetItemsCore(self: ListControl, items: IList) """
        ...

    DataSourceChanged = ...
    DisplayMemberChanged = ...
    Format = ...
    FormatInfoChanged = ...
    FormatStringChanged = ...
    FormattingEnabledChanged = ...
    SelectedValueChanged = ...
    ValueMemberChanged = ...


class ListBox(ListControl): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'object'>
    """ ListBox() """
    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: ListBox) -> Color
        Set: BackColor(self: ListBox) = value
        """
        ...

    @property
    def BackgroundImage(self) -> Image:
        """
        Get: BackgroundImage(self: ListBox) -> Image
        Set: BackgroundImage(self: ListBox) = value
        """
        ...

    @property
    def BackgroundImageLayout(self): # -> ImageLayout
        """
        Get: BackgroundImageLayout(self: ListBox) -> ImageLayout
        Set: BackgroundImageLayout(self: ListBox) = value
        """
        ...

    @property
    def BorderStyle(self) -> BorderStyle:
        """
        Get: BorderStyle(self: ListBox) -> BorderStyle
        Set: BorderStyle(self: ListBox) = value
        """
        ...

    @property
    def ColumnWidth(self) -> int:
        """
        Get: ColumnWidth(self: ListBox) -> int
        Set: ColumnWidth(self: ListBox) = value
        """
        ...

    @property
    def CustomTabOffsets(self): # -> IntegerCollection
        """ Get: CustomTabOffsets(self: ListBox) -> IntegerCollection """
        ...

    @property
    def DrawMode(self): # -> DrawMode
        """
        Get: DrawMode(self: ListBox) -> DrawMode
        Set: DrawMode(self: ListBox) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: ListBox) -> Font
        Set: Font(self: ListBox) = value
        """
        ...

    @property
    def ForeColor(self) -> Color:
        """
        Get: ForeColor(self: ListBox) -> Color
        Set: ForeColor(self: ListBox) = value
        """
        ...

    @property
    def HorizontalExtent(self) -> int:
        """
        Get: HorizontalExtent(self: ListBox) -> int
        Set: HorizontalExtent(self: ListBox) = value
        """
        ...

    @property
    def HorizontalScrollbar(self) -> bool:
        """
        Get: HorizontalScrollbar(self: ListBox) -> bool
        Set: HorizontalScrollbar(self: ListBox) = value
        """
        ...

    @property
    def IntegralHeight(self) -> bool:
        """
        Get: IntegralHeight(self: ListBox) -> bool
        Set: IntegralHeight(self: ListBox) = value
        """
        ...

    @property
    def ItemHeight(self) -> int:
        """
        Get: ItemHeight(self: ListBox) -> int
        Set: ItemHeight(self: ListBox) = value
        """
        ...

    @property
    def Items(self): # -> ObjectCollection
        """ Get: Items(self: ListBox) -> ObjectCollection """
        ...

    @property
    def MultiColumn(self) -> bool:
        """
        Get: MultiColumn(self: ListBox) -> bool
        Set: MultiColumn(self: ListBox) = value
        """
        ...

    @property
    def Padding(self): # -> Padding
        """
        Get: Padding(self: ListBox) -> Padding
        Set: Padding(self: ListBox) = value
        """
        ...

    @property
    def PreferredHeight(self) -> int:
        """ Get: PreferredHeight(self: ListBox) -> int """
        ...

    @property
    def RightToLeft(self): # -> RightToLeft
        """
        Get: RightToLeft(self: ListBox) -> RightToLeft
        Set: RightToLeft(self: ListBox) = value
        """
        ...

    @property
    def ScrollAlwaysVisible(self) -> bool:
        """
        Get: ScrollAlwaysVisible(self: ListBox) -> bool
        Set: ScrollAlwaysVisible(self: ListBox) = value
        """
        ...

    @property
    def SelectedIndices(self): # -> SelectedIndexCollection
        """ Get: SelectedIndices(self: ListBox) -> SelectedIndexCollection """
        ...

    @property
    def SelectedItem(self) -> object:
        """
        Get: SelectedItem(self: ListBox) -> object
        Set: SelectedItem(self: ListBox) = value
        """
        ...

    @property
    def SelectedItems(self): # -> SelectedObjectCollection
        """ Get: SelectedItems(self: ListBox) -> SelectedObjectCollection """
        ...

    @property
    def SelectionMode(self): # -> SelectionMode
        """
        Get: SelectionMode(self: ListBox) -> SelectionMode
        Set: SelectionMode(self: ListBox) = value
        """
        ...

    @property
    def Sorted(self) -> bool:
        """
        Get: Sorted(self: ListBox) -> bool
        Set: Sorted(self: ListBox) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: ListBox) -> str
        Set: Text(self: ListBox) = value
        """
        ...

    @property
    def TopIndex(self) -> int:
        """
        Get: TopIndex(self: ListBox) -> int
        Set: TopIndex(self: ListBox) = value
        """
        ...

    @property
    def UseCustomTabOffsets(self) -> bool:
        """
        Get: UseCustomTabOffsets(self: ListBox) -> bool
        Set: UseCustomTabOffsets(self: ListBox) = value
        """
        ...

    @property
    def UseTabStops(self) -> bool:
        """
        Get: UseTabStops(self: ListBox) -> bool
        Set: UseTabStops(self: ListBox) = value
        """
        ...


    def AddItemsCore(self, *args): #cannot find CLR method
        """ AddItemsCore(self: ListBox, value: Array[object]) """
        ...

    def BeginUpdate(self): # -> 
        """ BeginUpdate(self: ListBox) """
        ...

    def ClearSelected(self): # -> 
        """ ClearSelected(self: ListBox) """
        ...

    def CreateItemCollection(self, *args): #cannot find CLR method
        """ CreateItemCollection(self: ListBox) -> ObjectCollection """
        ...

    def EndUpdate(self): # -> 
        """ EndUpdate(self: ListBox) """
        ...

    def FindString(self, s:str, startIndex:int = ...) -> int:
        """
        FindString(self: ListBox, s: str) -> int
        FindString(self: ListBox, s: str, startIndex: int) -> int
        """
        ...

    def FindStringExact(self, s:str, startIndex:int = ...) -> int:
        """
        FindStringExact(self: ListBox, s: str) -> int
        FindStringExact(self: ListBox, s: str, startIndex: int) -> int
        """
        ...

    def GetItemHeight(self, index:int) -> int:
        """ GetItemHeight(self: ListBox, index: int) -> int """
        ...

    def GetItemRectangle(self, index:int) -> Rectangle:
        """ GetItemRectangle(self: ListBox, index: int) -> Rectangle """
        ...

    def GetSelected(self, index:int) -> bool:
        """ GetSelected(self: ListBox, index: int) -> bool """
        ...

    def IndexFromPoint(self, *__args:Point) -> int:
        """
        IndexFromPoint(self: ListBox, p: Point) -> int
        IndexFromPoint(self: ListBox, x: int, y: int) -> int
        """
        ...

    def IntegerCollection(self, *args): #cannot find CLR method
        """ IntegerCollection(owner: ListBox) """
        ...

    def ObjectCollection(self, *args): #cannot find CLR method
        """
        ObjectCollection(owner: ListBox)
        ObjectCollection(owner: ListBox, value: ObjectCollection)
        ObjectCollection(owner: ListBox, value: Array[object])
        """
        ...

    def OnDrawItem(self, *args): #cannot find CLR method
        """ OnDrawItem(self: ListBox, e: DrawItemEventArgs) """
        ...

    def OnMeasureItem(self, *args): #cannot find CLR method
        """ OnMeasureItem(self: ListBox, e: MeasureItemEventArgs) """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: ListBox) """
        ...

    def ResetBackColor(self): # -> 
        """ ResetBackColor(self: ListBox) """
        ...

    def ResetForeColor(self): # -> 
        """ ResetForeColor(self: ListBox) """
        ...

    def SelectedIndexCollection(self, *args): #cannot find CLR method
        """ SelectedIndexCollection(owner: ListBox) """
        ...

    def SelectedObjectCollection(self, *args): #cannot find CLR method
        """ SelectedObjectCollection(owner: ListBox) """
        ...

    def SetSelected(self, index:int, value:bool): # -> 
        """ SetSelected(self: ListBox, index: int, value: bool) """
        ...

    def Sort(self, *args): #cannot find CLR method
        """ Sort(self: ListBox) """
        ...

    def ToString(self) -> str:
        """ ToString(self: ListBox) -> str """
        ...

    def WmReflectCommand(self, *args): #cannot find CLR method
        """ WmReflectCommand(self: ListBox, m: Message) -> Message """
        ...

    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    Click = ...
    DefaultItemHeight: int = ...
    DrawItem = ...
    MeasureItem = ...
    MouseClick = ...
    NoMatches: int = ...
    PaddingChanged = ...
    Paint = ...
    SelectedIndexChanged = ...
    TextChanged = ...


class CheckedListBox(ListBox): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ CheckedListBox() """
    @property
    def CheckedIndices(self): # -> CheckedIndexCollection
        """ Get: CheckedIndices(self: CheckedListBox) -> CheckedIndexCollection """
        ...

    @property
    def CheckedItems(self): # -> CheckedItemCollection
        """ Get: CheckedItems(self: CheckedListBox) -> CheckedItemCollection """
        ...

    @property
    def CheckOnClick(self) -> bool:
        """
        Get: CheckOnClick(self: CheckedListBox) -> bool
        Set: CheckOnClick(self: CheckedListBox) = value
        """
        ...

    @property
    def DataSource(self) -> object:
        """
        Get: DataSource(self: CheckedListBox) -> object
        Set: DataSource(self: CheckedListBox) = value
        """
        ...

    @property
    def DisplayMember(self) -> str:
        """
        Get: DisplayMember(self: CheckedListBox) -> str
        Set: DisplayMember(self: CheckedListBox) = value
        """
        ...

    @property
    def ThreeDCheckBoxes(self) -> bool:
        """
        Get: ThreeDCheckBoxes(self: CheckedListBox) -> bool
        Set: ThreeDCheckBoxes(self: CheckedListBox) = value
        """
        ...

    @property
    def UseCompatibleTextRendering(self) -> bool:
        """
        Get: UseCompatibleTextRendering(self: CheckedListBox) -> bool
        Set: UseCompatibleTextRendering(self: CheckedListBox) = value
        """
        ...

    @property
    def ValueMember(self) -> str:
        """
        Get: ValueMember(self: CheckedListBox) -> str
        Set: ValueMember(self: CheckedListBox) = value
        """
        ...


    def CheckedIndexCollection(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def CheckedItemCollection(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def GetItemChecked(self, index:int) -> bool:
        """ GetItemChecked(self: CheckedListBox, index: int) -> bool """
        ...

    def GetItemCheckState(self, index:int): # -> CheckState
        """ GetItemCheckState(self: CheckedListBox, index: int) -> CheckState """
        ...

    def OnItemCheck(self, *args): #cannot find CLR method
        """ OnItemCheck(self: CheckedListBox, ice: ItemCheckEventArgs) """
        ...

    def SetItemChecked(self, index:int, value:bool): # -> 
        """ SetItemChecked(self: CheckedListBox, index: int, value: bool) """
        ...

    def SetItemCheckState(self, index:int, value): # ->  # Not found arg types: {'value': 'CheckState'}
        """ SetItemCheckState(self: CheckedListBox, index: int, value: CheckState) """
        ...

    Click = ...
    DataSourceChanged = ...
    DisplayMemberChanged = ...
    DrawItem = ...
    ItemCheck = ...
    MeasureItem = ...
    MouseClick = ...
    ObjectCollection = ...
    ValueMemberChanged = ...


class CheckState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum CheckState, values: Checked (1), Indeterminate (2), Unchecked (0) """
    Checked: CheckState = ...
    Indeterminate: CheckState = ...
    Unchecked: CheckState = ...
    value__ = ...


class Clipboard: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @staticmethod
    def Clear(): # -> 
        """ Clear() """
        ...

    @staticmethod
    def ContainsAudio() -> bool:
        """ ContainsAudio() -> bool """
        ...

    @staticmethod
    def ContainsData(format:str) -> bool:
        """ ContainsData(format: str) -> bool """
        ...

    @staticmethod
    def ContainsFileDropList() -> bool:
        """ ContainsFileDropList() -> bool """
        ...

    @staticmethod
    def ContainsImage() -> bool:
        """ ContainsImage() -> bool """
        ...

    @staticmethod
    def ContainsText(format=None) -> bool:
        """
        ContainsText() -> bool
        ContainsText(format: TextDataFormat) -> bool
        """
        ...

    @staticmethod
    def GetAudioStream() -> Stream:
        """ GetAudioStream() -> Stream """
        ...

    @staticmethod
    def GetData(format:str) -> object:
        """ GetData(format: str) -> object """
        ...

    @staticmethod
    def GetDataObject() -> IDataObject:
        """ GetDataObject() -> IDataObject """
        ...

    @staticmethod
    def GetFileDropList() -> StringCollection:
        """ GetFileDropList() -> StringCollection """
        ...

    @staticmethod
    def GetImage() -> Image:
        """ GetImage() -> Image """
        ...

    @staticmethod
    def GetText(format=None) -> str:
        """
        GetText() -> str
        GetText(format: TextDataFormat) -> str
        """
        ...

    @staticmethod
    def SetAudio(*__args:Array): # -> 
        """ SetAudio(audioBytes: Array[Byte])SetAudio(audioStream: Stream) """
        ...

    @staticmethod
    def SetData(format:str, data:object): # -> 
        """ SetData(format: str, data: object) """
        ...

    @staticmethod
    def SetDataObject(data:object, copy:bool = ..., retryTimes:int = ..., retryDelay:int = ...): # -> 
        """ SetDataObject(data: object)SetDataObject(data: object, copy: bool)SetDataObject(data: object, copy: bool, retryTimes: int, retryDelay: int) """
        ...

    @staticmethod
    def SetFileDropList(filePaths:StringCollection): # -> 
        """ SetFileDropList(filePaths: StringCollection) """
        ...

    @staticmethod
    def SetImage(image:Image): # -> 
        """ SetImage(image: Image) """
        ...

    @staticmethod
    def SetText(text:str, format = ...): # ->  # Not found arg types: {'format': 'TextDataFormat'}
        """ SetText(text: str)SetText(text: str, format: TextDataFormat) """
        ...


class CloseReason(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum CloseReason, values: ApplicationExitCall (6), FormOwnerClosing (5), MdiFormClosing (2), None (0), TaskManagerClosing (4), UserClosing (3), WindowsShutDown (1) """
    ApplicationExitCall: CloseReason = ...
    FormOwnerClosing: CloseReason = ...
    MdiFormClosing: CloseReason = ...
    TaskManagerClosing: CloseReason = ...
    UserClosing: CloseReason = ...
    value__ = ...
    WindowsShutDown: CloseReason = ...


class ColorDepth(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ColorDepth, values: Depth16Bit (16), Depth24Bit (24), Depth32Bit (32), Depth4Bit (4), Depth8Bit (8) """
    Depth16Bit: ColorDepth = ...
    Depth24Bit: ColorDepth = ...
    Depth32Bit: ColorDepth = ...
    Depth4Bit: ColorDepth = ...
    Depth8Bit: ColorDepth = ...
    value__ = ...


class CommonDialog(Component): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """ CommonDialog() """
    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: CommonDialog) -> object
        Set: Tag(self: CommonDialog) = value
        """
        ...


    def HookProc(self, *args): #cannot find CLR method
        """ HookProc(self: CommonDialog, hWnd: IntPtr, msg: int, wparam: IntPtr, lparam: IntPtr) -> IntPtr """
        ...

    def OnHelpRequest(self, *args): #cannot find CLR method
        """ OnHelpRequest(self: CommonDialog, e: EventArgs) """
        ...

    def OwnerWndProc(self, *args): #cannot find CLR method
        """ OwnerWndProc(self: CommonDialog, hWnd: IntPtr, msg: int, wparam: IntPtr, lparam: IntPtr) -> IntPtr """
        ...

    def Reset(self): # -> 
        """ Reset(self: CommonDialog) """
        ...

    def RunDialog(self, *args): #cannot find CLR method
        """ RunDialog(self: CommonDialog, hwndOwner: IntPtr) -> bool """
        ...

    def ShowDialog(self, owner:IWin32Window = ...): # -> DialogResult
        """
        ShowDialog(self: CommonDialog) -> DialogResult
        ShowDialog(self: CommonDialog, owner: IWin32Window) -> DialogResult
        """
        ...

    HelpRequest = ...


class ColorDialog(CommonDialog): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """ ColorDialog() """
    @property
    def AllowFullOpen(self) -> bool:
        """
        Get: AllowFullOpen(self: ColorDialog) -> bool
        Set: AllowFullOpen(self: ColorDialog) = value
        """
        ...

    @property
    def AnyColor(self) -> bool:
        """
        Get: AnyColor(self: ColorDialog) -> bool
        Set: AnyColor(self: ColorDialog) = value
        """
        ...

    @property
    def Color(self) -> Color:
        """
        Get: Color(self: ColorDialog) -> Color
        Set: Color(self: ColorDialog) = value
        """
        ...

    @property
    def CustomColors(self) -> Array:
        """
        Get: CustomColors(self: ColorDialog) -> Array[int]
        Set: CustomColors(self: ColorDialog) = value
        """
        ...

    @property
    def FullOpen(self) -> bool:
        """
        Get: FullOpen(self: ColorDialog) -> bool
        Set: FullOpen(self: ColorDialog) = value
        """
        ...

    @property
    def Instance(self):
        ...

    @property
    def Options(self):
        ...

    @property
    def ShowHelp(self) -> bool:
        """
        Get: ShowHelp(self: ColorDialog) -> bool
        Set: ShowHelp(self: ColorDialog) = value
        """
        ...

    @property
    def SolidColorOnly(self) -> bool:
        """
        Get: SolidColorOnly(self: ColorDialog) -> bool
        Set: SolidColorOnly(self: ColorDialog) = value
        """
        ...


    def ToString(self) -> str:
        """ ToString(self: ColorDialog) -> str """
        ...


class ColumnClickEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ ColumnClickEventArgs(column: int) """
    @property
    def Column(self) -> int:
        """ Get: Column(self: ColumnClickEventArgs) -> int """
        ...


    def __new__(cls, column:int) -> Self:
        """ __new__(cls: type, column: int) """
        ...


class ColumnClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ColumnClickEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ColumnClickEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ColumnClickEventHandler, sender: object, e: ColumnClickEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ColumnClickEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ColumnClickEventArgs): # -> 
        """ Invoke(self: ColumnClickEventHandler, sender: object, e: ColumnClickEventArgs) """
        ...


class ColumnHeader(ICloneable, Component): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """
    ColumnHeader()
    ColumnHeader(imageIndex: int)
    ColumnHeader(imageKey: str)
    """
    @property
    def DisplayIndex(self) -> int:
        """
        Get: DisplayIndex(self: ColumnHeader) -> int
        Set: DisplayIndex(self: ColumnHeader) = value
        """
        ...

    @property
    def ImageIndex(self) -> int:
        """
        Get: ImageIndex(self: ColumnHeader) -> int
        Set: ImageIndex(self: ColumnHeader) = value
        """
        ...

    @property
    def ImageKey(self) -> str:
        """
        Get: ImageKey(self: ColumnHeader) -> str
        Set: ImageKey(self: ColumnHeader) = value
        """
        ...

    @property
    def ImageList(self): # -> ImageList
        """ Get: ImageList(self: ColumnHeader) -> ImageList """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ColumnHeader) -> int """
        ...

    @property
    def ListView(self) -> ListView:
        """ Get: ListView(self: ColumnHeader) -> ListView """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ColumnHeader) -> str
        Set: Name(self: ColumnHeader) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: ColumnHeader) -> object
        Set: Tag(self: ColumnHeader) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: ColumnHeader) -> str
        Set: Text(self: ColumnHeader) = value
        """
        ...

    @property
    def TextAlign(self): # -> HorizontalAlignment
        """
        Get: TextAlign(self: ColumnHeader) -> HorizontalAlignment
        Set: TextAlign(self: ColumnHeader) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: ColumnHeader) -> int
        Set: Width(self: ColumnHeader) = value
        """
        ...


    def AutoResize(self, headerAutoResize): # ->  # Not found arg types: {'headerAutoResize': 'ColumnHeaderAutoResizeStyle'}
        """ AutoResize(self: ColumnHeader, headerAutoResize: ColumnHeaderAutoResizeStyle) """
        ...

    def __new__(cls, *__args:int) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, imageIndex: int)
        __new__(cls: type, imageKey: str)
        """
        ...


class ColumnHeaderAutoResizeStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ColumnHeaderAutoResizeStyle, values: ColumnContent (2), HeaderSize (1), None (0) """
    ColumnContent: ColumnHeaderAutoResizeStyle = ...
    HeaderSize: ColumnHeaderAutoResizeStyle = ...
    value__ = ...


class ColumnHeaderConverter(ExpandableObjectConverter): # skipped bases: <type 'object'>
    """ ColumnHeaderConverter() """
    def CanConvertTo(self, *__args) -> bool:
        """ CanConvertTo(self: ColumnHeaderConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool """
        ...

    def ConvertTo(self, *__args) -> object:
        """ ConvertTo(self: ColumnHeaderConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object """
        ...


class ColumnHeaderStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ColumnHeaderStyle, values: Clickable (2), Nonclickable (1), None (0) """
    Clickable: ColumnHeaderStyle = ...
    Nonclickable: ColumnHeaderStyle = ...
    value__ = ...


class ColumnReorderedEventArgs(CancelEventArgs): # skipped bases: <type 'object'>
    """ ColumnReorderedEventArgs(oldDisplayIndex: int, newDisplayIndex: int, header: ColumnHeader) """
    @property
    def Header(self) -> ColumnHeader:
        """ Get: Header(self: ColumnReorderedEventArgs) -> ColumnHeader """
        ...

    @property
    def NewDisplayIndex(self) -> int:
        """ Get: NewDisplayIndex(self: ColumnReorderedEventArgs) -> int """
        ...

    @property
    def OldDisplayIndex(self) -> int:
        """ Get: OldDisplayIndex(self: ColumnReorderedEventArgs) -> int """
        ...



class ColumnReorderedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ColumnReorderedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ColumnReorderedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ColumnReorderedEventHandler, sender: object, e: ColumnReorderedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ColumnReorderedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ColumnReorderedEventArgs): # -> 
        """ Invoke(self: ColumnReorderedEventHandler, sender: object, e: ColumnReorderedEventArgs) """
        ...


class TableLayoutStyle: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def SizeType(self): # -> SizeType
        """
        Get: SizeType(self: TableLayoutStyle) -> SizeType
        Set: SizeType(self: TableLayoutStyle) = value
        """
        ...



class ColumnStyle(TableLayoutStyle): # skipped bases: <type 'object'>
    """
    ColumnStyle()
    ColumnStyle(sizeType: SizeType)
    ColumnStyle(sizeType: SizeType, width: Single)
    """
    @property
    def Width(self) -> Single:
        """
        Get: Width(self: ColumnStyle) -> Single
        Set: Width(self: ColumnStyle) = value
        """
        ...


    def __new__(cls, sizeType = ..., width:Single = ...) -> Self: # Not found arg types: {'sizeType': 'SizeType'}
        """
        __new__(cls: type)
        __new__(cls: type, sizeType: SizeType)
        __new__(cls: type, sizeType: SizeType, width: Single)
        """
        ...


class ColumnWidthChangedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ ColumnWidthChangedEventArgs(columnIndex: int) """
    @property
    def ColumnIndex(self) -> int:
        """ Get: ColumnIndex(self: ColumnWidthChangedEventArgs) -> int """
        ...


    def __new__(cls, columnIndex:int) -> Self:
        """ __new__(cls: type, columnIndex: int) """
        ...


class ColumnWidthChangedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ColumnWidthChangedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ColumnWidthChangedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ColumnWidthChangedEventHandler, sender: object, e: ColumnWidthChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ColumnWidthChangedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ColumnWidthChangedEventArgs): # -> 
        """ Invoke(self: ColumnWidthChangedEventHandler, sender: object, e: ColumnWidthChangedEventArgs) """
        ...


class ColumnWidthChangingEventArgs(CancelEventArgs): # skipped bases: <type 'object'>
    """
    ColumnWidthChangingEventArgs(columnIndex: int, newWidth: int, cancel: bool)
    ColumnWidthChangingEventArgs(columnIndex: int, newWidth: int)
    """
    @property
    def ColumnIndex(self) -> int:
        """ Get: ColumnIndex(self: ColumnWidthChangingEventArgs) -> int """
        ...

    @property
    def NewWidth(self) -> int:
        """
        Get: NewWidth(self: ColumnWidthChangingEventArgs) -> int
        Set: NewWidth(self: ColumnWidthChangingEventArgs) = value
        """
        ...



class ColumnWidthChangingEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ColumnWidthChangingEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ColumnWidthChangingEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ColumnWidthChangingEventHandler, sender: object, e: ColumnWidthChangingEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ColumnWidthChangingEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ColumnWidthChangingEventArgs): # -> 
        """ Invoke(self: ColumnWidthChangingEventHandler, sender: object, e: ColumnWidthChangingEventArgs) """
        ...


class ComboBox(ListControl): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'object'>
    """ ComboBox() """
    @property
    def AutoCompleteCustomSource(self) -> AutoCompleteStringCollection:
        """
        Get: AutoCompleteCustomSource(self: ComboBox) -> AutoCompleteStringCollection
        Set: AutoCompleteCustomSource(self: ComboBox) = value
        """
        ...

    @property
    def AutoCompleteMode(self) -> AutoCompleteMode:
        """
        Get: AutoCompleteMode(self: ComboBox) -> AutoCompleteMode
        Set: AutoCompleteMode(self: ComboBox) = value
        """
        ...

    @property
    def AutoCompleteSource(self) -> AutoCompleteSource:
        """
        Get: AutoCompleteSource(self: ComboBox) -> AutoCompleteSource
        Set: AutoCompleteSource(self: ComboBox) = value
        """
        ...

    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: ComboBox) -> Color
        Set: BackColor(self: ComboBox) = value
        """
        ...

    @property
    def BackgroundImage(self) -> Image:
        """
        Get: BackgroundImage(self: ComboBox) -> Image
        Set: BackgroundImage(self: ComboBox) = value
        """
        ...

    @property
    def BackgroundImageLayout(self): # -> ImageLayout
        """
        Get: BackgroundImageLayout(self: ComboBox) -> ImageLayout
        Set: BackgroundImageLayout(self: ComboBox) = value
        """
        ...

    @property
    def DrawMode(self): # -> DrawMode
        """
        Get: DrawMode(self: ComboBox) -> DrawMode
        Set: DrawMode(self: ComboBox) = value
        """
        ...

    @property
    def DropDownHeight(self) -> int:
        """
        Get: DropDownHeight(self: ComboBox) -> int
        Set: DropDownHeight(self: ComboBox) = value
        """
        ...

    @property
    def DropDownStyle(self): # -> ComboBoxStyle
        """
        Get: DropDownStyle(self: ComboBox) -> ComboBoxStyle
        Set: DropDownStyle(self: ComboBox) = value
        """
        ...

    @property
    def DropDownWidth(self) -> int:
        """
        Get: DropDownWidth(self: ComboBox) -> int
        Set: DropDownWidth(self: ComboBox) = value
        """
        ...

    @property
    def DroppedDown(self) -> bool:
        """
        Get: DroppedDown(self: ComboBox) -> bool
        Set: DroppedDown(self: ComboBox) = value
        """
        ...

    @property
    def FlatStyle(self): # -> FlatStyle
        """
        Get: FlatStyle(self: ComboBox) -> FlatStyle
        Set: FlatStyle(self: ComboBox) = value
        """
        ...

    @property
    def Focused(self) -> bool:
        """ Get: Focused(self: ComboBox) -> bool """
        ...

    @property
    def ForeColor(self) -> Color:
        """
        Get: ForeColor(self: ComboBox) -> Color
        Set: ForeColor(self: ComboBox) = value
        """
        ...

    @property
    def IntegralHeight(self) -> bool:
        """
        Get: IntegralHeight(self: ComboBox) -> bool
        Set: IntegralHeight(self: ComboBox) = value
        """
        ...

    @property
    def ItemHeight(self) -> int:
        """
        Get: ItemHeight(self: ComboBox) -> int
        Set: ItemHeight(self: ComboBox) = value
        """
        ...

    @property
    def Items(self): # -> ObjectCollection
        """ Get: Items(self: ComboBox) -> ObjectCollection """
        ...

    @property
    def MaxDropDownItems(self) -> int:
        """
        Get: MaxDropDownItems(self: ComboBox) -> int
        Set: MaxDropDownItems(self: ComboBox) = value
        """
        ...

    @property
    def MaximumSize(self) -> Size:
        """
        Get: MaximumSize(self: ComboBox) -> Size
        Set: MaximumSize(self: ComboBox) = value
        """
        ...

    @property
    def MaxLength(self) -> int:
        """
        Get: MaxLength(self: ComboBox) -> int
        Set: MaxLength(self: ComboBox) = value
        """
        ...

    @property
    def MinimumSize(self) -> Size:
        """
        Get: MinimumSize(self: ComboBox) -> Size
        Set: MinimumSize(self: ComboBox) = value
        """
        ...

    @property
    def Padding(self): # -> Padding
        """
        Get: Padding(self: ComboBox) -> Padding
        Set: Padding(self: ComboBox) = value
        """
        ...

    @property
    def PreferredHeight(self) -> int:
        """ Get: PreferredHeight(self: ComboBox) -> int """
        ...

    @property
    def SelectedItem(self) -> object:
        """
        Get: SelectedItem(self: ComboBox) -> object
        Set: SelectedItem(self: ComboBox) = value
        """
        ...

    @property
    def SelectedText(self) -> str:
        """
        Get: SelectedText(self: ComboBox) -> str
        Set: SelectedText(self: ComboBox) = value
        """
        ...

    @property
    def SelectionLength(self) -> int:
        """
        Get: SelectionLength(self: ComboBox) -> int
        Set: SelectionLength(self: ComboBox) = value
        """
        ...

    @property
    def SelectionStart(self) -> int:
        """
        Get: SelectionStart(self: ComboBox) -> int
        Set: SelectionStart(self: ComboBox) = value
        """
        ...

    @property
    def Sorted(self) -> bool:
        """
        Get: Sorted(self: ComboBox) -> bool
        Set: Sorted(self: ComboBox) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: ComboBox) -> str
        Set: Text(self: ComboBox) = value
        """
        ...


    def AddItemsCore(self, *args): #cannot find CLR method
        """ AddItemsCore(self: ComboBox, value: Array[object]) """
        ...

    def BeginUpdate(self): # -> 
        """ BeginUpdate(self: ComboBox) """
        ...

    def ChildAccessibleObject(self, *args): #cannot find CLR method
        """ ChildAccessibleObject(owner: ComboBox, handle: IntPtr) """
        ...

    def EndUpdate(self): # -> 
        """ EndUpdate(self: ComboBox) """
        ...

    def FindString(self, s:str, startIndex:int = ...) -> int:
        """
        FindString(self: ComboBox, s: str) -> int
        FindString(self: ComboBox, s: str, startIndex: int) -> int
        """
        ...

    def FindStringExact(self, s:str, startIndex:int = ...) -> int:
        """
        FindStringExact(self: ComboBox, s: str) -> int
        FindStringExact(self: ComboBox, s: str, startIndex: int) -> int
        """
        ...

    def GetItemHeight(self, index:int) -> int:
        """ GetItemHeight(self: ComboBox, index: int) -> int """
        ...

    def ObjectCollection(self, *args): #cannot find CLR method
        """ ObjectCollection(owner: ComboBox) """
        ...

    def OnDrawItem(self, *args): #cannot find CLR method
        """ OnDrawItem(self: ComboBox, e: DrawItemEventArgs) """
        ...

    def OnDropDown(self, *args): #cannot find CLR method
        """ OnDropDown(self: ComboBox, e: EventArgs) """
        ...

    def OnDropDownClosed(self, *args): #cannot find CLR method
        """ OnDropDownClosed(self: ComboBox, e: EventArgs) """
        ...

    def OnDropDownStyleChanged(self, *args): #cannot find CLR method
        """ OnDropDownStyleChanged(self: ComboBox, e: EventArgs) """
        ...

    def OnMeasureItem(self, *args): #cannot find CLR method
        """ OnMeasureItem(self: ComboBox, e: MeasureItemEventArgs) """
        ...

    def OnSelectedItemChanged(self, *args): #cannot find CLR method
        """ OnSelectedItemChanged(self: ComboBox, e: EventArgs) """
        ...

    def OnSelectionChangeCommitted(self, *args): #cannot find CLR method
        """ OnSelectionChangeCommitted(self: ComboBox, e: EventArgs) """
        ...

    def OnTextUpdate(self, *args): #cannot find CLR method
        """ OnTextUpdate(self: ComboBox, e: EventArgs) """
        ...

    def ResetText(self): # -> 
        """ ResetText(self: ComboBox) """
        ...

    def SelectAll(self): # -> 
        """ SelectAll(self: ComboBox) """
        ...

    def ToString(self) -> str:
        """ ToString(self: ComboBox) -> str """
        ...

    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    DoubleClick = ...
    DrawItem = ...
    DropDown = ...
    DropDownClosed = ...
    DropDownStyleChanged = ...
    MeasureItem = ...
    PaddingChanged = ...
    Paint = ...
    SelectedIndexChanged = ...
    SelectionChangeCommitted = ...
    TextUpdate = ...


class ComboBoxRenderer: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def IsSupported(self) -> bool:
        """ Get: IsSupported() -> bool """
        ...


    @staticmethod
    def DrawDropDownButton(g:Graphics, bounds:Rectangle, state:ComboBoxState): # -> 
        """ DrawDropDownButton(g: Graphics, bounds: Rectangle, state: ComboBoxState) """
        ...

    @staticmethod
    def DrawTextBox(g:Graphics, bounds:Rectangle, *__args:ComboBoxState): # -> 
        """ DrawTextBox(g: Graphics, bounds: Rectangle, state: ComboBoxState)DrawTextBox(g: Graphics, bounds: Rectangle, comboBoxText: str, font: Font, state: ComboBoxState)DrawTextBox(g: Graphics, bounds: Rectangle, comboBoxText: str, font: Font, textBounds: Rectangle, state: ComboBoxState)DrawTextBox(g: Graphics, bounds: Rectangle, comboBoxText: str, font: Font, flags: TextFormatFlags, state: ComboBoxState)DrawTextBox(g: Graphics, bounds: Rectangle, comboBoxText: str, font: Font, textBounds: Rectangle, flags: TextFormatFlags, state: ComboBoxState) """
        ...



class ComboBoxStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ComboBoxStyle, values: DropDown (1), DropDownList (2), Simple (0) """
    DropDown: ComboBoxStyle = ...
    DropDownList: ComboBoxStyle = ...
    Simple: ComboBoxStyle = ...
    value__ = ...


class IContainerControl: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveControl(self) -> Control:
        """
        Get: ActiveControl(self: IContainerControl) -> Control
        Set: ActiveControl(self: IContainerControl) = value
        """
        ...


    def ActivateControl(self, active:Control) -> bool:
        """ ActivateControl(self: IContainerControl, active: Control) -> bool """
        ...


class ContainerControl(ScrollableControl, IContainerControl): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'object'>
    """ ContainerControl() """
    @property
    def AutoScaleDimensions(self) -> SizeF:
        """
        Get: AutoScaleDimensions(self: ContainerControl) -> SizeF
        Set: AutoScaleDimensions(self: ContainerControl) = value
        """
        ...

    @property
    def AutoScaleFactor(self):
        ...

    @property
    def AutoScaleMode(self) -> AutoScaleMode:
        """
        Get: AutoScaleMode(self: ContainerControl) -> AutoScaleMode
        Set: AutoScaleMode(self: ContainerControl) = value
        """
        ...

    @property
    def AutoValidate(self) -> AutoValidate:
        """
        Get: AutoValidate(self: ContainerControl) -> AutoValidate
        Set: AutoValidate(self: ContainerControl) = value
        """
        ...

    @property
    def CurrentAutoScaleDimensions(self) -> SizeF:
        """ Get: CurrentAutoScaleDimensions(self: ContainerControl) -> SizeF """
        ...

    @property
    def ParentForm(self) -> Form:
        """ Get: ParentForm(self: ContainerControl) -> Form """
        ...


    def OnAutoValidateChanged(self, *args): #cannot find CLR method
        """ OnAutoValidateChanged(self: ContainerControl, e: EventArgs) """
        ...

    def PerformAutoScale(self): # -> 
        """ PerformAutoScale(self: ContainerControl) """
        ...

    def ProcessTabKey(self, *args): #cannot find CLR method
        """ ProcessTabKey(self: ContainerControl, forward: bool) -> bool """
        ...

    def UpdateDefaultButton(self, *args): #cannot find CLR method
        """ UpdateDefaultButton(self: ContainerControl) """
        ...

    def Validate(self, checkAutoValidate:bool = ...) -> bool:
        """
        Validate(self: ContainerControl) -> bool
        Validate(self: ContainerControl, checkAutoValidate: bool) -> bool
        """
        ...

    def ValidateChildren(self, validationConstraints = ...) -> bool: # Not found arg types: {'validationConstraints': 'ValidationConstraints'}
        """
        ValidateChildren(self: ContainerControl) -> bool
        ValidateChildren(self: ContainerControl, validationConstraints: ValidationConstraints) -> bool
        """
        ...

    AutoValidateChanged = ...


class ContentsResizedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ ContentsResizedEventArgs(newRectangle: Rectangle) """
    @property
    def NewRectangle(self) -> Rectangle:
        """ Get: NewRectangle(self: ContentsResizedEventArgs) -> Rectangle """
        ...


    def __new__(cls, newRectangle:Rectangle) -> Self:
        """ __new__(cls: type, newRectangle: Rectangle) """
        ...


class ContentsResizedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ContentsResizedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ContentsResizedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ContentsResizedEventHandler, sender: object, e: ContentsResizedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ContentsResizedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ContentsResizedEventArgs): # -> 
        """ Invoke(self: ContentsResizedEventHandler, sender: object, e: ContentsResizedEventArgs) """
        ...


class Menu(Component): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """ no doc """
    @property
    def Handle(self) -> IntPtr:
        """ Get: Handle(self: Menu) -> IntPtr """
        ...

    @property
    def IsParent(self) -> bool:
        """ Get: IsParent(self: Menu) -> bool """
        ...

    @property
    def MdiListItem(self) -> MenuItem:
        """ Get: MdiListItem(self: Menu) -> MenuItem """
        ...

    @property
    def MenuItems(self): # -> MenuItemCollection
        """ Get: MenuItems(self: Menu) -> MenuItemCollection """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Menu) -> str
        Set: Name(self: Menu) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: Menu) -> object
        Set: Tag(self: Menu) = value
        """
        ...


    def CloneMenu(self, *args): #cannot find CLR method
        """ CloneMenu(self: Menu, menuSrc: Menu) """
        ...

    def CreateMenuHandle(self, *args): #cannot find CLR method
        """ CreateMenuHandle(self: Menu) -> IntPtr """
        ...

    def FindMenuItem(self, type:int, value:IntPtr) -> MenuItem:
        """ FindMenuItem(self: Menu, type: int, value: IntPtr) -> MenuItem """
        ...

    def FindMergePosition(self, *args): #cannot find CLR method
        """ FindMergePosition(self: Menu, mergeOrder: int) -> int """
        ...

    def GetContextMenu(self): # -> ContextMenu
        """ GetContextMenu(self: Menu) -> ContextMenu """
        ...

    def GetMainMenu(self): # -> MainMenu
        """ GetMainMenu(self: Menu) -> MainMenu """
        ...

    def MenuItemCollection(self, *args): #cannot find CLR method
        """ MenuItemCollection(owner: Menu) """
        ...

    def MergeMenu(self, menuSrc:Menu): # -> 
        """ MergeMenu(self: Menu, menuSrc: Menu) """
        ...

    def ProcessCmdKey(self, *args): #cannot find CLR method
        """ ProcessCmdKey(self: Menu, msg: Message, keyData: Keys) -> (bool, Message) """
        ...

    def __new__(cls, *args): #cannot find CLR constructor
        """ __new__(cls: type, items: Array[MenuItem]) """
        ...

    FindHandle: int = ...
    FindShortcut: int = ...


class ContextMenu(Menu): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """
    ContextMenu()
    ContextMenu(menuItems: Array[MenuItem])
    """
    @property
    def RightToLeft(self): # -> RightToLeft
        """
        Get: RightToLeft(self: ContextMenu) -> RightToLeft
        Set: RightToLeft(self: ContextMenu) = value
        """
        ...

    @property
    def SourceControl(self) -> Control:
        """ Get: SourceControl(self: ContextMenu) -> Control """
        ...


    def OnCollapse(self, *args): #cannot find CLR method
        """ OnCollapse(self: ContextMenu, e: EventArgs) """
        ...

    def OnPopup(self, *args): #cannot find CLR method
        """ OnPopup(self: ContextMenu, e: EventArgs) """
        ...

    def Show(self, control:Control, pos:Point, alignment = ...): # ->  # Not found arg types: {'alignment': 'LeftRightAlignment'}
        """ Show(self: ContextMenu, control: Control, pos: Point)Show(self: ContextMenu, control: Control, pos: Point, alignment: LeftRightAlignment) """
        ...

    Collapse = ...
    Popup = ...


class ToolStripDropDown(ToolStrip): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'ISupportToolStripPanel'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ ToolStripDropDown() """
    @property
    def AllowTransparency(self) -> bool:
        """
        Get: AllowTransparency(self: ToolStripDropDown) -> bool
        Set: AllowTransparency(self: ToolStripDropDown) = value
        """
        ...

    @property
    def AutoClose(self) -> bool:
        """
        Get: AutoClose(self: ToolStripDropDown) -> bool
        Set: AutoClose(self: ToolStripDropDown) = value
        """
        ...

    @property
    def ContextMenu(self) -> ContextMenu:
        """
        Get: ContextMenu(self: ToolStripDropDown) -> ContextMenu
        Set: ContextMenu(self: ToolStripDropDown) = value
        """
        ...

    @property
    def ContextMenuStrip(self): # -> ContextMenuStrip
        """
        Get: ContextMenuStrip(self: ToolStripDropDown) -> ContextMenuStrip
        Set: ContextMenuStrip(self: ToolStripDropDown) = value
        """
        ...

    @property
    def DropShadowEnabled(self) -> bool:
        """
        Get: DropShadowEnabled(self: ToolStripDropDown) -> bool
        Set: DropShadowEnabled(self: ToolStripDropDown) = value
        """
        ...

    @property
    def IsAutoGenerated(self) -> bool:
        """ Get: IsAutoGenerated(self: ToolStripDropDown) -> bool """
        ...

    @property
    def Location(self) -> Point:
        """
        Get: Location(self: ToolStripDropDown) -> Point
        Set: Location(self: ToolStripDropDown) = value
        """
        ...

    @property
    def Opacity(self) -> float:
        """
        Get: Opacity(self: ToolStripDropDown) -> float
        Set: Opacity(self: ToolStripDropDown) = value
        """
        ...

    @property
    def OwnerItem(self): # -> ToolStripItem
        """
        Get: OwnerItem(self: ToolStripDropDown) -> ToolStripItem
        Set: OwnerItem(self: ToolStripDropDown) = value
        """
        ...

    @property
    def Region(self) -> Region:
        """
        Get: Region(self: ToolStripDropDown) -> Region
        Set: Region(self: ToolStripDropDown) = value
        """
        ...

    @property
    def RightToLeft(self): # -> RightToLeft
        """
        Get: RightToLeft(self: ToolStripDropDown) -> RightToLeft
        Set: RightToLeft(self: ToolStripDropDown) = value
        """
        ...

    @property
    def TabIndex(self) -> int:
        """
        Get: TabIndex(self: ToolStripDropDown) -> int
        Set: TabIndex(self: ToolStripDropDown) = value
        """
        ...

    @property
    def TopLevel(self) -> bool:
        """
        Get: TopLevel(self: ToolStripDropDown) -> bool
        Set: TopLevel(self: ToolStripDropDown) = value
        """
        ...

    @property
    def TopMost(self):
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ToolStripDropDown) -> bool
        Set: Visible(self: ToolStripDropDown) = value
        """
        ...


    def Close(self, reason = ...): # ->  # Not found arg types: {'reason': 'ToolStripDropDownCloseReason'}
        """ Close(self: ToolStripDropDown)Close(self: ToolStripDropDown, reason: ToolStripDropDownCloseReason) """
        ...

    def OnClosed(self, *args): #cannot find CLR method
        """ OnClosed(self: ToolStripDropDown, e: ToolStripDropDownClosedEventArgs) """
        ...

    def OnClosing(self, *args): #cannot find CLR method
        """ OnClosing(self: ToolStripDropDown, e: ToolStripDropDownClosingEventArgs) """
        ...

    def OnOpened(self, *args): #cannot find CLR method
        """ OnOpened(self: ToolStripDropDown, e: EventArgs) """
        ...

    def OnOpening(self, *args): #cannot find CLR method
        """ OnOpening(self: ToolStripDropDown, e: CancelEventArgs) """
        ...

    def Show(self, *__args:Point): # -> 
        """ Show(self: ToolStripDropDown)Show(self: ToolStripDropDown, control: Control, position: Point)Show(self: ToolStripDropDown, control: Control, position: Point, direction: ToolStripDropDownDirection)Show(self: ToolStripDropDown, control: Control, x: int, y: int)Show(self: ToolStripDropDown, screenLocation: Point)Show(self: ToolStripDropDown, position: Point, direction: ToolStripDropDownDirection)Show(self: ToolStripDropDown, x: int, y: int) """
        ...

    def ToolStripDropDownAccessibleObject(self, *args): #cannot find CLR method
        """ ToolStripDropDownAccessibleObject(owner: ToolStripDropDown) """
        ...

    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    BindingContextChanged = ...
    ChangeUICues = ...
    Closed = ...
    Closing = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    DockChanged = ...
    Enter = ...
    FontChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    ImeModeChanged = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Leave = ...
    Opened = ...
    Opening = ...
    RegionChanged = ...
    Scroll = ...
    StyleChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    TextChanged = ...
    Validated = ...
    Validating = ...


class ToolStripDropDownMenu(ToolStripDropDown): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IViewObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'ISupportToolStripPanel'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IOleObject'>, <type 'object'>
    """ ToolStripDropDownMenu() """
    @property
    def DisplayRectangle(self) -> Rectangle:
        """ Get: DisplayRectangle(self: ToolStripDropDownMenu) -> Rectangle """
        ...

    @property
    def LayoutEngine(self) -> LayoutEngine:
        """ Get: LayoutEngine(self: ToolStripDropDownMenu) -> LayoutEngine """
        ...

    @property
    def LayoutStyle(self): # -> ToolStripLayoutStyle
        """
        Get: LayoutStyle(self: ToolStripDropDownMenu) -> ToolStripLayoutStyle
        Set: LayoutStyle(self: ToolStripDropDownMenu) = value
        """
        ...

    @property
    def ShowCheckMargin(self) -> bool:
        """
        Get: ShowCheckMargin(self: ToolStripDropDownMenu) -> bool
        Set: ShowCheckMargin(self: ToolStripDropDownMenu) = value
        """
        ...

    @property
    def ShowImageMargin(self) -> bool:
        """
        Get: ShowImageMargin(self: ToolStripDropDownMenu) -> bool
        Set: ShowImageMargin(self: ToolStripDropDownMenu) = value
        """
        ...



class ContextMenuStrip(ToolStripDropDownMenu): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IOleObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'ISupportToolStripPanel'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IViewObject'>, <type 'object'>
    """
    ContextMenuStrip(container: IContainer)
    ContextMenuStrip()
    """
    @property
    def SourceControl(self) -> Control:
        """ Get: SourceControl(self: ContextMenuStrip) -> Control """
        ...


    def __new__(cls, container:IContainer = ...) -> Self:
        """
        __new__(cls: type, container: IContainer)
        __new__(cls: type)
        """
        ...


class ControlBindingsCollection(BindingsCollection): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ ControlBindingsCollection(control: IBindableComponent) """
    @property
    def BindableComponent(self) -> IBindableComponent:
        """ Get: BindableComponent(self: ControlBindingsCollection) -> IBindableComponent """
        ...

    @property
    def Control(self) -> Control:
        """ Get: Control(self: ControlBindingsCollection) -> Control """
        ...

    @property
    def DefaultDataSourceUpdateMode(self): # -> DataSourceUpdateMode
        """
        Get: DefaultDataSourceUpdateMode(self: ControlBindingsCollection) -> DataSourceUpdateMode
        Set: DefaultDataSourceUpdateMode(self: ControlBindingsCollection) = value
        """
        ...


    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+y """
        ...

    def __new__(cls, control:IBindableComponent) -> Self:
        """ __new__(cls: type, control: IBindableComponent) """
        ...


class ControlEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ ControlEventArgs(control: Control) """
    @property
    def Control(self) -> Control:
        """ Get: Control(self: ControlEventArgs) -> Control """
        ...


    def __new__(cls, control:Control) -> Self:
        """ __new__(cls: type, control: Control) """
        ...


class ControlEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ControlEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ControlEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ControlEventHandler, sender: object, e: ControlEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ControlEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ControlEventArgs): # -> 
        """ Invoke(self: ControlEventHandler, sender: object, e: ControlEventArgs) """
        ...


class ControlPaint: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def ContrastControlDark(self) -> Color:
        """ Get: ContrastControlDark() -> Color """
        ...


    @staticmethod
    def CreateHBitmap16Bit(bitmap:Bitmap, background:Color) -> IntPtr:
        """ CreateHBitmap16Bit(bitmap: Bitmap, background: Color) -> IntPtr """
        ...

    @staticmethod
    def CreateHBitmapColorMask(bitmap:Bitmap, monochromeMask:IntPtr) -> IntPtr:
        """ CreateHBitmapColorMask(bitmap: Bitmap, monochromeMask: IntPtr) -> IntPtr """
        ...

    @staticmethod
    def CreateHBitmapTransparencyMask(bitmap:Bitmap) -> IntPtr:
        """ CreateHBitmapTransparencyMask(bitmap: Bitmap) -> IntPtr """
        ...

    @staticmethod
    def Dark(baseColor:Color, percOfDarkDark:Single = ...) -> Color:
        """
        Dark(baseColor: Color, percOfDarkDark: Single) -> Color
        Dark(baseColor: Color) -> Color
        """
        ...

    @staticmethod
    def DarkDark(baseColor:Color) -> Color:
        """ DarkDark(baseColor: Color) -> Color """
        ...

    @staticmethod
    def DrawBorder(graphics, bounds, *__args): # -> 
        """ DrawBorder(graphics: Graphics, bounds: Rectangle, color: Color, style: ButtonBorderStyle)DrawBorder(graphics: Graphics, bounds: Rectangle, leftColor: Color, leftWidth: int, leftStyle: ButtonBorderStyle, topColor: Color, topWidth: int, topStyle: ButtonBorderStyle, rightColor: Color, rightWidth: int, rightStyle: ButtonBorderStyle, bottomColor: Color, bottomWidth: int, bottomStyle: ButtonBorderStyle) """
        ...

    @staticmethod
    def DrawBorder3D(graphics:Graphics, *__args:Rectangle): # -> 
        """ DrawBorder3D(graphics: Graphics, rectangle: Rectangle)DrawBorder3D(graphics: Graphics, rectangle: Rectangle, style: Border3DStyle)DrawBorder3D(graphics: Graphics, rectangle: Rectangle, style: Border3DStyle, sides: Border3DSide)DrawBorder3D(graphics: Graphics, x: int, y: int, width: int, height: int)DrawBorder3D(graphics: Graphics, x: int, y: int, width: int, height: int, style: Border3DStyle)DrawBorder3D(graphics: Graphics, x: int, y: int, width: int, height: int, style: Border3DStyle, sides: Border3DSide) """
        ...

    @staticmethod
    def DrawButton(graphics, *__args): # -> 
        """ DrawButton(graphics: Graphics, rectangle: Rectangle, state: ButtonState)DrawButton(graphics: Graphics, x: int, y: int, width: int, height: int, state: ButtonState) """
        ...

    @staticmethod
    def DrawCaptionButton(graphics, *__args): # -> 
        """ DrawCaptionButton(graphics: Graphics, rectangle: Rectangle, button: CaptionButton, state: ButtonState)DrawCaptionButton(graphics: Graphics, x: int, y: int, width: int, height: int, button: CaptionButton, state: ButtonState) """
        ...

    @staticmethod
    def DrawCheckBox(graphics, *__args): # -> 
        """ DrawCheckBox(graphics: Graphics, x: int, y: int, width: int, height: int, state: ButtonState)DrawCheckBox(graphics: Graphics, rectangle: Rectangle, state: ButtonState) """
        ...

    @staticmethod
    def DrawComboButton(graphics, *__args): # -> 
        """ DrawComboButton(graphics: Graphics, rectangle: Rectangle, state: ButtonState)DrawComboButton(graphics: Graphics, x: int, y: int, width: int, height: int, state: ButtonState) """
        ...

    @staticmethod
    def DrawContainerGrabHandle(graphics:Graphics, bounds:Rectangle): # -> 
        """ DrawContainerGrabHandle(graphics: Graphics, bounds: Rectangle) """
        ...

    @staticmethod
    def DrawFocusRectangle(graphics:Graphics, rectangle:Rectangle, foreColor:Color = ..., backColor:Color = ...): # -> 
        """ DrawFocusRectangle(graphics: Graphics, rectangle: Rectangle, foreColor: Color, backColor: Color)DrawFocusRectangle(graphics: Graphics, rectangle: Rectangle) """
        ...

    @staticmethod
    def DrawGrabHandle(graphics:Graphics, rectangle:Rectangle, primary:bool, enabled:bool): # -> 
        """ DrawGrabHandle(graphics: Graphics, rectangle: Rectangle, primary: bool, enabled: bool) """
        ...

    @staticmethod
    def DrawGrid(graphics:Graphics, area:Rectangle, pixelsBetweenDots:Size, backColor:Color): # -> 
        """ DrawGrid(graphics: Graphics, area: Rectangle, pixelsBetweenDots: Size, backColor: Color) """
        ...

    @staticmethod
    def DrawImageDisabled(graphics:Graphics, image:Image, x:int, y:int, background:Color): # -> 
        """ DrawImageDisabled(graphics: Graphics, image: Image, x: int, y: int, background: Color) """
        ...

    @staticmethod
    def DrawLockedFrame(graphics:Graphics, rectangle:Rectangle, primary:bool): # -> 
        """ DrawLockedFrame(graphics: Graphics, rectangle: Rectangle, primary: bool) """
        ...

    @staticmethod
    def DrawMenuGlyph(graphics, *__args): # -> 
        """ DrawMenuGlyph(graphics: Graphics, rectangle: Rectangle, glyph: MenuGlyph)DrawMenuGlyph(graphics: Graphics, rectangle: Rectangle, glyph: MenuGlyph, foreColor: Color, backColor: Color)DrawMenuGlyph(graphics: Graphics, x: int, y: int, width: int, height: int, glyph: MenuGlyph, foreColor: Color, backColor: Color)DrawMenuGlyph(graphics: Graphics, x: int, y: int, width: int, height: int, glyph: MenuGlyph) """
        ...

    @staticmethod
    def DrawMixedCheckBox(graphics, *__args): # -> 
        """ DrawMixedCheckBox(graphics: Graphics, rectangle: Rectangle, state: ButtonState)DrawMixedCheckBox(graphics: Graphics, x: int, y: int, width: int, height: int, state: ButtonState) """
        ...

    @staticmethod
    def DrawRadioButton(graphics, *__args): # -> 
        """ DrawRadioButton(graphics: Graphics, x: int, y: int, width: int, height: int, state: ButtonState)DrawRadioButton(graphics: Graphics, rectangle: Rectangle, state: ButtonState) """
        ...

    @staticmethod
    def DrawReversibleFrame(rectangle:Rectangle, backColor:Color, style): # ->  # Not found arg types: {'style': 'FrameStyle'}
        """ DrawReversibleFrame(rectangle: Rectangle, backColor: Color, style: FrameStyle) """
        ...

    @staticmethod
    def DrawReversibleLine(start:Point, end:Point, backColor:Color): # -> 
        """ DrawReversibleLine(start: Point, end: Point, backColor: Color) """
        ...

    @staticmethod
    def DrawScrollButton(graphics, *__args): # -> 
        """ DrawScrollButton(graphics: Graphics, rectangle: Rectangle, button: ScrollButton, state: ButtonState)DrawScrollButton(graphics: Graphics, x: int, y: int, width: int, height: int, button: ScrollButton, state: ButtonState) """
        ...

    @staticmethod
    def DrawSelectionFrame(graphics:Graphics, active:bool, outsideRect:Rectangle, insideRect:Rectangle, backColor:Color): # -> 
        """ DrawSelectionFrame(graphics: Graphics, active: bool, outsideRect: Rectangle, insideRect: Rectangle, backColor: Color) """
        ...

    @staticmethod
    def DrawSizeGrip(graphics:Graphics, backColor:Color, *__args:Rectangle): # -> 
        """ DrawSizeGrip(graphics: Graphics, backColor: Color, bounds: Rectangle)DrawSizeGrip(graphics: Graphics, backColor: Color, x: int, y: int, width: int, height: int) """
        ...

    @staticmethod
    def DrawStringDisabled(*__args): # -> 
        """ DrawStringDisabled(graphics: Graphics, s: str, font: Font, color: Color, layoutRectangle: RectangleF, format: StringFormat)DrawStringDisabled(dc: IDeviceContext, s: str, font: Font, color: Color, layoutRectangle: Rectangle, format: TextFormatFlags) """
        ...

    @staticmethod
    def DrawVisualStyleBorder(graphics:Graphics, bounds:Rectangle): # -> 
        """ DrawVisualStyleBorder(graphics: Graphics, bounds: Rectangle) """
        ...

    @staticmethod
    def FillReversibleRectangle(rectangle:Rectangle, backColor:Color): # -> 
        """ FillReversibleRectangle(rectangle: Rectangle, backColor: Color) """
        ...

    @staticmethod
    def Light(baseColor:Color, percOfLightLight:Single = ...) -> Color:
        """
        Light(baseColor: Color, percOfLightLight: Single) -> Color
        Light(baseColor: Color) -> Color
        """
        ...

    @staticmethod
    def LightLight(baseColor:Color) -> Color:
        """ LightLight(baseColor: Color) -> Color """
        ...



class ControlStyles(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) ControlStyles, values: AllPaintingInWmPaint (8192), CacheText (16384), ContainerControl (1), DoubleBuffer (65536), EnableNotifyMessage (32768), FixedHeight (64), FixedWidth (32), Opaque (4), OptimizedDoubleBuffer (131072), ResizeRedraw (16), Selectable (512), StandardClick (256), StandardDoubleClick (4096), SupportsTransparentBackColor (2048), UserMouse (1024), UserPaint (2), UseTextForAccessibility (262144) """
    AllPaintingInWmPaint: ControlStyles = ...
    CacheText: ControlStyles = ...
    ContainerControl: ControlStyles = ...
    DoubleBuffer: ControlStyles = ...
    EnableNotifyMessage: ControlStyles = ...
    FixedHeight: ControlStyles = ...
    FixedWidth: ControlStyles = ...
    Opaque: ControlStyles = ...
    OptimizedDoubleBuffer: ControlStyles = ...
    ResizeRedraw: ControlStyles = ...
    Selectable: ControlStyles = ...
    StandardClick: ControlStyles = ...
    StandardDoubleClick: ControlStyles = ...
    SupportsTransparentBackColor: ControlStyles = ...
    UserMouse: ControlStyles = ...
    UserPaint: ControlStyles = ...
    UseTextForAccessibility: ControlStyles = ...
    value__ = ...


class ControlUpdateMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ControlUpdateMode, values: Never (1), OnPropertyChanged (0) """
    Never: ControlUpdateMode = ...
    OnPropertyChanged: ControlUpdateMode = ...
    value__ = ...


class ConvertEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ ConvertEventArgs(value: object, desiredType: Type) """
    @property
    def DesiredType(self) -> Type:
        """ Get: DesiredType(self: ConvertEventArgs) -> Type """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: ConvertEventArgs) -> object
        Set: Value(self: ConvertEventArgs) = value
        """
        ...


    def __new__(cls, value:object, desiredType:Type) -> Self:
        """ __new__(cls: type, value: object, desiredType: Type) """
        ...


class ConvertEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ConvertEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ConvertEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ConvertEventHandler, sender: object, e: ConvertEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ConvertEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ConvertEventArgs): # -> 
        """ Invoke(self: ConvertEventHandler, sender: object, e: ConvertEventArgs) """
        ...


class CreateParams: # skipped bases: <type 'object'>, <type 'object'>
    """ CreateParams() """
    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: CreateParams) -> str
        Set: Caption(self: CreateParams) = value
        """
        ...

    @property
    def ClassName(self) -> str:
        """
        Get: ClassName(self: CreateParams) -> str
        Set: ClassName(self: CreateParams) = value
        """
        ...

    @property
    def ClassStyle(self) -> int:
        """
        Get: ClassStyle(self: CreateParams) -> int
        Set: ClassStyle(self: CreateParams) = value
        """
        ...

    @property
    def ExStyle(self) -> int:
        """
        Get: ExStyle(self: CreateParams) -> int
        Set: ExStyle(self: CreateParams) = value
        """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: CreateParams) -> int
        Set: Height(self: CreateParams) = value
        """
        ...

    @property
    def Param(self) -> object:
        """
        Get: Param(self: CreateParams) -> object
        Set: Param(self: CreateParams) = value
        """
        ...

    @property
    def Parent(self) -> IntPtr:
        """
        Get: Parent(self: CreateParams) -> IntPtr
        Set: Parent(self: CreateParams) = value
        """
        ...

    @property
    def Style(self) -> int:
        """
        Get: Style(self: CreateParams) -> int
        Set: Style(self: CreateParams) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: CreateParams) -> int
        Set: Width(self: CreateParams) = value
        """
        ...

    @property
    def X(self) -> int:
        """
        Get: X(self: CreateParams) -> int
        Set: X(self: CreateParams) = value
        """
        ...

    @property
    def Y(self) -> int:
        """
        Get: Y(self: CreateParams) -> int
        Set: Y(self: CreateParams) = value
        """
        ...


    def ToString(self) -> str:
        """ ToString(self: CreateParams) -> str """
        ...


class CurrencyManager(BindingManagerBase): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def List(self) -> IList:
        """ Get: List(self: CurrencyManager) -> IList """
        ...


    def CheckEmpty(self, *args): #cannot find CLR method
        """ CheckEmpty(self: CurrencyManager) """
        ...

    def OnItemChanged(self, *args): #cannot find CLR method
        """ OnItemChanged(self: CurrencyManager, e: ItemChangedEventArgs) """
        ...

    def OnMetaDataChanged(self, *args): #cannot find CLR method
        """ OnMetaDataChanged(self: CurrencyManager, e: EventArgs) """
        ...

    def OnPositionChanged(self, *args): #cannot find CLR method
        """ OnPositionChanged(self: CurrencyManager, e: EventArgs) """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: CurrencyManager) """
        ...

    finalType = ...
    ItemChanged = ...
    ListChanged = ...
    listposition = ...
    MetaDataChanged = ...
    onCurrentChangedHandler = ...
    onPositionChangedHandler = ...


class Cursor(IDisposable, ISerializable): # skipped bases: <type 'object'>
    """
    Cursor(handle: IntPtr)
    Cursor(fileName: str)
    Cursor(type: Type, resource: str)
    Cursor(stream: Stream)
    """
    @property
    def Clip(self) -> Rectangle:
        """
        Get: Clip() -> Rectangle
        Set: Clip() = value
        """
        ...

    @property
    def Current(self) -> Cursor:
        """
        Get: Current() -> Cursor
        Set: Current() = value
        """
        ...

    @property
    def Handle(self) -> IntPtr:
        """ Get: Handle(self: Cursor) -> IntPtr """
        ...

    @property
    def HotSpot(self) -> Point:
        """ Get: HotSpot(self: Cursor) -> Point """
        ...

    @property
    def Position(self) -> Point:
        """
        Get: Position() -> Point
        Set: Position() = value
        """
        ...

    @property
    def Size(self) -> Size:
        """ Get: Size(self: Cursor) -> Size """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: Cursor) -> object
        Set: Tag(self: Cursor) = value
        """
        ...


    def CopyHandle(self) -> IntPtr:
        """ CopyHandle(self: Cursor) -> IntPtr """
        ...

    def Draw(self, g:Graphics, targetRect:Rectangle): # -> 
        """ Draw(self: Cursor, g: Graphics, targetRect: Rectangle) """
        ...

    def DrawStretched(self, g:Graphics, targetRect:Rectangle): # -> 
        """ DrawStretched(self: Cursor, g: Graphics, targetRect: Rectangle) """
        ...

    def Equals(self, obj:object) -> bool:
        """ Equals(self: Cursor, obj: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: Cursor) -> int """
        ...

    @staticmethod
    def Hide(): # -> 
        """ Hide() """
        ...

    @staticmethod
    def Show(): # -> 
        """ Show() """
        ...

    def ToString(self) -> str:
        """ ToString(self: Cursor) -> str """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...



class CursorConverter(TypeConverter): # skipped bases: <type 'object'>
    """ CursorConverter() """
    pass

class Cursors: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AppStarting(self) -> Cursor:
        """ Get: AppStarting() -> Cursor """
        ...

    @property
    def Arrow(self) -> Cursor:
        """ Get: Arrow() -> Cursor """
        ...

    @property
    def Cross(self) -> Cursor:
        """ Get: Cross() -> Cursor """
        ...

    @property
    def Default(self) -> Cursor:
        """ Get: Default() -> Cursor """
        ...

    @property
    def Hand(self) -> Cursor:
        """ Get: Hand() -> Cursor """
        ...

    @property
    def Help(self) -> Cursor:
        """ Get: Help() -> Cursor """
        ...

    @property
    def HSplit(self) -> Cursor:
        """ Get: HSplit() -> Cursor """
        ...

    @property
    def IBeam(self) -> Cursor:
        """ Get: IBeam() -> Cursor """
        ...

    @property
    def No(self) -> Cursor:
        """ Get: No() -> Cursor """
        ...

    @property
    def NoMove2D(self) -> Cursor:
        """ Get: NoMove2D() -> Cursor """
        ...

    @property
    def NoMoveHoriz(self) -> Cursor:
        """ Get: NoMoveHoriz() -> Cursor """
        ...

    @property
    def NoMoveVert(self) -> Cursor:
        """ Get: NoMoveVert() -> Cursor """
        ...

    @property
    def PanEast(self) -> Cursor:
        """ Get: PanEast() -> Cursor """
        ...

    @property
    def PanNE(self) -> Cursor:
        """ Get: PanNE() -> Cursor """
        ...

    @property
    def PanNorth(self) -> Cursor:
        """ Get: PanNorth() -> Cursor """
        ...

    @property
    def PanNW(self) -> Cursor:
        """ Get: PanNW() -> Cursor """
        ...

    @property
    def PanSE(self) -> Cursor:
        """ Get: PanSE() -> Cursor """
        ...

    @property
    def PanSouth(self) -> Cursor:
        """ Get: PanSouth() -> Cursor """
        ...

    @property
    def PanSW(self) -> Cursor:
        """ Get: PanSW() -> Cursor """
        ...

    @property
    def PanWest(self) -> Cursor:
        """ Get: PanWest() -> Cursor """
        ...

    @property
    def SizeAll(self) -> Cursor:
        """ Get: SizeAll() -> Cursor """
        ...

    @property
    def SizeNESW(self) -> Cursor:
        """ Get: SizeNESW() -> Cursor """
        ...

    @property
    def SizeNS(self) -> Cursor:
        """ Get: SizeNS() -> Cursor """
        ...

    @property
    def SizeNWSE(self) -> Cursor:
        """ Get: SizeNWSE() -> Cursor """
        ...

    @property
    def SizeWE(self) -> Cursor:
        """ Get: SizeWE() -> Cursor """
        ...

    @property
    def UpArrow(self) -> Cursor:
        """ Get: UpArrow() -> Cursor """
        ...

    @property
    def VSplit(self) -> Cursor:
        """ Get: VSplit() -> Cursor """
        ...

    @property
    def WaitCursor(self) -> Cursor:
        """ Get: WaitCursor() -> Cursor """
        ...




class DataFormats: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def Format(self, *args): #cannot find CLR method
        """ Format(name: str, id: int) """
        ...

    @staticmethod
    def GetFormat(*__args:str) -> Format:
        """
        GetFormat(format: str) -> Format
        GetFormat(id: int) -> Format
        """
        ...

    Bitmap: str = ...
    CommaSeparatedValue: str = ...
    Dib: str = ...
    Dif: str = ...
    EnhancedMetafile: str = ...
    FileDrop: str = ...
    Html: str = ...
    Locale: str = ...
    MetafilePict: str = ...
    OemText: str = ...
    Palette: str = ...
    PenData: str = ...
    Riff: str = ...
    Rtf: str = ...
    Serializable: str = ...
    StringFormat: str = ...
    SymbolicLink: str = ...
    Text: str = ...
    Tiff: str = ...
    UnicodeText: str = ...
    WaveAudio: str = ...


class IDataGridEditingService: # skipped bases: <type 'object'>
    """ no doc """
    def BeginEdit(self, gridColumn, rowNumber:int) -> bool: # Not found arg types: {'gridColumn': 'DataGridColumnStyle'}
        """ BeginEdit(self: IDataGridEditingService, gridColumn: DataGridColumnStyle, rowNumber: int) -> bool """
        ...

    def EndEdit(self, gridColumn, rowNumber:int, shouldAbort:bool) -> bool: # Not found arg types: {'gridColumn': 'DataGridColumnStyle'}
        """ EndEdit(self: IDataGridEditingService, gridColumn: DataGridColumnStyle, rowNumber: int, shouldAbort: bool) -> bool """
        ...


class DataGrid(Control, ISupportInitialize, IDataGridEditingService): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ DataGrid() """
    @property
    def AllowNavigation(self) -> bool:
        """
        Get: AllowNavigation(self: DataGrid) -> bool
        Set: AllowNavigation(self: DataGrid) = value
        """
        ...

    @property
    def AllowSorting(self) -> bool:
        """
        Get: AllowSorting(self: DataGrid) -> bool
        Set: AllowSorting(self: DataGrid) = value
        """
        ...

    @property
    def AlternatingBackColor(self) -> Color:
        """
        Get: AlternatingBackColor(self: DataGrid) -> Color
        Set: AlternatingBackColor(self: DataGrid) = value
        """
        ...

    @property
    def BackgroundColor(self) -> Color:
        """
        Get: BackgroundColor(self: DataGrid) -> Color
        Set: BackgroundColor(self: DataGrid) = value
        """
        ...

    @property
    def BorderStyle(self) -> BorderStyle:
        """
        Get: BorderStyle(self: DataGrid) -> BorderStyle
        Set: BorderStyle(self: DataGrid) = value
        """
        ...

    @property
    def CaptionBackColor(self) -> Color:
        """
        Get: CaptionBackColor(self: DataGrid) -> Color
        Set: CaptionBackColor(self: DataGrid) = value
        """
        ...

    @property
    def CaptionFont(self) -> Font:
        """
        Get: CaptionFont(self: DataGrid) -> Font
        Set: CaptionFont(self: DataGrid) = value
        """
        ...

    @property
    def CaptionForeColor(self) -> Color:
        """
        Get: CaptionForeColor(self: DataGrid) -> Color
        Set: CaptionForeColor(self: DataGrid) = value
        """
        ...

    @property
    def CaptionText(self) -> str:
        """
        Get: CaptionText(self: DataGrid) -> str
        Set: CaptionText(self: DataGrid) = value
        """
        ...

    @property
    def CaptionVisible(self) -> bool:
        """
        Get: CaptionVisible(self: DataGrid) -> bool
        Set: CaptionVisible(self: DataGrid) = value
        """
        ...

    @property
    def ColumnHeadersVisible(self) -> bool:
        """
        Get: ColumnHeadersVisible(self: DataGrid) -> bool
        Set: ColumnHeadersVisible(self: DataGrid) = value
        """
        ...

    @property
    def CurrentCell(self): # -> DataGridCell
        """
        Get: CurrentCell(self: DataGrid) -> DataGridCell
        Set: CurrentCell(self: DataGrid) = value
        """
        ...

    @property
    def CurrentRowIndex(self) -> int:
        """
        Get: CurrentRowIndex(self: DataGrid) -> int
        Set: CurrentRowIndex(self: DataGrid) = value
        """
        ...

    @property
    def DataMember(self) -> str:
        """
        Get: DataMember(self: DataGrid) -> str
        Set: DataMember(self: DataGrid) = value
        """
        ...

    @property
    def DataSource(self) -> object:
        """
        Get: DataSource(self: DataGrid) -> object
        Set: DataSource(self: DataGrid) = value
        """
        ...

    @property
    def FirstVisibleColumn(self) -> int:
        """ Get: FirstVisibleColumn(self: DataGrid) -> int """
        ...

    @property
    def FlatMode(self) -> bool:
        """
        Get: FlatMode(self: DataGrid) -> bool
        Set: FlatMode(self: DataGrid) = value
        """
        ...

    @property
    def GridLineColor(self) -> Color:
        """
        Get: GridLineColor(self: DataGrid) -> Color
        Set: GridLineColor(self: DataGrid) = value
        """
        ...

    @property
    def GridLineStyle(self): # -> DataGridLineStyle
        """
        Get: GridLineStyle(self: DataGrid) -> DataGridLineStyle
        Set: GridLineStyle(self: DataGrid) = value
        """
        ...

    @property
    def HeaderBackColor(self) -> Color:
        """
        Get: HeaderBackColor(self: DataGrid) -> Color
        Set: HeaderBackColor(self: DataGrid) = value
        """
        ...

    @property
    def HeaderFont(self) -> Font:
        """
        Get: HeaderFont(self: DataGrid) -> Font
        Set: HeaderFont(self: DataGrid) = value
        """
        ...

    @property
    def HeaderForeColor(self) -> Color:
        """
        Get: HeaderForeColor(self: DataGrid) -> Color
        Set: HeaderForeColor(self: DataGrid) = value
        """
        ...

    @property
    def HorizScrollBar(self):
        ...

    @property
    def LinkColor(self) -> Color:
        """
        Get: LinkColor(self: DataGrid) -> Color
        Set: LinkColor(self: DataGrid) = value
        """
        ...

    @property
    def LinkHoverColor(self) -> Color:
        """
        Get: LinkHoverColor(self: DataGrid) -> Color
        Set: LinkHoverColor(self: DataGrid) = value
        """
        ...

    @property
    def ListManager(self):
        ...

    @property
    def ParentRowsBackColor(self) -> Color:
        """
        Get: ParentRowsBackColor(self: DataGrid) -> Color
        Set: ParentRowsBackColor(self: DataGrid) = value
        """
        ...

    @property
    def ParentRowsForeColor(self) -> Color:
        """
        Get: ParentRowsForeColor(self: DataGrid) -> Color
        Set: ParentRowsForeColor(self: DataGrid) = value
        """
        ...

    @property
    def ParentRowsLabelStyle(self): # -> DataGridParentRowsLabelStyle
        """
        Get: ParentRowsLabelStyle(self: DataGrid) -> DataGridParentRowsLabelStyle
        Set: ParentRowsLabelStyle(self: DataGrid) = value
        """
        ...

    @property
    def ParentRowsVisible(self) -> bool:
        """
        Get: ParentRowsVisible(self: DataGrid) -> bool
        Set: ParentRowsVisible(self: DataGrid) = value
        """
        ...

    @property
    def PreferredColumnWidth(self) -> int:
        """
        Get: PreferredColumnWidth(self: DataGrid) -> int
        Set: PreferredColumnWidth(self: DataGrid) = value
        """
        ...

    @property
    def PreferredRowHeight(self) -> int:
        """
        Get: PreferredRowHeight(self: DataGrid) -> int
        Set: PreferredRowHeight(self: DataGrid) = value
        """
        ...

    @property
    def ReadOnly(self) -> bool:
        """
        Get: ReadOnly(self: DataGrid) -> bool
        Set: ReadOnly(self: DataGrid) = value
        """
        ...

    @property
    def RowHeadersVisible(self) -> bool:
        """
        Get: RowHeadersVisible(self: DataGrid) -> bool
        Set: RowHeadersVisible(self: DataGrid) = value
        """
        ...

    @property
    def RowHeaderWidth(self) -> int:
        """
        Get: RowHeaderWidth(self: DataGrid) -> int
        Set: RowHeaderWidth(self: DataGrid) = value
        """
        ...

    @property
    def SelectionBackColor(self) -> Color:
        """
        Get: SelectionBackColor(self: DataGrid) -> Color
        Set: SelectionBackColor(self: DataGrid) = value
        """
        ...

    @property
    def SelectionForeColor(self) -> Color:
        """
        Get: SelectionForeColor(self: DataGrid) -> Color
        Set: SelectionForeColor(self: DataGrid) = value
        """
        ...

    @property
    def TableStyles(self): # -> GridTableStylesCollection
        """ Get: TableStyles(self: DataGrid) -> GridTableStylesCollection """
        ...

    @property
    def VertScrollBar(self):
        ...

    @property
    def VisibleColumnCount(self) -> int:
        """ Get: VisibleColumnCount(self: DataGrid) -> int """
        ...

    @property
    def VisibleRowCount(self) -> int:
        """ Get: VisibleRowCount(self: DataGrid) -> int """
        ...


    def CancelEditing(self, *args): #cannot find CLR method
        """ CancelEditing(self: DataGrid) """
        ...

    def Collapse(self, row:int): # -> 
        """ Collapse(self: DataGrid, row: int) """
        ...

    def ColumnStartedEditing(self, *args): #cannot find CLR method
        """ ColumnStartedEditing(self: DataGrid, editingControl: Control)ColumnStartedEditing(self: DataGrid, bounds: Rectangle) """
        ...

    def CreateGridColumn(self, *args): #cannot find CLR method
        """
        CreateGridColumn(self: DataGrid, prop: PropertyDescriptor, isDefault: bool) -> DataGridColumnStyle
        CreateGridColumn(self: DataGrid, prop: PropertyDescriptor) -> DataGridColumnStyle
        """
        ...

    def Expand(self, row:int): # -> 
        """ Expand(self: DataGrid, row: int) """
        ...

    def GetCellBounds(self, *__args) -> Rectangle: # Not found arg types: {'*__args': 'DataGridCell'}
        """
        GetCellBounds(self: DataGrid, row: int, col: int) -> Rectangle
        GetCellBounds(self: DataGrid, dgc: DataGridCell) -> Rectangle
        """
        ...

    def GetCurrentCellBounds(self) -> Rectangle:
        """ GetCurrentCellBounds(self: DataGrid) -> Rectangle """
        ...

    def GetOutputTextDelimiter(self, *args): #cannot find CLR method
        """ GetOutputTextDelimiter(self: DataGrid) -> str """
        ...

    def GridHScrolled(self, *args): #cannot find CLR method
        """ GridHScrolled(self: DataGrid, sender: object, se: ScrollEventArgs) """
        ...

    def GridVScrolled(self, *args): #cannot find CLR method
        """ GridVScrolled(self: DataGrid, sender: object, se: ScrollEventArgs) """
        ...

    def HitTest(self, *__args:Point) -> HitTestInfo:
        """
        HitTest(self: DataGrid, x: int, y: int) -> HitTestInfo
        HitTest(self: DataGrid, position: Point) -> HitTestInfo
        """
        ...

    def HitTestInfo(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def HitTestType(self, *args): #cannot find CLR method
        """ enum (flags) HitTestType, values: Caption (32), Cell (1), ColumnHeader (2), ColumnResize (8), None (0), ParentRows (64), RowHeader (4), RowResize (16) """
        ...

    def IsExpanded(self, rowNumber:int) -> bool:
        """ IsExpanded(self: DataGrid, rowNumber: int) -> bool """
        ...

    def IsSelected(self, row:int) -> bool:
        """ IsSelected(self: DataGrid, row: int) -> bool """
        ...

    def NavigateBack(self): # -> 
        """ NavigateBack(self: DataGrid) """
        ...

    def NavigateTo(self, rowNumber:int, relationName:str): # -> 
        """ NavigateTo(self: DataGrid, rowNumber: int, relationName: str) """
        ...

    def OnAllowNavigationChanged(self, *args): #cannot find CLR method
        """ OnAllowNavigationChanged(self: DataGrid, e: EventArgs) """
        ...

    def OnBackButtonClicked(self, *args): #cannot find CLR method
        """ OnBackButtonClicked(self: DataGrid, sender: object, e: EventArgs) """
        ...

    def OnBackgroundColorChanged(self, *args): #cannot find CLR method
        """ OnBackgroundColorChanged(self: DataGrid, e: EventArgs) """
        ...

    def OnBorderStyleChanged(self, *args): #cannot find CLR method
        """ OnBorderStyleChanged(self: DataGrid, e: EventArgs) """
        ...

    def OnCaptionVisibleChanged(self, *args): #cannot find CLR method
        """ OnCaptionVisibleChanged(self: DataGrid, e: EventArgs) """
        ...

    def OnCurrentCellChanged(self, *args): #cannot find CLR method
        """ OnCurrentCellChanged(self: DataGrid, e: EventArgs) """
        ...

    def OnDataSourceChanged(self, *args): #cannot find CLR method
        """ OnDataSourceChanged(self: DataGrid, e: EventArgs) """
        ...

    def OnFlatModeChanged(self, *args): #cannot find CLR method
        """ OnFlatModeChanged(self: DataGrid, e: EventArgs) """
        ...

    def OnNavigate(self, *args): #cannot find CLR method
        """ OnNavigate(self: DataGrid, e: NavigateEventArgs) """
        ...

    def OnParentRowsLabelStyleChanged(self, *args): #cannot find CLR method
        """ OnParentRowsLabelStyleChanged(self: DataGrid, e: EventArgs) """
        ...

    def OnParentRowsVisibleChanged(self, *args): #cannot find CLR method
        """ OnParentRowsVisibleChanged(self: DataGrid, e: EventArgs) """
        ...

    def OnReadOnlyChanged(self, *args): #cannot find CLR method
        """ OnReadOnlyChanged(self: DataGrid, e: EventArgs) """
        ...

    def OnRowHeaderClick(self, *args): #cannot find CLR method
        """ OnRowHeaderClick(self: DataGrid, e: EventArgs) """
        ...

    def OnScroll(self, *args): #cannot find CLR method
        """ OnScroll(self: DataGrid, e: EventArgs) """
        ...

    def OnShowParentDetailsButtonClicked(self, *args): #cannot find CLR method
        """ OnShowParentDetailsButtonClicked(self: DataGrid, sender: object, e: EventArgs) """
        ...

    def ProcessGridKey(self, *args): #cannot find CLR method
        """ ProcessGridKey(self: DataGrid, ke: KeyEventArgs) -> bool """
        ...

    def ProcessTabKey(self, *args): #cannot find CLR method
        """ ProcessTabKey(self: DataGrid, keyData: Keys) -> bool """
        ...

    def ResetAlternatingBackColor(self): # -> 
        """ ResetAlternatingBackColor(self: DataGrid) """
        ...

    def ResetGridLineColor(self): # -> 
        """ ResetGridLineColor(self: DataGrid) """
        ...

    def ResetHeaderBackColor(self): # -> 
        """ ResetHeaderBackColor(self: DataGrid) """
        ...

    def ResetHeaderFont(self): # -> 
        """ ResetHeaderFont(self: DataGrid) """
        ...

    def ResetHeaderForeColor(self): # -> 
        """ ResetHeaderForeColor(self: DataGrid) """
        ...

    def ResetLinkColor(self): # -> 
        """ ResetLinkColor(self: DataGrid) """
        ...

    def ResetLinkHoverColor(self): # -> 
        """ ResetLinkHoverColor(self: DataGrid) """
        ...

    def ResetSelection(self, *args): #cannot find CLR method
        """ ResetSelection(self: DataGrid) """
        ...

    def ResetSelectionBackColor(self): # -> 
        """ ResetSelectionBackColor(self: DataGrid) """
        ...

    def ResetSelectionForeColor(self): # -> 
        """ ResetSelectionForeColor(self: DataGrid) """
        ...

    def SetDataBinding(self, dataSource:object, dataMember:str): # -> 
        """ SetDataBinding(self: DataGrid, dataSource: object, dataMember: str) """
        ...

    def ShouldSerializeAlternatingBackColor(self, *args): #cannot find CLR method
        """ ShouldSerializeAlternatingBackColor(self: DataGrid) -> bool """
        ...

    def ShouldSerializeBackgroundColor(self, *args): #cannot find CLR method
        """ ShouldSerializeBackgroundColor(self: DataGrid) -> bool """
        ...

    def ShouldSerializeCaptionBackColor(self, *args): #cannot find CLR method
        """ ShouldSerializeCaptionBackColor(self: DataGrid) -> bool """
        ...

    def ShouldSerializeCaptionForeColor(self, *args): #cannot find CLR method
        """ ShouldSerializeCaptionForeColor(self: DataGrid) -> bool """
        ...

    def ShouldSerializeGridLineColor(self, *args): #cannot find CLR method
        """ ShouldSerializeGridLineColor(self: DataGrid) -> bool """
        ...

    def ShouldSerializeHeaderBackColor(self, *args): #cannot find CLR method
        """ ShouldSerializeHeaderBackColor(self: DataGrid) -> bool """
        ...

    def ShouldSerializeHeaderFont(self, *args): #cannot find CLR method
        """ ShouldSerializeHeaderFont(self: DataGrid) -> bool """
        ...

    def ShouldSerializeHeaderForeColor(self, *args): #cannot find CLR method
        """ ShouldSerializeHeaderForeColor(self: DataGrid) -> bool """
        ...

    def ShouldSerializeLinkHoverColor(self, *args): #cannot find CLR method
        """ ShouldSerializeLinkHoverColor(self: DataGrid) -> bool """
        ...

    def ShouldSerializeParentRowsBackColor(self, *args): #cannot find CLR method
        """ ShouldSerializeParentRowsBackColor(self: DataGrid) -> bool """
        ...

    def ShouldSerializeParentRowsForeColor(self, *args): #cannot find CLR method
        """ ShouldSerializeParentRowsForeColor(self: DataGrid) -> bool """
        ...

    def ShouldSerializePreferredRowHeight(self, *args): #cannot find CLR method
        """ ShouldSerializePreferredRowHeight(self: DataGrid) -> bool """
        ...

    def ShouldSerializeSelectionBackColor(self, *args): #cannot find CLR method
        """ ShouldSerializeSelectionBackColor(self: DataGrid) -> bool """
        ...

    def ShouldSerializeSelectionForeColor(self, *args): #cannot find CLR method
        """ ShouldSerializeSelectionForeColor(self: DataGrid) -> bool """
        ...

    def SubObjectsSiteChange(self, site:bool): # -> 
        """ SubObjectsSiteChange(self: DataGrid, site: bool) """
        ...

    def UnSelect(self, row:int): # -> 
        """ UnSelect(self: DataGrid, row: int) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]=x.__setitem__(i, y) <==> x[i]= """
        ...

    AllowNavigationChanged = ...
    BackButtonClick = ...
    BackgroundColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    BorderStyleChanged = ...
    CaptionVisibleChanged = ...
    CurrentCellChanged = ...
    CursorChanged = ...
    DataSourceChanged = ...
    FlatModeChanged = ...
    Navigate = ...
    ParentRowsLabelStyleChanged = ...
    ParentRowsVisibleChanged = ...
    ReadOnlyChanged = ...
    RowHeaderClick = ...
    Scroll = ...
    ShowParentDetailsButtonClick = ...
    TextChanged = ...


class IDataGridColumnStyleEditingNotificationService: # skipped bases: <type 'object'>
    """ no doc """
    def ColumnStartedEditing(self, editingControl:Control): # -> 
        """ ColumnStartedEditing(self: IDataGridColumnStyleEditingNotificationService, editingControl: Control) """
        ...


class DataGridColumnStyle(IDataGridColumnStyleEditingNotificationService, Component): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """
    DataGridColumnStyle()
    DataGridColumnStyle(prop: PropertyDescriptor)
    """
    @property
    def Alignment(self): # -> HorizontalAlignment
        """
        Get: Alignment(self: DataGridColumnStyle) -> HorizontalAlignment
        Set: Alignment(self: DataGridColumnStyle) = value
        """
        ...

    @property
    def DataGridTableStyle(self): # -> DataGridTableStyle
        """ Get: DataGridTableStyle(self: DataGridColumnStyle) -> DataGridTableStyle """
        ...

    @property
    def FontHeight(self):
        ...

    @property
    def HeaderAccessibleObject(self) -> AccessibleObject:
        """ Get: HeaderAccessibleObject(self: DataGridColumnStyle) -> AccessibleObject """
        ...

    @property
    def HeaderText(self) -> str:
        """
        Get: HeaderText(self: DataGridColumnStyle) -> str
        Set: HeaderText(self: DataGridColumnStyle) = value
        """
        ...

    @property
    def MappingName(self) -> str:
        """
        Get: MappingName(self: DataGridColumnStyle) -> str
        Set: MappingName(self: DataGridColumnStyle) = value
        """
        ...

    @property
    def NullText(self) -> str:
        """
        Get: NullText(self: DataGridColumnStyle) -> str
        Set: NullText(self: DataGridColumnStyle) = value
        """
        ...

    @property
    def PropertyDescriptor(self) -> PropertyDescriptor:
        """
        Get: PropertyDescriptor(self: DataGridColumnStyle) -> PropertyDescriptor
        Set: PropertyDescriptor(self: DataGridColumnStyle) = value
        """
        ...

    @property
    def ReadOnly(self) -> bool:
        """
        Get: ReadOnly(self: DataGridColumnStyle) -> bool
        Set: ReadOnly(self: DataGridColumnStyle) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: DataGridColumnStyle) -> int
        Set: Width(self: DataGridColumnStyle) = value
        """
        ...


    def Abort(self, *args): #cannot find CLR method
        """ Abort(self: DataGridColumnStyle, rowNum: int) """
        ...

    def BeginUpdate(self, *args): #cannot find CLR method
        """ BeginUpdate(self: DataGridColumnStyle) """
        ...

    def CheckValidDataSource(self, *args): #cannot find CLR method
        """ CheckValidDataSource(self: DataGridColumnStyle, value: CurrencyManager) """
        ...

    def Commit(self, *args): #cannot find CLR method
        """ Commit(self: DataGridColumnStyle, dataSource: CurrencyManager, rowNum: int) -> bool """
        ...

    def CompModSwitches(self, *args): #cannot find CLR method
        """ CompModSwitches() """
        ...

    def ConcedeFocus(self, *args): #cannot find CLR method
        """ ConcedeFocus(self: DataGridColumnStyle) """
        ...

    def CreateHeaderAccessibleObject(self, *args): #cannot find CLR method
        """ CreateHeaderAccessibleObject(self: DataGridColumnStyle) -> AccessibleObject """
        ...

    def DataGridColumnHeaderAccessibleObject(self, *args): #cannot find CLR method
        """
        DataGridColumnHeaderAccessibleObject(owner: DataGridColumnStyle)
        DataGridColumnHeaderAccessibleObject()
        """
        ...

    def Edit(self, *args): #cannot find CLR method
        """ Edit(self: DataGridColumnStyle, source: CurrencyManager, rowNum: int, bounds: Rectangle, readOnly: bool)Edit(self: DataGridColumnStyle, source: CurrencyManager, rowNum: int, bounds: Rectangle, readOnly: bool, displayText: str)Edit(self: DataGridColumnStyle, source: CurrencyManager, rowNum: int, bounds: Rectangle, readOnly: bool, displayText: str, cellIsVisible: bool) """
        ...

    def EndUpdate(self, *args): #cannot find CLR method
        """ EndUpdate(self: DataGridColumnStyle) """
        ...

    def EnterNullValue(self, *args): #cannot find CLR method
        """ EnterNullValue(self: DataGridColumnStyle) """
        ...

    def GetColumnValueAtRow(self, *args): #cannot find CLR method
        """ GetColumnValueAtRow(self: DataGridColumnStyle, source: CurrencyManager, rowNum: int) -> object """
        ...

    def GetMinimumHeight(self, *args): #cannot find CLR method
        """ GetMinimumHeight(self: DataGridColumnStyle) -> int """
        ...

    def GetPreferredHeight(self, *args): #cannot find CLR method
        """ GetPreferredHeight(self: DataGridColumnStyle, g: Graphics, value: object) -> int """
        ...

    def GetPreferredSize(self, *args): #cannot find CLR method
        """ GetPreferredSize(self: DataGridColumnStyle, g: Graphics, value: object) -> Size """
        ...

    def Invalidate(self, *args): #cannot find CLR method
        """ Invalidate(self: DataGridColumnStyle) """
        ...

    def Paint(self, *args): #cannot find CLR method
        """ Paint(self: DataGridColumnStyle, g: Graphics, bounds: Rectangle, source: CurrencyManager, rowNum: int, backBrush: Brush, foreBrush: Brush, alignToRight: bool)Paint(self: DataGridColumnStyle, g: Graphics, bounds: Rectangle, source: CurrencyManager, rowNum: int)Paint(self: DataGridColumnStyle, g: Graphics, bounds: Rectangle, source: CurrencyManager, rowNum: int, alignToRight: bool) """
        ...

    def ReleaseHostedControl(self, *args): #cannot find CLR method
        """ ReleaseHostedControl(self: DataGridColumnStyle) """
        ...

    def ResetHeaderText(self): # -> 
        """ ResetHeaderText(self: DataGridColumnStyle) """
        ...

    def SetColumnValueAtRow(self, *args): #cannot find CLR method
        """ SetColumnValueAtRow(self: DataGridColumnStyle, source: CurrencyManager, rowNum: int, value: object) """
        ...

    def SetDataGrid(self, *args): #cannot find CLR method
        """ SetDataGrid(self: DataGridColumnStyle, value: DataGrid) """
        ...

    def SetDataGridInColumn(self, *args): #cannot find CLR method
        """ SetDataGridInColumn(self: DataGridColumnStyle, value: DataGrid) """
        ...

    def UpdateUI(self, *args): #cannot find CLR method
        """ UpdateUI(self: DataGridColumnStyle, source: CurrencyManager, rowNum: int, displayText: str) """
        ...

    def __new__(cls, prop:PropertyDescriptor = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, prop: PropertyDescriptor)
        """
        ...

    AlignmentChanged = ...
    FontChanged = ...
    HeaderTextChanged = ...
    MappingNameChanged = ...
    NullTextChanged = ...
    PropertyDescriptorChanged = ...
    ReadOnlyChanged = ...
    WidthChanged = ...


class DataGridBoolColumn(DataGridColumnStyle): # skipped bases: <type 'IDisposable'>, <type 'IDataGridColumnStyleEditingNotificationService'>, <type 'IComponent'>, <type 'object'>
    """
    DataGridBoolColumn()
    DataGridBoolColumn(prop: PropertyDescriptor)
    DataGridBoolColumn(prop: PropertyDescriptor, isDefault: bool)
    """
    @property
    def AllowNull(self) -> bool:
        """
        Get: AllowNull(self: DataGridBoolColumn) -> bool
        Set: AllowNull(self: DataGridBoolColumn) = value
        """
        ...

    @property
    def FalseValue(self) -> object:
        """
        Get: FalseValue(self: DataGridBoolColumn) -> object
        Set: FalseValue(self: DataGridBoolColumn) = value
        """
        ...

    @property
    def NullValue(self) -> object:
        """
        Get: NullValue(self: DataGridBoolColumn) -> object
        Set: NullValue(self: DataGridBoolColumn) = value
        """
        ...

    @property
    def TrueValue(self) -> object:
        """
        Get: TrueValue(self: DataGridBoolColumn) -> object
        Set: TrueValue(self: DataGridBoolColumn) = value
        """
        ...


    AllowNullChanged = ...
    FalseValueChanged = ...
    TrueValueChanged = ...


class DataGridCell: # skipped bases: <type 'object'>, <type 'object'>
    """ DataGridCell(r: int, c: int) """
    @property
    def ColumnNumber(self) -> int:
        """
        Get: ColumnNumber(self: DataGridCell) -> int
        Set: ColumnNumber(self: DataGridCell) = value
        """
        ...

    @property
    def RowNumber(self) -> int:
        """
        Get: RowNumber(self: DataGridCell) -> int
        Set: RowNumber(self: DataGridCell) = value
        """
        ...


    def Equals(self, o:object) -> bool:
        """ Equals(self: DataGridCell, o: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: DataGridCell) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: DataGridCell) -> str """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class DataGridLineStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridLineStyle, values: None (0), Solid (1) """
    Solid: DataGridLineStyle = ...
    value__ = ...


class DataGridParentRowsLabelStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridParentRowsLabelStyle, values: Both (3), ColumnName (2), None (0), TableName (1) """
    Both: DataGridParentRowsLabelStyle = ...
    ColumnName: DataGridParentRowsLabelStyle = ...
    TableName: DataGridParentRowsLabelStyle = ...
    value__ = ...


class DataGridPreferredColumnWidthTypeConverter(TypeConverter): # skipped bases: <type 'object'>
    """ DataGridPreferredColumnWidthTypeConverter() """
    pass

class DataGridTableStyle(IDataGridEditingService, Component): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """
    DataGridTableStyle(isDefaultTableStyle: bool)
    DataGridTableStyle()
    DataGridTableStyle(listManager: CurrencyManager)
    """
    @property
    def AllowSorting(self) -> bool:
        """
        Get: AllowSorting(self: DataGridTableStyle) -> bool
        Set: AllowSorting(self: DataGridTableStyle) = value
        """
        ...

    @property
    def AlternatingBackColor(self) -> Color:
        """
        Get: AlternatingBackColor(self: DataGridTableStyle) -> Color
        Set: AlternatingBackColor(self: DataGridTableStyle) = value
        """
        ...

    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: DataGridTableStyle) -> Color
        Set: BackColor(self: DataGridTableStyle) = value
        """
        ...

    @property
    def ColumnHeadersVisible(self) -> bool:
        """
        Get: ColumnHeadersVisible(self: DataGridTableStyle) -> bool
        Set: ColumnHeadersVisible(self: DataGridTableStyle) = value
        """
        ...

    @property
    def DataGrid(self) -> DataGrid:
        """
        Get: DataGrid(self: DataGridTableStyle) -> DataGrid
        Set: DataGrid(self: DataGridTableStyle) = value
        """
        ...

    @property
    def ForeColor(self) -> Color:
        """
        Get: ForeColor(self: DataGridTableStyle) -> Color
        Set: ForeColor(self: DataGridTableStyle) = value
        """
        ...

    @property
    def GridColumnStyles(self): # -> GridColumnStylesCollection
        """ Get: GridColumnStyles(self: DataGridTableStyle) -> GridColumnStylesCollection """
        ...

    @property
    def GridLineColor(self) -> Color:
        """
        Get: GridLineColor(self: DataGridTableStyle) -> Color
        Set: GridLineColor(self: DataGridTableStyle) = value
        """
        ...

    @property
    def GridLineStyle(self) -> DataGridLineStyle:
        """
        Get: GridLineStyle(self: DataGridTableStyle) -> DataGridLineStyle
        Set: GridLineStyle(self: DataGridTableStyle) = value
        """
        ...

    @property
    def HeaderBackColor(self) -> Color:
        """
        Get: HeaderBackColor(self: DataGridTableStyle) -> Color
        Set: HeaderBackColor(self: DataGridTableStyle) = value
        """
        ...

    @property
    def HeaderFont(self) -> Font:
        """
        Get: HeaderFont(self: DataGridTableStyle) -> Font
        Set: HeaderFont(self: DataGridTableStyle) = value
        """
        ...

    @property
    def HeaderForeColor(self) -> Color:
        """
        Get: HeaderForeColor(self: DataGridTableStyle) -> Color
        Set: HeaderForeColor(self: DataGridTableStyle) = value
        """
        ...

    @property
    def LinkColor(self) -> Color:
        """
        Get: LinkColor(self: DataGridTableStyle) -> Color
        Set: LinkColor(self: DataGridTableStyle) = value
        """
        ...

    @property
    def LinkHoverColor(self) -> Color:
        """
        Get: LinkHoverColor(self: DataGridTableStyle) -> Color
        Set: LinkHoverColor(self: DataGridTableStyle) = value
        """
        ...

    @property
    def MappingName(self) -> str:
        """
        Get: MappingName(self: DataGridTableStyle) -> str
        Set: MappingName(self: DataGridTableStyle) = value
        """
        ...

    @property
    def PreferredColumnWidth(self) -> int:
        """
        Get: PreferredColumnWidth(self: DataGridTableStyle) -> int
        Set: PreferredColumnWidth(self: DataGridTableStyle) = value
        """
        ...

    @property
    def PreferredRowHeight(self) -> int:
        """
        Get: PreferredRowHeight(self: DataGridTableStyle) -> int
        Set: PreferredRowHeight(self: DataGridTableStyle) = value
        """
        ...

    @property
    def ReadOnly(self) -> bool:
        """
        Get: ReadOnly(self: DataGridTableStyle) -> bool
        Set: ReadOnly(self: DataGridTableStyle) = value
        """
        ...

    @property
    def RowHeadersVisible(self) -> bool:
        """
        Get: RowHeadersVisible(self: DataGridTableStyle) -> bool
        Set: RowHeadersVisible(self: DataGridTableStyle) = value
        """
        ...

    @property
    def RowHeaderWidth(self) -> int:
        """
        Get: RowHeaderWidth(self: DataGridTableStyle) -> int
        Set: RowHeaderWidth(self: DataGridTableStyle) = value
        """
        ...

    @property
    def SelectionBackColor(self) -> Color:
        """
        Get: SelectionBackColor(self: DataGridTableStyle) -> Color
        Set: SelectionBackColor(self: DataGridTableStyle) = value
        """
        ...

    @property
    def SelectionForeColor(self) -> Color:
        """
        Get: SelectionForeColor(self: DataGridTableStyle) -> Color
        Set: SelectionForeColor(self: DataGridTableStyle) = value
        """
        ...


    def CreateGridColumn(self, *args): #cannot find CLR method
        """
        CreateGridColumn(self: DataGridTableStyle, prop: PropertyDescriptor) -> DataGridColumnStyle
        CreateGridColumn(self: DataGridTableStyle, prop: PropertyDescriptor, isDefault: bool) -> DataGridColumnStyle
        """
        ...

    def OnAllowSortingChanged(self, *args): #cannot find CLR method
        """ OnAllowSortingChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnAlternatingBackColorChanged(self, *args): #cannot find CLR method
        """ OnAlternatingBackColorChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnBackColorChanged(self, *args): #cannot find CLR method
        """ OnBackColorChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnColumnHeadersVisibleChanged(self, *args): #cannot find CLR method
        """ OnColumnHeadersVisibleChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnForeColorChanged(self, *args): #cannot find CLR method
        """ OnForeColorChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnGridLineColorChanged(self, *args): #cannot find CLR method
        """ OnGridLineColorChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnGridLineStyleChanged(self, *args): #cannot find CLR method
        """ OnGridLineStyleChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnHeaderBackColorChanged(self, *args): #cannot find CLR method
        """ OnHeaderBackColorChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnHeaderFontChanged(self, *args): #cannot find CLR method
        """ OnHeaderFontChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnHeaderForeColorChanged(self, *args): #cannot find CLR method
        """ OnHeaderForeColorChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnLinkColorChanged(self, *args): #cannot find CLR method
        """ OnLinkColorChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnLinkHoverColorChanged(self, *args): #cannot find CLR method
        """ OnLinkHoverColorChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnMappingNameChanged(self, *args): #cannot find CLR method
        """ OnMappingNameChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnPreferredColumnWidthChanged(self, *args): #cannot find CLR method
        """ OnPreferredColumnWidthChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnPreferredRowHeightChanged(self, *args): #cannot find CLR method
        """ OnPreferredRowHeightChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnReadOnlyChanged(self, *args): #cannot find CLR method
        """ OnReadOnlyChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnRowHeadersVisibleChanged(self, *args): #cannot find CLR method
        """ OnRowHeadersVisibleChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnRowHeaderWidthChanged(self, *args): #cannot find CLR method
        """ OnRowHeaderWidthChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnSelectionBackColorChanged(self, *args): #cannot find CLR method
        """ OnSelectionBackColorChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def OnSelectionForeColorChanged(self, *args): #cannot find CLR method
        """ OnSelectionForeColorChanged(self: DataGridTableStyle, e: EventArgs) """
        ...

    def ResetAlternatingBackColor(self): # -> 
        """ ResetAlternatingBackColor(self: DataGridTableStyle) """
        ...

    def ResetBackColor(self): # -> 
        """ ResetBackColor(self: DataGridTableStyle) """
        ...

    def ResetForeColor(self): # -> 
        """ ResetForeColor(self: DataGridTableStyle) """
        ...

    def ResetGridLineColor(self): # -> 
        """ ResetGridLineColor(self: DataGridTableStyle) """
        ...

    def ResetHeaderBackColor(self): # -> 
        """ ResetHeaderBackColor(self: DataGridTableStyle) """
        ...

    def ResetHeaderFont(self): # -> 
        """ ResetHeaderFont(self: DataGridTableStyle) """
        ...

    def ResetHeaderForeColor(self): # -> 
        """ ResetHeaderForeColor(self: DataGridTableStyle) """
        ...

    def ResetLinkColor(self): # -> 
        """ ResetLinkColor(self: DataGridTableStyle) """
        ...

    def ResetLinkHoverColor(self): # -> 
        """ ResetLinkHoverColor(self: DataGridTableStyle) """
        ...

    def ResetSelectionBackColor(self): # -> 
        """ ResetSelectionBackColor(self: DataGridTableStyle) """
        ...

    def ResetSelectionForeColor(self): # -> 
        """ ResetSelectionForeColor(self: DataGridTableStyle) """
        ...

    def ShouldSerializeAlternatingBackColor(self, *args): #cannot find CLR method
        """ ShouldSerializeAlternatingBackColor(self: DataGridTableStyle) -> bool """
        ...

    def ShouldSerializeBackColor(self, *args): #cannot find CLR method
        """ ShouldSerializeBackColor(self: DataGridTableStyle) -> bool """
        ...

    def ShouldSerializeForeColor(self, *args): #cannot find CLR method
        """ ShouldSerializeForeColor(self: DataGridTableStyle) -> bool """
        ...

    def ShouldSerializeGridLineColor(self, *args): #cannot find CLR method
        """ ShouldSerializeGridLineColor(self: DataGridTableStyle) -> bool """
        ...

    def ShouldSerializeHeaderBackColor(self, *args): #cannot find CLR method
        """ ShouldSerializeHeaderBackColor(self: DataGridTableStyle) -> bool """
        ...

    def ShouldSerializeHeaderForeColor(self, *args): #cannot find CLR method
        """ ShouldSerializeHeaderForeColor(self: DataGridTableStyle) -> bool """
        ...

    def ShouldSerializeLinkColor(self, *args): #cannot find CLR method
        """ ShouldSerializeLinkColor(self: DataGridTableStyle) -> bool """
        ...

    def ShouldSerializeLinkHoverColor(self, *args): #cannot find CLR method
        """ ShouldSerializeLinkHoverColor(self: DataGridTableStyle) -> bool """
        ...

    def ShouldSerializePreferredRowHeight(self, *args): #cannot find CLR method
        """ ShouldSerializePreferredRowHeight(self: DataGridTableStyle) -> bool """
        ...

    def ShouldSerializeSelectionBackColor(self, *args): #cannot find CLR method
        """ ShouldSerializeSelectionBackColor(self: DataGridTableStyle) -> bool """
        ...

    def ShouldSerializeSelectionForeColor(self, *args): #cannot find CLR method
        """ ShouldSerializeSelectionForeColor(self: DataGridTableStyle) -> bool """
        ...

    def __new__(cls, *__args:bool) -> Self:
        """
        __new__(cls: type, isDefaultTableStyle: bool)
        __new__(cls: type)
        __new__(cls: type, listManager: CurrencyManager)
        """
        ...

    AllowSortingChanged = ...
    AlternatingBackColorChanged = ...
    BackColorChanged = ...
    ColumnHeadersVisibleChanged = ...
    DefaultTableStyle: DataGridTableStyle = ...
    ForeColorChanged = ...
    GridLineColorChanged = ...
    GridLineStyleChanged = ...
    HeaderBackColorChanged = ...
    HeaderFontChanged = ...
    HeaderForeColorChanged = ...
    LinkColorChanged = ...
    LinkHoverColorChanged = ...
    MappingNameChanged = ...
    PreferredColumnWidthChanged = ...
    PreferredRowHeightChanged = ...
    ReadOnlyChanged = ...
    RowHeadersVisibleChanged = ...
    RowHeaderWidthChanged = ...
    SelectionBackColorChanged = ...
    SelectionForeColorChanged = ...


class TextBoxBase(Control): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ no doc """
    @property
    def AcceptsTab(self) -> bool:
        """
        Get: AcceptsTab(self: TextBoxBase) -> bool
        Set: AcceptsTab(self: TextBoxBase) = value
        """
        ...

    @property
    def BorderStyle(self) -> BorderStyle:
        """
        Get: BorderStyle(self: TextBoxBase) -> BorderStyle
        Set: BorderStyle(self: TextBoxBase) = value
        """
        ...

    @property
    def CanUndo(self) -> bool:
        """ Get: CanUndo(self: TextBoxBase) -> bool """
        ...

    @property
    def HideSelection(self) -> bool:
        """
        Get: HideSelection(self: TextBoxBase) -> bool
        Set: HideSelection(self: TextBoxBase) = value
        """
        ...

    @property
    def Lines(self) -> Array:
        """
        Get: Lines(self: TextBoxBase) -> Array[str]
        Set: Lines(self: TextBoxBase) = value
        """
        ...

    @property
    def MaxLength(self) -> int:
        """
        Get: MaxLength(self: TextBoxBase) -> int
        Set: MaxLength(self: TextBoxBase) = value
        """
        ...

    @property
    def Modified(self) -> bool:
        """
        Get: Modified(self: TextBoxBase) -> bool
        Set: Modified(self: TextBoxBase) = value
        """
        ...

    @property
    def Multiline(self) -> bool:
        """
        Get: Multiline(self: TextBoxBase) -> bool
        Set: Multiline(self: TextBoxBase) = value
        """
        ...

    @property
    def PreferredHeight(self) -> int:
        """ Get: PreferredHeight(self: TextBoxBase) -> int """
        ...

    @property
    def ReadOnly(self) -> bool:
        """
        Get: ReadOnly(self: TextBoxBase) -> bool
        Set: ReadOnly(self: TextBoxBase) = value
        """
        ...

    @property
    def SelectedText(self) -> str:
        """
        Get: SelectedText(self: TextBoxBase) -> str
        Set: SelectedText(self: TextBoxBase) = value
        """
        ...

    @property
    def SelectionLength(self) -> int:
        """
        Get: SelectionLength(self: TextBoxBase) -> int
        Set: SelectionLength(self: TextBoxBase) = value
        """
        ...

    @property
    def SelectionStart(self) -> int:
        """
        Get: SelectionStart(self: TextBoxBase) -> int
        Set: SelectionStart(self: TextBoxBase) = value
        """
        ...

    @property
    def ShortcutsEnabled(self) -> bool:
        """
        Get: ShortcutsEnabled(self: TextBoxBase) -> bool
        Set: ShortcutsEnabled(self: TextBoxBase) = value
        """
        ...

    @property
    def TextLength(self) -> int:
        """ Get: TextLength(self: TextBoxBase) -> int """
        ...

    @property
    def WordWrap(self) -> bool:
        """
        Get: WordWrap(self: TextBoxBase) -> bool
        Set: WordWrap(self: TextBoxBase) = value
        """
        ...


    def AppendText(self, text:str): # -> 
        """ AppendText(self: TextBoxBase, text: str) """
        ...

    def Clear(self): # -> 
        """ Clear(self: TextBoxBase) """
        ...

    def ClearUndo(self): # -> 
        """ ClearUndo(self: TextBoxBase) """
        ...

    def Copy(self): # -> 
        """ Copy(self: TextBoxBase) """
        ...

    def Cut(self): # -> 
        """ Cut(self: TextBoxBase) """
        ...

    def DeselectAll(self): # -> 
        """ DeselectAll(self: TextBoxBase) """
        ...

    def GetCharFromPosition(self, pt:Point) -> Char:
        """ GetCharFromPosition(self: TextBoxBase, pt: Point) -> Char """
        ...

    def GetCharIndexFromPosition(self, pt:Point) -> int:
        """ GetCharIndexFromPosition(self: TextBoxBase, pt: Point) -> int """
        ...

    def GetFirstCharIndexFromLine(self, lineNumber:int) -> int:
        """ GetFirstCharIndexFromLine(self: TextBoxBase, lineNumber: int) -> int """
        ...

    def GetFirstCharIndexOfCurrentLine(self) -> int:
        """ GetFirstCharIndexOfCurrentLine(self: TextBoxBase) -> int """
        ...

    def GetLineFromCharIndex(self, index:int) -> int:
        """ GetLineFromCharIndex(self: TextBoxBase, index: int) -> int """
        ...

    def GetPositionFromCharIndex(self, index:int) -> Point:
        """ GetPositionFromCharIndex(self: TextBoxBase, index: int) -> Point """
        ...

    def OnAcceptsTabChanged(self, *args): #cannot find CLR method
        """ OnAcceptsTabChanged(self: TextBoxBase, e: EventArgs) """
        ...

    def OnBorderStyleChanged(self, *args): #cannot find CLR method
        """ OnBorderStyleChanged(self: TextBoxBase, e: EventArgs) """
        ...

    def OnHideSelectionChanged(self, *args): #cannot find CLR method
        """ OnHideSelectionChanged(self: TextBoxBase, e: EventArgs) """
        ...

    def OnModifiedChanged(self, *args): #cannot find CLR method
        """ OnModifiedChanged(self: TextBoxBase, e: EventArgs) """
        ...

    def OnMultilineChanged(self, *args): #cannot find CLR method
        """ OnMultilineChanged(self: TextBoxBase, e: EventArgs) """
        ...

    def OnReadOnlyChanged(self, *args): #cannot find CLR method
        """ OnReadOnlyChanged(self: TextBoxBase, e: EventArgs) """
        ...

    def Paste(self): # -> 
        """ Paste(self: TextBoxBase) """
        ...

    def ScrollToCaret(self): # -> 
        """ ScrollToCaret(self: TextBoxBase) """
        ...

    def SelectAll(self): # -> 
        """ SelectAll(self: TextBoxBase) """
        ...

    def ToString(self) -> str:
        """ ToString(self: TextBoxBase) -> str """
        ...

    def Undo(self): # -> 
        """ Undo(self: TextBoxBase) """
        ...

    AcceptsTabChanged = ...
    AutoSizeChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    BorderStyleChanged = ...
    Click = ...
    HideSelectionChanged = ...
    ModifiedChanged = ...
    MouseClick = ...
    MultilineChanged = ...
    PaddingChanged = ...
    Paint = ...
    ReadOnlyChanged = ...


class TextBox(TextBoxBase): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'object'>
    """ TextBox() """
    @property
    def AcceptsReturn(self) -> bool:
        """
        Get: AcceptsReturn(self: TextBox) -> bool
        Set: AcceptsReturn(self: TextBox) = value
        """
        ...

    @property
    def AutoCompleteCustomSource(self) -> AutoCompleteStringCollection:
        """
        Get: AutoCompleteCustomSource(self: TextBox) -> AutoCompleteStringCollection
        Set: AutoCompleteCustomSource(self: TextBox) = value
        """
        ...

    @property
    def AutoCompleteMode(self) -> AutoCompleteMode:
        """
        Get: AutoCompleteMode(self: TextBox) -> AutoCompleteMode
        Set: AutoCompleteMode(self: TextBox) = value
        """
        ...

    @property
    def AutoCompleteSource(self) -> AutoCompleteSource:
        """
        Get: AutoCompleteSource(self: TextBox) -> AutoCompleteSource
        Set: AutoCompleteSource(self: TextBox) = value
        """
        ...

    @property
    def CharacterCasing(self) -> CharacterCasing:
        """
        Get: CharacterCasing(self: TextBox) -> CharacterCasing
        Set: CharacterCasing(self: TextBox) = value
        """
        ...

    @property
    def PasswordChar(self) -> Char:
        """
        Get: PasswordChar(self: TextBox) -> Char
        Set: PasswordChar(self: TextBox) = value
        """
        ...

    @property
    def ScrollBars(self) -> ScrollBars:
        """
        Get: ScrollBars(self: TextBox) -> ScrollBars
        Set: ScrollBars(self: TextBox) = value
        """
        ...

    @property
    def TextAlign(self): # -> HorizontalAlignment
        """
        Get: TextAlign(self: TextBox) -> HorizontalAlignment
        Set: TextAlign(self: TextBox) = value
        """
        ...

    @property
    def UseSystemPasswordChar(self) -> bool:
        """
        Get: UseSystemPasswordChar(self: TextBox) -> bool
        Set: UseSystemPasswordChar(self: TextBox) = value
        """
        ...


    def OnTextAlignChanged(self, *args): #cannot find CLR method
        """ OnTextAlignChanged(self: TextBox, e: EventArgs) """
        ...

    TextAlignChanged = ...


class DataGridTextBox(TextBox): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ DataGridTextBox() """
    @property
    def IsInEditOrNavigateMode(self) -> bool:
        """
        Get: IsInEditOrNavigateMode(self: DataGridTextBox) -> bool
        Set: IsInEditOrNavigateMode(self: DataGridTextBox) = value
        """
        ...


    def SetDataGrid(self, parentGrid:DataGrid): # -> 
        """ SetDataGrid(self: DataGridTextBox, parentGrid: DataGrid) """
        ...


class DataGridTextBoxColumn(DataGridColumnStyle): # skipped bases: <type 'IDisposable'>, <type 'IDataGridColumnStyleEditingNotificationService'>, <type 'IComponent'>, <type 'object'>
    """
    DataGridTextBoxColumn()
    DataGridTextBoxColumn(prop: PropertyDescriptor)
    DataGridTextBoxColumn(prop: PropertyDescriptor, format: str)
    DataGridTextBoxColumn(prop: PropertyDescriptor, format: str, isDefault: bool)
    DataGridTextBoxColumn(prop: PropertyDescriptor, isDefault: bool)
    """
    @property
    def Format(self) -> str:
        """
        Get: Format(self: DataGridTextBoxColumn) -> str
        Set: Format(self: DataGridTextBoxColumn) = value
        """
        ...

    @property
    def FormatInfo(self) -> IFormatProvider:
        """
        Get: FormatInfo(self: DataGridTextBoxColumn) -> IFormatProvider
        Set: FormatInfo(self: DataGridTextBoxColumn) = value
        """
        ...

    @property
    def TextBox(self) -> TextBox:
        """ Get: TextBox(self: DataGridTextBoxColumn) -> TextBox """
        ...


    def EndEdit(self, *args): #cannot find CLR method
        """ EndEdit(self: DataGridTextBoxColumn) """
        ...

    def HideEditBox(self, *args): #cannot find CLR method
        """ HideEditBox(self: DataGridTextBoxColumn) """
        ...

    def PaintText(self, *args): #cannot find CLR method
        """ PaintText(self: DataGridTextBoxColumn, g: Graphics, bounds: Rectangle, text: str, alignToRight: bool)PaintText(self: DataGridTextBoxColumn, g: Graphics, textBounds: Rectangle, text: str, backBrush: Brush, foreBrush: Brush, alignToRight: bool) """
        ...


class DataGridView(Control, ISupportInitialize): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ DataGridView() """
    @property
    def AdjustedTopLeftHeaderBorderStyle(self): # -> DataGridViewAdvancedBorderStyle
        """ Get: AdjustedTopLeftHeaderBorderStyle(self: DataGridView) -> DataGridViewAdvancedBorderStyle """
        ...

    @property
    def AdvancedCellBorderStyle(self): # -> DataGridViewAdvancedBorderStyle
        """ Get: AdvancedCellBorderStyle(self: DataGridView) -> DataGridViewAdvancedBorderStyle """
        ...

    @property
    def AdvancedColumnHeadersBorderStyle(self): # -> DataGridViewAdvancedBorderStyle
        """ Get: AdvancedColumnHeadersBorderStyle(self: DataGridView) -> DataGridViewAdvancedBorderStyle """
        ...

    @property
    def AdvancedRowHeadersBorderStyle(self): # -> DataGridViewAdvancedBorderStyle
        """ Get: AdvancedRowHeadersBorderStyle(self: DataGridView) -> DataGridViewAdvancedBorderStyle """
        ...

    @property
    def AllowUserToAddRows(self) -> bool:
        """
        Get: AllowUserToAddRows(self: DataGridView) -> bool
        Set: AllowUserToAddRows(self: DataGridView) = value
        """
        ...

    @property
    def AllowUserToDeleteRows(self) -> bool:
        """
        Get: AllowUserToDeleteRows(self: DataGridView) -> bool
        Set: AllowUserToDeleteRows(self: DataGridView) = value
        """
        ...

    @property
    def AllowUserToOrderColumns(self) -> bool:
        """
        Get: AllowUserToOrderColumns(self: DataGridView) -> bool
        Set: AllowUserToOrderColumns(self: DataGridView) = value
        """
        ...

    @property
    def AllowUserToResizeColumns(self) -> bool:
        """
        Get: AllowUserToResizeColumns(self: DataGridView) -> bool
        Set: AllowUserToResizeColumns(self: DataGridView) = value
        """
        ...

    @property
    def AllowUserToResizeRows(self) -> bool:
        """
        Get: AllowUserToResizeRows(self: DataGridView) -> bool
        Set: AllowUserToResizeRows(self: DataGridView) = value
        """
        ...

    @property
    def AlternatingRowsDefaultCellStyle(self): # -> DataGridViewCellStyle
        """
        Get: AlternatingRowsDefaultCellStyle(self: DataGridView) -> DataGridViewCellStyle
        Set: AlternatingRowsDefaultCellStyle(self: DataGridView) = value
        """
        ...

    @property
    def AutoGenerateColumns(self) -> bool:
        """
        Get: AutoGenerateColumns(self: DataGridView) -> bool
        Set: AutoGenerateColumns(self: DataGridView) = value
        """
        ...

    @property
    def AutoSizeColumnsMode(self): # -> DataGridViewAutoSizeColumnsMode
        """
        Get: AutoSizeColumnsMode(self: DataGridView) -> DataGridViewAutoSizeColumnsMode
        Set: AutoSizeColumnsMode(self: DataGridView) = value
        """
        ...

    @property
    def AutoSizeRowsMode(self): # -> DataGridViewAutoSizeRowsMode
        """
        Get: AutoSizeRowsMode(self: DataGridView) -> DataGridViewAutoSizeRowsMode
        Set: AutoSizeRowsMode(self: DataGridView) = value
        """
        ...

    @property
    def BackgroundColor(self) -> Color:
        """
        Get: BackgroundColor(self: DataGridView) -> Color
        Set: BackgroundColor(self: DataGridView) = value
        """
        ...

    @property
    def BorderStyle(self) -> BorderStyle:
        """
        Get: BorderStyle(self: DataGridView) -> BorderStyle
        Set: BorderStyle(self: DataGridView) = value
        """
        ...

    @property
    def CellBorderStyle(self): # -> DataGridViewCellBorderStyle
        """
        Get: CellBorderStyle(self: DataGridView) -> DataGridViewCellBorderStyle
        Set: CellBorderStyle(self: DataGridView) = value
        """
        ...

    @property
    def ClipboardCopyMode(self): # -> DataGridViewClipboardCopyMode
        """
        Get: ClipboardCopyMode(self: DataGridView) -> DataGridViewClipboardCopyMode
        Set: ClipboardCopyMode(self: DataGridView) = value
        """
        ...

    @property
    def ColumnCount(self) -> int:
        """
        Get: ColumnCount(self: DataGridView) -> int
        Set: ColumnCount(self: DataGridView) = value
        """
        ...

    @property
    def ColumnHeadersBorderStyle(self): # -> DataGridViewHeaderBorderStyle
        """
        Get: ColumnHeadersBorderStyle(self: DataGridView) -> DataGridViewHeaderBorderStyle
        Set: ColumnHeadersBorderStyle(self: DataGridView) = value
        """
        ...

    @property
    def ColumnHeadersDefaultCellStyle(self): # -> DataGridViewCellStyle
        """
        Get: ColumnHeadersDefaultCellStyle(self: DataGridView) -> DataGridViewCellStyle
        Set: ColumnHeadersDefaultCellStyle(self: DataGridView) = value
        """
        ...

    @property
    def ColumnHeadersHeight(self) -> int:
        """
        Get: ColumnHeadersHeight(self: DataGridView) -> int
        Set: ColumnHeadersHeight(self: DataGridView) = value
        """
        ...

    @property
    def ColumnHeadersHeightSizeMode(self): # -> DataGridViewColumnHeadersHeightSizeMode
        """
        Get: ColumnHeadersHeightSizeMode(self: DataGridView) -> DataGridViewColumnHeadersHeightSizeMode
        Set: ColumnHeadersHeightSizeMode(self: DataGridView) = value
        """
        ...

    @property
    def ColumnHeadersVisible(self) -> bool:
        """
        Get: ColumnHeadersVisible(self: DataGridView) -> bool
        Set: ColumnHeadersVisible(self: DataGridView) = value
        """
        ...

    @property
    def Columns(self): # -> DataGridViewColumnCollection
        """ Get: Columns(self: DataGridView) -> DataGridViewColumnCollection """
        ...

    @property
    def CurrentCell(self): # -> DataGridViewCell
        """
        Get: CurrentCell(self: DataGridView) -> DataGridViewCell
        Set: CurrentCell(self: DataGridView) = value
        """
        ...

    @property
    def CurrentCellAddress(self) -> Point:
        """ Get: CurrentCellAddress(self: DataGridView) -> Point """
        ...

    @property
    def CurrentRow(self): # -> DataGridViewRow
        """ Get: CurrentRow(self: DataGridView) -> DataGridViewRow """
        ...

    @property
    def DataMember(self) -> str:
        """
        Get: DataMember(self: DataGridView) -> str
        Set: DataMember(self: DataGridView) = value
        """
        ...

    @property
    def DataSource(self) -> object:
        """
        Get: DataSource(self: DataGridView) -> object
        Set: DataSource(self: DataGridView) = value
        """
        ...

    @property
    def DefaultCellStyle(self): # -> DataGridViewCellStyle
        """
        Get: DefaultCellStyle(self: DataGridView) -> DataGridViewCellStyle
        Set: DefaultCellStyle(self: DataGridView) = value
        """
        ...

    @property
    def EditingControl(self) -> Control:
        """ Get: EditingControl(self: DataGridView) -> Control """
        ...

    @property
    def EditingPanel(self) -> Panel:
        """ Get: EditingPanel(self: DataGridView) -> Panel """
        ...

    @property
    def EditMode(self): # -> DataGridViewEditMode
        """
        Get: EditMode(self: DataGridView) -> DataGridViewEditMode
        Set: EditMode(self: DataGridView) = value
        """
        ...

    @property
    def EnableHeadersVisualStyles(self) -> bool:
        """
        Get: EnableHeadersVisualStyles(self: DataGridView) -> bool
        Set: EnableHeadersVisualStyles(self: DataGridView) = value
        """
        ...

    @property
    def FirstDisplayedCell(self): # -> DataGridViewCell
        """
        Get: FirstDisplayedCell(self: DataGridView) -> DataGridViewCell
        Set: FirstDisplayedCell(self: DataGridView) = value
        """
        ...

    @property
    def FirstDisplayedScrollingColumnHiddenWidth(self) -> int:
        """ Get: FirstDisplayedScrollingColumnHiddenWidth(self: DataGridView) -> int """
        ...

    @property
    def FirstDisplayedScrollingColumnIndex(self) -> int:
        """
        Get: FirstDisplayedScrollingColumnIndex(self: DataGridView) -> int
        Set: FirstDisplayedScrollingColumnIndex(self: DataGridView) = value
        """
        ...

    @property
    def FirstDisplayedScrollingRowIndex(self) -> int:
        """
        Get: FirstDisplayedScrollingRowIndex(self: DataGridView) -> int
        Set: FirstDisplayedScrollingRowIndex(self: DataGridView) = value
        """
        ...

    @property
    def GridColor(self) -> Color:
        """
        Get: GridColor(self: DataGridView) -> Color
        Set: GridColor(self: DataGridView) = value
        """
        ...

    @property
    def HorizontalScrollBar(self):
        ...

    @property
    def HorizontalScrollingOffset(self) -> int:
        """
        Get: HorizontalScrollingOffset(self: DataGridView) -> int
        Set: HorizontalScrollingOffset(self: DataGridView) = value
        """
        ...

    @property
    def IsCurrentCellDirty(self) -> bool:
        """ Get: IsCurrentCellDirty(self: DataGridView) -> bool """
        ...

    @property
    def IsCurrentCellInEditMode(self) -> bool:
        """ Get: IsCurrentCellInEditMode(self: DataGridView) -> bool """
        ...

    @property
    def IsCurrentRowDirty(self) -> bool:
        """ Get: IsCurrentRowDirty(self: DataGridView) -> bool """
        ...

    @property
    def MultiSelect(self) -> bool:
        """
        Get: MultiSelect(self: DataGridView) -> bool
        Set: MultiSelect(self: DataGridView) = value
        """
        ...

    @property
    def NewRowIndex(self) -> int:
        """ Get: NewRowIndex(self: DataGridView) -> int """
        ...

    @property
    def ReadOnly(self) -> bool:
        """
        Get: ReadOnly(self: DataGridView) -> bool
        Set: ReadOnly(self: DataGridView) = value
        """
        ...

    @property
    def RowCount(self) -> int:
        """
        Get: RowCount(self: DataGridView) -> int
        Set: RowCount(self: DataGridView) = value
        """
        ...

    @property
    def RowHeadersBorderStyle(self): # -> DataGridViewHeaderBorderStyle
        """
        Get: RowHeadersBorderStyle(self: DataGridView) -> DataGridViewHeaderBorderStyle
        Set: RowHeadersBorderStyle(self: DataGridView) = value
        """
        ...

    @property
    def RowHeadersDefaultCellStyle(self): # -> DataGridViewCellStyle
        """
        Get: RowHeadersDefaultCellStyle(self: DataGridView) -> DataGridViewCellStyle
        Set: RowHeadersDefaultCellStyle(self: DataGridView) = value
        """
        ...

    @property
    def RowHeadersVisible(self) -> bool:
        """
        Get: RowHeadersVisible(self: DataGridView) -> bool
        Set: RowHeadersVisible(self: DataGridView) = value
        """
        ...

    @property
    def RowHeadersWidth(self) -> int:
        """
        Get: RowHeadersWidth(self: DataGridView) -> int
        Set: RowHeadersWidth(self: DataGridView) = value
        """
        ...

    @property
    def RowHeadersWidthSizeMode(self): # -> DataGridViewRowHeadersWidthSizeMode
        """
        Get: RowHeadersWidthSizeMode(self: DataGridView) -> DataGridViewRowHeadersWidthSizeMode
        Set: RowHeadersWidthSizeMode(self: DataGridView) = value
        """
        ...

    @property
    def Rows(self): # -> DataGridViewRowCollection
        """ Get: Rows(self: DataGridView) -> DataGridViewRowCollection """
        ...

    @property
    def RowsDefaultCellStyle(self): # -> DataGridViewCellStyle
        """
        Get: RowsDefaultCellStyle(self: DataGridView) -> DataGridViewCellStyle
        Set: RowsDefaultCellStyle(self: DataGridView) = value
        """
        ...

    @property
    def RowTemplate(self): # -> DataGridViewRow
        """
        Get: RowTemplate(self: DataGridView) -> DataGridViewRow
        Set: RowTemplate(self: DataGridView) = value
        """
        ...

    @property
    def ScrollBars(self) -> ScrollBars:
        """
        Get: ScrollBars(self: DataGridView) -> ScrollBars
        Set: ScrollBars(self: DataGridView) = value
        """
        ...

    @property
    def SelectedCells(self): # -> DataGridViewSelectedCellCollection
        """ Get: SelectedCells(self: DataGridView) -> DataGridViewSelectedCellCollection """
        ...

    @property
    def SelectedColumns(self): # -> DataGridViewSelectedColumnCollection
        """ Get: SelectedColumns(self: DataGridView) -> DataGridViewSelectedColumnCollection """
        ...

    @property
    def SelectedRows(self): # -> DataGridViewSelectedRowCollection
        """ Get: SelectedRows(self: DataGridView) -> DataGridViewSelectedRowCollection """
        ...

    @property
    def SelectionMode(self): # -> DataGridViewSelectionMode
        """
        Get: SelectionMode(self: DataGridView) -> DataGridViewSelectionMode
        Set: SelectionMode(self: DataGridView) = value
        """
        ...

    @property
    def ShowCellErrors(self) -> bool:
        """
        Get: ShowCellErrors(self: DataGridView) -> bool
        Set: ShowCellErrors(self: DataGridView) = value
        """
        ...

    @property
    def ShowCellToolTips(self) -> bool:
        """
        Get: ShowCellToolTips(self: DataGridView) -> bool
        Set: ShowCellToolTips(self: DataGridView) = value
        """
        ...

    @property
    def ShowEditingIcon(self) -> bool:
        """
        Get: ShowEditingIcon(self: DataGridView) -> bool
        Set: ShowEditingIcon(self: DataGridView) = value
        """
        ...

    @property
    def ShowRowErrors(self) -> bool:
        """
        Get: ShowRowErrors(self: DataGridView) -> bool
        Set: ShowRowErrors(self: DataGridView) = value
        """
        ...

    @property
    def SortedColumn(self): # -> DataGridViewColumn
        """ Get: SortedColumn(self: DataGridView) -> DataGridViewColumn """
        ...

    @property
    def SortOrder(self) -> SortOrder:
        """ Get: SortOrder(self: DataGridView) -> SortOrder """
        ...

    @property
    def StandardTab(self) -> bool:
        """
        Get: StandardTab(self: DataGridView) -> bool
        Set: StandardTab(self: DataGridView) = value
        """
        ...

    @property
    def TopLeftHeaderCell(self): # -> DataGridViewHeaderCell
        """
        Get: TopLeftHeaderCell(self: DataGridView) -> DataGridViewHeaderCell
        Set: TopLeftHeaderCell(self: DataGridView) = value
        """
        ...

    @property
    def UserSetCursor(self) -> Cursor:
        """ Get: UserSetCursor(self: DataGridView) -> Cursor """
        ...

    @property
    def VerticalScrollBar(self):
        ...

    @property
    def VerticalScrollingOffset(self) -> int:
        """ Get: VerticalScrollingOffset(self: DataGridView) -> int """
        ...

    @property
    def VirtualMode(self) -> bool:
        """
        Get: VirtualMode(self: DataGridView) -> bool
        Set: VirtualMode(self: DataGridView) = value
        """
        ...


    def AccessibilityNotifyCurrentCellChanged(self, *args): #cannot find CLR method
        """ AccessibilityNotifyCurrentCellChanged(self: DataGridView, cellAddress: Point) """
        ...

    def AdjustColumnHeaderBorderStyle(self, dataGridViewAdvancedBorderStyleInput, dataGridViewAdvancedBorderStylePlaceholder, isFirstDisplayedColumn:bool, isLastVisibleColumn:bool): # -> DataGridViewAdvancedBorderStyle # Not found arg types: {'dataGridViewAdvancedBorderStyleInput': 'DataGridViewAdvancedBorderStyle', 'dataGridViewAdvancedBorderStylePlaceholder': 'DataGridViewAdvancedBorderStyle'}
        """ AdjustColumnHeaderBorderStyle(self: DataGridView, dataGridViewAdvancedBorderStyleInput: DataGridViewAdvancedBorderStyle, dataGridViewAdvancedBorderStylePlaceholder: DataGridViewAdvancedBorderStyle, isFirstDisplayedColumn: bool, isLastVisibleColumn: bool) -> DataGridViewAdvancedBorderStyle """
        ...

    def AreAllCellsSelected(self, includeInvisibleCells:bool) -> bool:
        """ AreAllCellsSelected(self: DataGridView, includeInvisibleCells: bool) -> bool """
        ...

    def AutoResizeColumn(self, columnIndex:int, autoSizeColumnMode = ...): # ->  # Not found arg types: {'autoSizeColumnMode': 'DataGridViewAutoSizeColumnMode'}
        """ AutoResizeColumn(self: DataGridView, columnIndex: int)AutoResizeColumn(self: DataGridView, columnIndex: int, autoSizeColumnMode: DataGridViewAutoSizeColumnMode) """
        ...

    def AutoResizeColumnHeadersHeight(self, columnIndex:int = ...): # -> 
        """ AutoResizeColumnHeadersHeight(self: DataGridView)AutoResizeColumnHeadersHeight(self: DataGridView, columnIndex: int) """
        ...

    def AutoResizeColumns(self, autoSizeColumnsMode = ...): # ->  # Not found arg types: {'autoSizeColumnsMode': 'DataGridViewAutoSizeColumnsMode'}
        """ AutoResizeColumns(self: DataGridView)AutoResizeColumns(self: DataGridView, autoSizeColumnsMode: DataGridViewAutoSizeColumnsMode) """
        ...

    def AutoResizeRow(self, rowIndex:int, autoSizeRowMode = ...): # ->  # Not found arg types: {'autoSizeRowMode': 'DataGridViewAutoSizeRowMode'}
        """ AutoResizeRow(self: DataGridView, rowIndex: int)AutoResizeRow(self: DataGridView, rowIndex: int, autoSizeRowMode: DataGridViewAutoSizeRowMode) """
        ...

    def AutoResizeRowHeadersWidth(self, *__args): # ->  # Not found arg types: {'*__args': 'DataGridViewRowHeadersWidthSizeMode'}
        """ AutoResizeRowHeadersWidth(self: DataGridView, rowHeadersWidthSizeMode: DataGridViewRowHeadersWidthSizeMode)AutoResizeRowHeadersWidth(self: DataGridView, rowIndex: int, rowHeadersWidthSizeMode: DataGridViewRowHeadersWidthSizeMode) """
        ...

    def AutoResizeRows(self, autoSizeRowsMode = ...): # ->  # Not found arg types: {'autoSizeRowsMode': 'DataGridViewAutoSizeRowsMode'}
        """ AutoResizeRows(self: DataGridView)AutoResizeRows(self: DataGridView, autoSizeRowsMode: DataGridViewAutoSizeRowsMode) """
        ...

    def BeginEdit(self, selectAll:bool) -> bool:
        """ BeginEdit(self: DataGridView, selectAll: bool) -> bool """
        ...

    def CancelEdit(self) -> bool:
        """ CancelEdit(self: DataGridView) -> bool """
        ...

    def ClearSelection(self): # -> 
        """ ClearSelection(self: DataGridView) """
        ...

    def CommitEdit(self, context) -> bool: # Not found arg types: {'context': 'DataGridViewDataErrorContexts'}
        """ CommitEdit(self: DataGridView, context: DataGridViewDataErrorContexts) -> bool """
        ...

    def CreateColumnsInstance(self, *args): #cannot find CLR method
        """ CreateColumnsInstance(self: DataGridView) -> DataGridViewColumnCollection """
        ...

    def CreateRowsInstance(self, *args): #cannot find CLR method
        """ CreateRowsInstance(self: DataGridView) -> DataGridViewRowCollection """
        ...

    def DataGridViewAccessibleObject(self, *args): #cannot find CLR method
        """ DataGridViewAccessibleObject(owner: DataGridView) """
        ...

    def DataGridViewControlCollection(self, *args): #cannot find CLR method
        """ DataGridViewControlCollection(owner: DataGridView) """
        ...

    def DataGridViewTopRowAccessibleObject(self, *args): #cannot find CLR method
        """
        DataGridViewTopRowAccessibleObject()
        DataGridViewTopRowAccessibleObject(owner: DataGridView)
        """
        ...

    def DisplayedColumnCount(self, includePartialColumns:bool) -> int:
        """ DisplayedColumnCount(self: DataGridView, includePartialColumns: bool) -> int """
        ...

    def DisplayedRowCount(self, includePartialRow:bool) -> int:
        """ DisplayedRowCount(self: DataGridView, includePartialRow: bool) -> int """
        ...

    def EndEdit(self, context = ...) -> bool: # Not found arg types: {'context': 'DataGridViewDataErrorContexts'}
        """
        EndEdit(self: DataGridView) -> bool
        EndEdit(self: DataGridView, context: DataGridViewDataErrorContexts) -> bool
        """
        ...

    def GetCellCount(self, includeFilter) -> int: # Not found arg types: {'includeFilter': 'DataGridViewElementStates'}
        """ GetCellCount(self: DataGridView, includeFilter: DataGridViewElementStates) -> int """
        ...

    def GetCellDisplayRectangle(self, columnIndex:int, rowIndex:int, cutOverflow:bool) -> Rectangle:
        """ GetCellDisplayRectangle(self: DataGridView, columnIndex: int, rowIndex: int, cutOverflow: bool) -> Rectangle """
        ...

    def GetClipboardContent(self) -> DataObject:
        """ GetClipboardContent(self: DataGridView) -> DataObject """
        ...

    def GetColumnDisplayRectangle(self, columnIndex:int, cutOverflow:bool) -> Rectangle:
        """ GetColumnDisplayRectangle(self: DataGridView, columnIndex: int, cutOverflow: bool) -> Rectangle """
        ...

    def GetRowDisplayRectangle(self, rowIndex:int, cutOverflow:bool) -> Rectangle:
        """ GetRowDisplayRectangle(self: DataGridView, rowIndex: int, cutOverflow: bool) -> Rectangle """
        ...

    def HitTest(self, x:int, y:int) -> HitTestInfo:
        """ HitTest(self: DataGridView, x: int, y: int) -> HitTestInfo """
        ...

    def HitTestInfo(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def InvalidateCell(self, *__args): # ->  # Not found arg types: {'*__args': 'DataGridViewCell'}
        """ InvalidateCell(self: DataGridView, dataGridViewCell: DataGridViewCell)InvalidateCell(self: DataGridView, columnIndex: int, rowIndex: int) """
        ...

    def InvalidateColumn(self, columnIndex:int): # -> 
        """ InvalidateColumn(self: DataGridView, columnIndex: int) """
        ...

    def InvalidateRow(self, rowIndex:int): # -> 
        """ InvalidateRow(self: DataGridView, rowIndex: int) """
        ...

    def NotifyCurrentCellDirty(self, dirty:bool): # -> 
        """ NotifyCurrentCellDirty(self: DataGridView, dirty: bool) """
        ...

    def OnAllowUserToAddRowsChanged(self, *args): #cannot find CLR method
        """ OnAllowUserToAddRowsChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnAllowUserToDeleteRowsChanged(self, *args): #cannot find CLR method
        """ OnAllowUserToDeleteRowsChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnAllowUserToOrderColumnsChanged(self, *args): #cannot find CLR method
        """ OnAllowUserToOrderColumnsChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnAllowUserToResizeColumnsChanged(self, *args): #cannot find CLR method
        """ OnAllowUserToResizeColumnsChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnAllowUserToResizeRowsChanged(self, *args): #cannot find CLR method
        """ OnAllowUserToResizeRowsChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnAlternatingRowsDefaultCellStyleChanged(self, *args): #cannot find CLR method
        """ OnAlternatingRowsDefaultCellStyleChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnAutoGenerateColumnsChanged(self, *args): #cannot find CLR method
        """ OnAutoGenerateColumnsChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnAutoSizeColumnModeChanged(self, *args): #cannot find CLR method
        """ OnAutoSizeColumnModeChanged(self: DataGridView, e: DataGridViewAutoSizeColumnModeEventArgs) """
        ...

    def OnAutoSizeColumnsModeChanged(self, *args): #cannot find CLR method
        """ OnAutoSizeColumnsModeChanged(self: DataGridView, e: DataGridViewAutoSizeColumnsModeEventArgs) """
        ...

    def OnAutoSizeRowsModeChanged(self, *args): #cannot find CLR method
        """ OnAutoSizeRowsModeChanged(self: DataGridView, e: DataGridViewAutoSizeModeEventArgs) """
        ...

    def OnBackgroundColorChanged(self, *args): #cannot find CLR method
        """ OnBackgroundColorChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnBorderStyleChanged(self, *args): #cannot find CLR method
        """ OnBorderStyleChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnCancelRowEdit(self, *args): #cannot find CLR method
        """ OnCancelRowEdit(self: DataGridView, e: QuestionEventArgs) """
        ...

    def OnCellBeginEdit(self, *args): #cannot find CLR method
        """ OnCellBeginEdit(self: DataGridView, e: DataGridViewCellCancelEventArgs) """
        ...

    def OnCellBorderStyleChanged(self, *args): #cannot find CLR method
        """ OnCellBorderStyleChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnCellClick(self, *args): #cannot find CLR method
        """ OnCellClick(self: DataGridView, e: DataGridViewCellEventArgs) """
        ...

    def OnCellContentClick(self, *args): #cannot find CLR method
        """ OnCellContentClick(self: DataGridView, e: DataGridViewCellEventArgs) """
        ...

    def OnCellContentDoubleClick(self, *args): #cannot find CLR method
        """ OnCellContentDoubleClick(self: DataGridView, e: DataGridViewCellEventArgs) """
        ...

    def OnCellContextMenuStripChanged(self, *args): #cannot find CLR method
        """ OnCellContextMenuStripChanged(self: DataGridView, e: DataGridViewCellEventArgs) """
        ...

    def OnCellContextMenuStripNeeded(self, *args): #cannot find CLR method
        """ OnCellContextMenuStripNeeded(self: DataGridView, e: DataGridViewCellContextMenuStripNeededEventArgs) """
        ...

    def OnCellDoubleClick(self, *args): #cannot find CLR method
        """ OnCellDoubleClick(self: DataGridView, e: DataGridViewCellEventArgs) """
        ...

    def OnCellEndEdit(self, *args): #cannot find CLR method
        """ OnCellEndEdit(self: DataGridView, e: DataGridViewCellEventArgs) """
        ...

    def OnCellEnter(self, *args): #cannot find CLR method
        """ OnCellEnter(self: DataGridView, e: DataGridViewCellEventArgs) """
        ...

    def OnCellErrorTextChanged(self, *args): #cannot find CLR method
        """ OnCellErrorTextChanged(self: DataGridView, e: DataGridViewCellEventArgs) """
        ...

    def OnCellErrorTextNeeded(self, *args): #cannot find CLR method
        """ OnCellErrorTextNeeded(self: DataGridView, e: DataGridViewCellErrorTextNeededEventArgs) """
        ...

    def OnCellFormatting(self, *args): #cannot find CLR method
        """ OnCellFormatting(self: DataGridView, e: DataGridViewCellFormattingEventArgs) """
        ...

    def OnCellLeave(self, *args): #cannot find CLR method
        """ OnCellLeave(self: DataGridView, e: DataGridViewCellEventArgs) """
        ...

    def OnCellMouseClick(self, *args): #cannot find CLR method
        """ OnCellMouseClick(self: DataGridView, e: DataGridViewCellMouseEventArgs) """
        ...

    def OnCellMouseDoubleClick(self, *args): #cannot find CLR method
        """ OnCellMouseDoubleClick(self: DataGridView, e: DataGridViewCellMouseEventArgs) """
        ...

    def OnCellMouseDown(self, *args): #cannot find CLR method
        """ OnCellMouseDown(self: DataGridView, e: DataGridViewCellMouseEventArgs) """
        ...

    def OnCellMouseEnter(self, *args): #cannot find CLR method
        """ OnCellMouseEnter(self: DataGridView, e: DataGridViewCellEventArgs) """
        ...

    def OnCellMouseLeave(self, *args): #cannot find CLR method
        """ OnCellMouseLeave(self: DataGridView, e: DataGridViewCellEventArgs) """
        ...

    def OnCellMouseMove(self, *args): #cannot find CLR method
        """ OnCellMouseMove(self: DataGridView, e: DataGridViewCellMouseEventArgs) """
        ...

    def OnCellMouseUp(self, *args): #cannot find CLR method
        """ OnCellMouseUp(self: DataGridView, e: DataGridViewCellMouseEventArgs) """
        ...

    def OnCellPainting(self, *args): #cannot find CLR method
        """ OnCellPainting(self: DataGridView, e: DataGridViewCellPaintingEventArgs) """
        ...

    def OnCellParsing(self, *args): #cannot find CLR method
        """ OnCellParsing(self: DataGridView, e: DataGridViewCellParsingEventArgs) """
        ...

    def OnCellStateChanged(self, *args): #cannot find CLR method
        """ OnCellStateChanged(self: DataGridView, e: DataGridViewCellStateChangedEventArgs) """
        ...

    def OnCellStyleChanged(self, *args): #cannot find CLR method
        """ OnCellStyleChanged(self: DataGridView, e: DataGridViewCellEventArgs) """
        ...

    def OnCellStyleContentChanged(self, *args): #cannot find CLR method
        """ OnCellStyleContentChanged(self: DataGridView, e: DataGridViewCellStyleContentChangedEventArgs) """
        ...

    def OnCellToolTipTextChanged(self, *args): #cannot find CLR method
        """ OnCellToolTipTextChanged(self: DataGridView, e: DataGridViewCellEventArgs) """
        ...

    def OnCellToolTipTextNeeded(self, *args): #cannot find CLR method
        """ OnCellToolTipTextNeeded(self: DataGridView, e: DataGridViewCellToolTipTextNeededEventArgs) """
        ...

    def OnCellValidated(self, *args): #cannot find CLR method
        """ OnCellValidated(self: DataGridView, e: DataGridViewCellEventArgs) """
        ...

    def OnCellValidating(self, *args): #cannot find CLR method
        """ OnCellValidating(self: DataGridView, e: DataGridViewCellValidatingEventArgs) """
        ...

    def OnCellValueChanged(self, *args): #cannot find CLR method
        """ OnCellValueChanged(self: DataGridView, e: DataGridViewCellEventArgs) """
        ...

    def OnCellValueNeeded(self, *args): #cannot find CLR method
        """ OnCellValueNeeded(self: DataGridView, e: DataGridViewCellValueEventArgs) """
        ...

    def OnCellValuePushed(self, *args): #cannot find CLR method
        """ OnCellValuePushed(self: DataGridView, e: DataGridViewCellValueEventArgs) """
        ...

    def OnColumnAdded(self, *args): #cannot find CLR method
        """ OnColumnAdded(self: DataGridView, e: DataGridViewColumnEventArgs) """
        ...

    def OnColumnContextMenuStripChanged(self, *args): #cannot find CLR method
        """ OnColumnContextMenuStripChanged(self: DataGridView, e: DataGridViewColumnEventArgs) """
        ...

    def OnColumnDataPropertyNameChanged(self, *args): #cannot find CLR method
        """ OnColumnDataPropertyNameChanged(self: DataGridView, e: DataGridViewColumnEventArgs) """
        ...

    def OnColumnDefaultCellStyleChanged(self, *args): #cannot find CLR method
        """ OnColumnDefaultCellStyleChanged(self: DataGridView, e: DataGridViewColumnEventArgs) """
        ...

    def OnColumnDisplayIndexChanged(self, *args): #cannot find CLR method
        """ OnColumnDisplayIndexChanged(self: DataGridView, e: DataGridViewColumnEventArgs) """
        ...

    def OnColumnDividerDoubleClick(self, *args): #cannot find CLR method
        """ OnColumnDividerDoubleClick(self: DataGridView, e: DataGridViewColumnDividerDoubleClickEventArgs) """
        ...

    def OnColumnDividerWidthChanged(self, *args): #cannot find CLR method
        """ OnColumnDividerWidthChanged(self: DataGridView, e: DataGridViewColumnEventArgs) """
        ...

    def OnColumnHeaderCellChanged(self, *args): #cannot find CLR method
        """ OnColumnHeaderCellChanged(self: DataGridView, e: DataGridViewColumnEventArgs) """
        ...

    def OnColumnHeaderMouseClick(self, *args): #cannot find CLR method
        """ OnColumnHeaderMouseClick(self: DataGridView, e: DataGridViewCellMouseEventArgs) """
        ...

    def OnColumnHeaderMouseDoubleClick(self, *args): #cannot find CLR method
        """ OnColumnHeaderMouseDoubleClick(self: DataGridView, e: DataGridViewCellMouseEventArgs) """
        ...

    def OnColumnHeadersBorderStyleChanged(self, *args): #cannot find CLR method
        """ OnColumnHeadersBorderStyleChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnColumnHeadersDefaultCellStyleChanged(self, *args): #cannot find CLR method
        """ OnColumnHeadersDefaultCellStyleChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnColumnHeadersHeightChanged(self, *args): #cannot find CLR method
        """ OnColumnHeadersHeightChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnColumnHeadersHeightSizeModeChanged(self, *args): #cannot find CLR method
        """ OnColumnHeadersHeightSizeModeChanged(self: DataGridView, e: DataGridViewAutoSizeModeEventArgs) """
        ...

    def OnColumnMinimumWidthChanged(self, *args): #cannot find CLR method
        """ OnColumnMinimumWidthChanged(self: DataGridView, e: DataGridViewColumnEventArgs) """
        ...

    def OnColumnNameChanged(self, *args): #cannot find CLR method
        """ OnColumnNameChanged(self: DataGridView, e: DataGridViewColumnEventArgs) """
        ...

    def OnColumnRemoved(self, *args): #cannot find CLR method
        """ OnColumnRemoved(self: DataGridView, e: DataGridViewColumnEventArgs) """
        ...

    def OnColumnSortModeChanged(self, *args): #cannot find CLR method
        """ OnColumnSortModeChanged(self: DataGridView, e: DataGridViewColumnEventArgs) """
        ...

    def OnColumnStateChanged(self, *args): #cannot find CLR method
        """ OnColumnStateChanged(self: DataGridView, e: DataGridViewColumnStateChangedEventArgs) """
        ...

    def OnColumnToolTipTextChanged(self, *args): #cannot find CLR method
        """ OnColumnToolTipTextChanged(self: DataGridView, e: DataGridViewColumnEventArgs) """
        ...

    def OnColumnWidthChanged(self, *args): #cannot find CLR method
        """ OnColumnWidthChanged(self: DataGridView, e: DataGridViewColumnEventArgs) """
        ...

    def OnCurrentCellChanged(self, *args): #cannot find CLR method
        """ OnCurrentCellChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnCurrentCellDirtyStateChanged(self, *args): #cannot find CLR method
        """ OnCurrentCellDirtyStateChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnDataBindingComplete(self, *args): #cannot find CLR method
        """ OnDataBindingComplete(self: DataGridView, e: DataGridViewBindingCompleteEventArgs) """
        ...

    def OnDataError(self, *args): #cannot find CLR method
        """ OnDataError(self: DataGridView, displayErrorDialogIfNoHandler: bool, e: DataGridViewDataErrorEventArgs) """
        ...

    def OnDataMemberChanged(self, *args): #cannot find CLR method
        """ OnDataMemberChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnDataSourceChanged(self, *args): #cannot find CLR method
        """ OnDataSourceChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnDefaultCellStyleChanged(self, *args): #cannot find CLR method
        """ OnDefaultCellStyleChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnDefaultValuesNeeded(self, *args): #cannot find CLR method
        """ OnDefaultValuesNeeded(self: DataGridView, e: DataGridViewRowEventArgs) """
        ...

    def OnEditingControlShowing(self, *args): #cannot find CLR method
        """ OnEditingControlShowing(self: DataGridView, e: DataGridViewEditingControlShowingEventArgs) """
        ...

    def OnEditModeChanged(self, *args): #cannot find CLR method
        """ OnEditModeChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnGridColorChanged(self, *args): #cannot find CLR method
        """ OnGridColorChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnMultiSelectChanged(self, *args): #cannot find CLR method
        """ OnMultiSelectChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnNewRowNeeded(self, *args): #cannot find CLR method
        """ OnNewRowNeeded(self: DataGridView, e: DataGridViewRowEventArgs) """
        ...

    def OnReadOnlyChanged(self, *args): #cannot find CLR method
        """ OnReadOnlyChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnRowContextMenuStripChanged(self, *args): #cannot find CLR method
        """ OnRowContextMenuStripChanged(self: DataGridView, e: DataGridViewRowEventArgs) """
        ...

    def OnRowContextMenuStripNeeded(self, *args): #cannot find CLR method
        """ OnRowContextMenuStripNeeded(self: DataGridView, e: DataGridViewRowContextMenuStripNeededEventArgs) """
        ...

    def OnRowDefaultCellStyleChanged(self, *args): #cannot find CLR method
        """ OnRowDefaultCellStyleChanged(self: DataGridView, e: DataGridViewRowEventArgs) """
        ...

    def OnRowDirtyStateNeeded(self, *args): #cannot find CLR method
        """ OnRowDirtyStateNeeded(self: DataGridView, e: QuestionEventArgs) """
        ...

    def OnRowDividerDoubleClick(self, *args): #cannot find CLR method
        """ OnRowDividerDoubleClick(self: DataGridView, e: DataGridViewRowDividerDoubleClickEventArgs) """
        ...

    def OnRowDividerHeightChanged(self, *args): #cannot find CLR method
        """ OnRowDividerHeightChanged(self: DataGridView, e: DataGridViewRowEventArgs) """
        ...

    def OnRowEnter(self, *args): #cannot find CLR method
        """ OnRowEnter(self: DataGridView, e: DataGridViewCellEventArgs) """
        ...

    def OnRowErrorTextChanged(self, *args): #cannot find CLR method
        """ OnRowErrorTextChanged(self: DataGridView, e: DataGridViewRowEventArgs) """
        ...

    def OnRowErrorTextNeeded(self, *args): #cannot find CLR method
        """ OnRowErrorTextNeeded(self: DataGridView, e: DataGridViewRowErrorTextNeededEventArgs) """
        ...

    def OnRowHeaderCellChanged(self, *args): #cannot find CLR method
        """ OnRowHeaderCellChanged(self: DataGridView, e: DataGridViewRowEventArgs) """
        ...

    def OnRowHeaderMouseClick(self, *args): #cannot find CLR method
        """ OnRowHeaderMouseClick(self: DataGridView, e: DataGridViewCellMouseEventArgs) """
        ...

    def OnRowHeaderMouseDoubleClick(self, *args): #cannot find CLR method
        """ OnRowHeaderMouseDoubleClick(self: DataGridView, e: DataGridViewCellMouseEventArgs) """
        ...

    def OnRowHeadersBorderStyleChanged(self, *args): #cannot find CLR method
        """ OnRowHeadersBorderStyleChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnRowHeadersDefaultCellStyleChanged(self, *args): #cannot find CLR method
        """ OnRowHeadersDefaultCellStyleChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnRowHeadersWidthChanged(self, *args): #cannot find CLR method
        """ OnRowHeadersWidthChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnRowHeadersWidthSizeModeChanged(self, *args): #cannot find CLR method
        """ OnRowHeadersWidthSizeModeChanged(self: DataGridView, e: DataGridViewAutoSizeModeEventArgs) """
        ...

    def OnRowHeightChanged(self, *args): #cannot find CLR method
        """ OnRowHeightChanged(self: DataGridView, e: DataGridViewRowEventArgs) """
        ...

    def OnRowHeightInfoNeeded(self, *args): #cannot find CLR method
        """ OnRowHeightInfoNeeded(self: DataGridView, e: DataGridViewRowHeightInfoNeededEventArgs) """
        ...

    def OnRowHeightInfoPushed(self, *args): #cannot find CLR method
        """ OnRowHeightInfoPushed(self: DataGridView, e: DataGridViewRowHeightInfoPushedEventArgs) """
        ...

    def OnRowLeave(self, *args): #cannot find CLR method
        """ OnRowLeave(self: DataGridView, e: DataGridViewCellEventArgs) """
        ...

    def OnRowMinimumHeightChanged(self, *args): #cannot find CLR method
        """ OnRowMinimumHeightChanged(self: DataGridView, e: DataGridViewRowEventArgs) """
        ...

    def OnRowPostPaint(self, *args): #cannot find CLR method
        """ OnRowPostPaint(self: DataGridView, e: DataGridViewRowPostPaintEventArgs) """
        ...

    def OnRowPrePaint(self, *args): #cannot find CLR method
        """ OnRowPrePaint(self: DataGridView, e: DataGridViewRowPrePaintEventArgs) """
        ...

    def OnRowsAdded(self, *args): #cannot find CLR method
        """ OnRowsAdded(self: DataGridView, e: DataGridViewRowsAddedEventArgs) """
        ...

    def OnRowsDefaultCellStyleChanged(self, *args): #cannot find CLR method
        """ OnRowsDefaultCellStyleChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnRowsRemoved(self, *args): #cannot find CLR method
        """ OnRowsRemoved(self: DataGridView, e: DataGridViewRowsRemovedEventArgs) """
        ...

    def OnRowStateChanged(self, *args): #cannot find CLR method
        """ OnRowStateChanged(self: DataGridView, rowIndex: int, e: DataGridViewRowStateChangedEventArgs) """
        ...

    def OnRowUnshared(self, *args): #cannot find CLR method
        """ OnRowUnshared(self: DataGridView, e: DataGridViewRowEventArgs) """
        ...

    def OnRowValidated(self, *args): #cannot find CLR method
        """ OnRowValidated(self: DataGridView, e: DataGridViewCellEventArgs) """
        ...

    def OnRowValidating(self, *args): #cannot find CLR method
        """ OnRowValidating(self: DataGridView, e: DataGridViewCellCancelEventArgs) """
        ...

    def OnScroll(self, *args): #cannot find CLR method
        """ OnScroll(self: DataGridView, e: ScrollEventArgs) """
        ...

    def OnSelectionChanged(self, *args): #cannot find CLR method
        """ OnSelectionChanged(self: DataGridView, e: EventArgs) """
        ...

    def OnSortCompare(self, *args): #cannot find CLR method
        """ OnSortCompare(self: DataGridView, e: DataGridViewSortCompareEventArgs) """
        ...

    def OnSorted(self, *args): #cannot find CLR method
        """ OnSorted(self: DataGridView, e: EventArgs) """
        ...

    def OnUserAddedRow(self, *args): #cannot find CLR method
        """ OnUserAddedRow(self: DataGridView, e: DataGridViewRowEventArgs) """
        ...

    def OnUserDeletedRow(self, *args): #cannot find CLR method
        """ OnUserDeletedRow(self: DataGridView, e: DataGridViewRowEventArgs) """
        ...

    def OnUserDeletingRow(self, *args): #cannot find CLR method
        """ OnUserDeletingRow(self: DataGridView, e: DataGridViewRowCancelEventArgs) """
        ...

    def PaintBackground(self, *args): #cannot find CLR method
        """ PaintBackground(self: DataGridView, graphics: Graphics, clipBounds: Rectangle, gridBounds: Rectangle) """
        ...

    def ProcessAKey(self, *args): #cannot find CLR method
        """ ProcessAKey(self: DataGridView, keyData: Keys) -> bool """
        ...

    def ProcessDataGridViewKey(self, *args): #cannot find CLR method
        """ ProcessDataGridViewKey(self: DataGridView, e: KeyEventArgs) -> bool """
        ...

    def ProcessDeleteKey(self, *args): #cannot find CLR method
        """ ProcessDeleteKey(self: DataGridView, keyData: Keys) -> bool """
        ...

    def ProcessDownKey(self, *args): #cannot find CLR method
        """ ProcessDownKey(self: DataGridView, keyData: Keys) -> bool """
        ...

    def ProcessEndKey(self, *args): #cannot find CLR method
        """ ProcessEndKey(self: DataGridView, keyData: Keys) -> bool """
        ...

    def ProcessEnterKey(self, *args): #cannot find CLR method
        """ ProcessEnterKey(self: DataGridView, keyData: Keys) -> bool """
        ...

    def ProcessEscapeKey(self, *args): #cannot find CLR method
        """ ProcessEscapeKey(self: DataGridView, keyData: Keys) -> bool """
        ...

    def ProcessF2Key(self, *args): #cannot find CLR method
        """ ProcessF2Key(self: DataGridView, keyData: Keys) -> bool """
        ...

    def ProcessF3Key(self, *args): #cannot find CLR method
        """ ProcessF3Key(self: DataGridView, keyData: Keys) -> bool """
        ...

    def ProcessHomeKey(self, *args): #cannot find CLR method
        """ ProcessHomeKey(self: DataGridView, keyData: Keys) -> bool """
        ...

    def ProcessInsertKey(self, *args): #cannot find CLR method
        """ ProcessInsertKey(self: DataGridView, keyData: Keys) -> bool """
        ...

    def ProcessLeftKey(self, *args): #cannot find CLR method
        """ ProcessLeftKey(self: DataGridView, keyData: Keys) -> bool """
        ...

    def ProcessNextKey(self, *args): #cannot find CLR method
        """ ProcessNextKey(self: DataGridView, keyData: Keys) -> bool """
        ...

    def ProcessPriorKey(self, *args): #cannot find CLR method
        """ ProcessPriorKey(self: DataGridView, keyData: Keys) -> bool """
        ...

    def ProcessRightKey(self, *args): #cannot find CLR method
        """ ProcessRightKey(self: DataGridView, keyData: Keys) -> bool """
        ...

    def ProcessSpaceKey(self, *args): #cannot find CLR method
        """ ProcessSpaceKey(self: DataGridView, keyData: Keys) -> bool """
        ...

    def ProcessTabKey(self, *args): #cannot find CLR method
        """ ProcessTabKey(self: DataGridView, keyData: Keys) -> bool """
        ...

    def ProcessUpKey(self, *args): #cannot find CLR method
        """ ProcessUpKey(self: DataGridView, keyData: Keys) -> bool """
        ...

    def ProcessZeroKey(self, *args): #cannot find CLR method
        """ ProcessZeroKey(self: DataGridView, keyData: Keys) -> bool """
        ...

    def RefreshEdit(self) -> bool:
        """ RefreshEdit(self: DataGridView) -> bool """
        ...

    def SelectAll(self): # -> 
        """ SelectAll(self: DataGridView) """
        ...

    def SetCurrentCellAddressCore(self, *args): #cannot find CLR method
        """ SetCurrentCellAddressCore(self: DataGridView, columnIndex: int, rowIndex: int, setAnchorCellAddress: bool, validateCurrentCell: bool, throughMouseClick: bool) -> bool """
        ...

    def SetSelectedCellCore(self, *args): #cannot find CLR method
        """ SetSelectedCellCore(self: DataGridView, columnIndex: int, rowIndex: int, selected: bool) """
        ...

    def SetSelectedColumnCore(self, *args): #cannot find CLR method
        """ SetSelectedColumnCore(self: DataGridView, columnIndex: int, selected: bool) """
        ...

    def SetSelectedRowCore(self, *args): #cannot find CLR method
        """ SetSelectedRowCore(self: DataGridView, rowIndex: int, selected: bool) """
        ...

    def Sort(self, *__args:IComparer): # -> 
        """ Sort(self: DataGridView, dataGridViewColumn: DataGridViewColumn, direction: ListSortDirection)Sort(self: DataGridView, comparer: IComparer) """
        ...

    def UpdateCellErrorText(self, columnIndex:int, rowIndex:int): # -> 
        """ UpdateCellErrorText(self: DataGridView, columnIndex: int, rowIndex: int) """
        ...

    def UpdateCellValue(self, columnIndex:int, rowIndex:int): # -> 
        """ UpdateCellValue(self: DataGridView, columnIndex: int, rowIndex: int) """
        ...

    def UpdateRowErrorText(self, *__args:int): # -> 
        """ UpdateRowErrorText(self: DataGridView, rowIndex: int)UpdateRowErrorText(self: DataGridView, rowIndexStart: int, rowIndexEnd: int) """
        ...

    def UpdateRowHeightInfo(self, rowIndex:int, updateToEnd:bool): # -> 
        """ UpdateRowHeightInfo(self: DataGridView, rowIndex: int, updateToEnd: bool) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]=x.__setitem__(i, y) <==> x[i]= """
        ...

    AllowUserToAddRowsChanged = ...
    AllowUserToDeleteRowsChanged = ...
    AllowUserToOrderColumnsChanged = ...
    AllowUserToResizeColumnsChanged = ...
    AllowUserToResizeRowsChanged = ...
    AlternatingRowsDefaultCellStyleChanged = ...
    AutoGenerateColumnsChanged = ...
    AutoSizeColumnModeChanged = ...
    AutoSizeColumnsModeChanged = ...
    AutoSizeRowsModeChanged = ...
    BackColorChanged = ...
    BackgroundColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    BorderStyleChanged = ...
    CancelRowEdit = ...
    CellBeginEdit = ...
    CellBorderStyleChanged = ...
    CellClick = ...
    CellContentClick = ...
    CellContentDoubleClick = ...
    CellContextMenuStripChanged = ...
    CellContextMenuStripNeeded = ...
    CellDoubleClick = ...
    CellEndEdit = ...
    CellEnter = ...
    CellErrorTextChanged = ...
    CellErrorTextNeeded = ...
    CellFormatting = ...
    CellLeave = ...
    CellMouseClick = ...
    CellMouseDoubleClick = ...
    CellMouseDown = ...
    CellMouseEnter = ...
    CellMouseLeave = ...
    CellMouseMove = ...
    CellMouseUp = ...
    CellPainting = ...
    CellParsing = ...
    CellStateChanged = ...
    CellStyleChanged = ...
    CellStyleContentChanged = ...
    CellToolTipTextChanged = ...
    CellToolTipTextNeeded = ...
    CellValidated = ...
    CellValidating = ...
    CellValueChanged = ...
    CellValueNeeded = ...
    CellValuePushed = ...
    ColumnAdded = ...
    ColumnContextMenuStripChanged = ...
    ColumnDataPropertyNameChanged = ...
    ColumnDefaultCellStyleChanged = ...
    ColumnDisplayIndexChanged = ...
    ColumnDividerDoubleClick = ...
    ColumnDividerWidthChanged = ...
    ColumnHeaderCellChanged = ...
    ColumnHeaderMouseClick = ...
    ColumnHeaderMouseDoubleClick = ...
    ColumnHeadersBorderStyleChanged = ...
    ColumnHeadersDefaultCellStyleChanged = ...
    ColumnHeadersHeightChanged = ...
    ColumnHeadersHeightSizeModeChanged = ...
    ColumnMinimumWidthChanged = ...
    ColumnNameChanged = ...
    ColumnRemoved = ...
    ColumnSortModeChanged = ...
    ColumnStateChanged = ...
    ColumnToolTipTextChanged = ...
    ColumnWidthChanged = ...
    CurrentCellChanged = ...
    CurrentCellDirtyStateChanged = ...
    DataBindingComplete = ...
    DataError = ...
    DataMemberChanged = ...
    DataSourceChanged = ...
    DefaultCellStyleChanged = ...
    DefaultValuesNeeded = ...
    EditingControlShowing = ...
    EditModeChanged = ...
    FontChanged = ...
    ForeColorChanged = ...
    GridColorChanged = ...
    MultiSelectChanged = ...
    NewRowNeeded = ...
    PaddingChanged = ...
    ReadOnlyChanged = ...
    RowContextMenuStripChanged = ...
    RowContextMenuStripNeeded = ...
    RowDefaultCellStyleChanged = ...
    RowDirtyStateNeeded = ...
    RowDividerDoubleClick = ...
    RowDividerHeightChanged = ...
    RowEnter = ...
    RowErrorTextChanged = ...
    RowErrorTextNeeded = ...
    RowHeaderCellChanged = ...
    RowHeaderMouseClick = ...
    RowHeaderMouseDoubleClick = ...
    RowHeadersBorderStyleChanged = ...
    RowHeadersDefaultCellStyleChanged = ...
    RowHeadersWidthChanged = ...
    RowHeadersWidthSizeModeChanged = ...
    RowHeightChanged = ...
    RowHeightInfoNeeded = ...
    RowHeightInfoPushed = ...
    RowLeave = ...
    RowMinimumHeightChanged = ...
    RowPostPaint = ...
    RowPrePaint = ...
    RowsAdded = ...
    RowsDefaultCellStyleChanged = ...
    RowsRemoved = ...
    RowStateChanged = ...
    RowUnshared = ...
    RowValidated = ...
    RowValidating = ...
    Scroll = ...
    SelectionChanged = ...
    SortCompare = ...
    Sorted = ...
    StyleChanged = ...
    TextChanged = ...
    UserAddedRow = ...
    UserDeletedRow = ...
    UserDeletingRow = ...


class DataGridViewAdvancedBorderStyle(ICloneable): # skipped bases: <type 'object'>
    """ DataGridViewAdvancedBorderStyle() """
    @property
    def All(self): # -> DataGridViewAdvancedCellBorderStyle
        """
        Get: All(self: DataGridViewAdvancedBorderStyle) -> DataGridViewAdvancedCellBorderStyle
        Set: All(self: DataGridViewAdvancedBorderStyle) = value
        """
        ...

    @property
    def Bottom(self): # -> DataGridViewAdvancedCellBorderStyle
        """
        Get: Bottom(self: DataGridViewAdvancedBorderStyle) -> DataGridViewAdvancedCellBorderStyle
        Set: Bottom(self: DataGridViewAdvancedBorderStyle) = value
        """
        ...

    @property
    def Left(self): # -> DataGridViewAdvancedCellBorderStyle
        """
        Get: Left(self: DataGridViewAdvancedBorderStyle) -> DataGridViewAdvancedCellBorderStyle
        Set: Left(self: DataGridViewAdvancedBorderStyle) = value
        """
        ...

    @property
    def Right(self): # -> DataGridViewAdvancedCellBorderStyle
        """
        Get: Right(self: DataGridViewAdvancedBorderStyle) -> DataGridViewAdvancedCellBorderStyle
        Set: Right(self: DataGridViewAdvancedBorderStyle) = value
        """
        ...

    @property
    def Top(self): # -> DataGridViewAdvancedCellBorderStyle
        """
        Get: Top(self: DataGridViewAdvancedBorderStyle) -> DataGridViewAdvancedCellBorderStyle
        Set: Top(self: DataGridViewAdvancedBorderStyle) = value
        """
        ...


    def Equals(self, other:object) -> bool:
        """ Equals(self: DataGridViewAdvancedBorderStyle, other: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: DataGridViewAdvancedBorderStyle) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: DataGridViewAdvancedBorderStyle) -> str """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class DataGridViewAdvancedCellBorderStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridViewAdvancedCellBorderStyle, values: Inset (3), InsetDouble (4), None (1), NotSet (0), Outset (5), OutsetDouble (6), OutsetPartial (7), Single (2) """
    Inset: DataGridViewAdvancedCellBorderStyle = ...
    InsetDouble: DataGridViewAdvancedCellBorderStyle = ...
    NotSet: DataGridViewAdvancedCellBorderStyle = ...
    Outset: DataGridViewAdvancedCellBorderStyle = ...
    OutsetDouble: DataGridViewAdvancedCellBorderStyle = ...
    OutsetPartial: DataGridViewAdvancedCellBorderStyle = ...
    Single: DataGridViewAdvancedCellBorderStyle = ...
    value__ = ...


class DataGridViewAutoSizeColumnMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridViewAutoSizeColumnMode, values: AllCells (6), AllCellsExceptHeader (4), ColumnHeader (2), DisplayedCells (10), DisplayedCellsExceptHeader (8), Fill (16), None (1), NotSet (0) """
    AllCells: DataGridViewAutoSizeColumnMode = ...
    AllCellsExceptHeader: DataGridViewAutoSizeColumnMode = ...
    ColumnHeader: DataGridViewAutoSizeColumnMode = ...
    DisplayedCells: DataGridViewAutoSizeColumnMode = ...
    DisplayedCellsExceptHeader: DataGridViewAutoSizeColumnMode = ...
    Fill: DataGridViewAutoSizeColumnMode = ...
    NotSet: DataGridViewAutoSizeColumnMode = ...
    value__ = ...


class DataGridViewAutoSizeColumnModeEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DataGridViewAutoSizeColumnModeEventArgs(dataGridViewColumn: DataGridViewColumn, previousMode: DataGridViewAutoSizeColumnMode) """
    @property
    def Column(self): # -> DataGridViewColumn
        """ Get: Column(self: DataGridViewAutoSizeColumnModeEventArgs) -> DataGridViewColumn """
        ...

    @property
    def PreviousMode(self) -> DataGridViewAutoSizeColumnMode:
        """ Get: PreviousMode(self: DataGridViewAutoSizeColumnModeEventArgs) -> DataGridViewAutoSizeColumnMode """
        ...


    def __new__(cls, dataGridViewColumn, previousMode:DataGridViewAutoSizeColumnMode) -> Self: # Not found arg types: {'dataGridViewColumn': 'DataGridViewColumn'}
        """ __new__(cls: type, dataGridViewColumn: DataGridViewColumn, previousMode: DataGridViewAutoSizeColumnMode) """
        ...


class DataGridViewAutoSizeColumnModeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewAutoSizeColumnModeEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewAutoSizeColumnModeEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewAutoSizeColumnModeEventHandler, sender: object, e: DataGridViewAutoSizeColumnModeEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewAutoSizeColumnModeEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewAutoSizeColumnModeEventArgs): # -> 
        """ Invoke(self: DataGridViewAutoSizeColumnModeEventHandler, sender: object, e: DataGridViewAutoSizeColumnModeEventArgs) """
        ...


class DataGridViewAutoSizeColumnsMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridViewAutoSizeColumnsMode, values: AllCells (6), AllCellsExceptHeader (4), ColumnHeader (2), DisplayedCells (10), DisplayedCellsExceptHeader (8), Fill (16), None (1) """
    AllCells: DataGridViewAutoSizeColumnsMode = ...
    AllCellsExceptHeader: DataGridViewAutoSizeColumnsMode = ...
    ColumnHeader: DataGridViewAutoSizeColumnsMode = ...
    DisplayedCells: DataGridViewAutoSizeColumnsMode = ...
    DisplayedCellsExceptHeader: DataGridViewAutoSizeColumnsMode = ...
    Fill: DataGridViewAutoSizeColumnsMode = ...
    value__ = ...


class DataGridViewAutoSizeColumnsModeEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DataGridViewAutoSizeColumnsModeEventArgs(previousModes: Array[DataGridViewAutoSizeColumnMode]) """
    @property
    def PreviousModes(self) -> Array:
        """ Get: PreviousModes(self: DataGridViewAutoSizeColumnsModeEventArgs) -> Array[DataGridViewAutoSizeColumnMode] """
        ...


    def __new__(cls, previousModes:Array) -> Self:
        """ __new__(cls: type, previousModes: Array[DataGridViewAutoSizeColumnMode]) """
        ...


class DataGridViewAutoSizeColumnsModeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewAutoSizeColumnsModeEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewAutoSizeColumnsModeEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewAutoSizeColumnsModeEventHandler, sender: object, e: DataGridViewAutoSizeColumnsModeEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewAutoSizeColumnsModeEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewAutoSizeColumnsModeEventArgs): # -> 
        """ Invoke(self: DataGridViewAutoSizeColumnsModeEventHandler, sender: object, e: DataGridViewAutoSizeColumnsModeEventArgs) """
        ...


class DataGridViewAutoSizeModeEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DataGridViewAutoSizeModeEventArgs(previousModeAutoSized: bool) """
    @property
    def PreviousModeAutoSized(self) -> bool:
        """ Get: PreviousModeAutoSized(self: DataGridViewAutoSizeModeEventArgs) -> bool """
        ...


    def __new__(cls, previousModeAutoSized:bool) -> Self:
        """ __new__(cls: type, previousModeAutoSized: bool) """
        ...


class DataGridViewAutoSizeModeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewAutoSizeModeEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewAutoSizeModeEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewAutoSizeModeEventHandler, sender: object, e: DataGridViewAutoSizeModeEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewAutoSizeModeEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewAutoSizeModeEventArgs): # -> 
        """ Invoke(self: DataGridViewAutoSizeModeEventHandler, sender: object, e: DataGridViewAutoSizeModeEventArgs) """
        ...


class DataGridViewAutoSizeRowMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridViewAutoSizeRowMode, values: AllCells (3), AllCellsExceptHeader (2), RowHeader (1) """
    AllCells: DataGridViewAutoSizeRowMode = ...
    AllCellsExceptHeader: DataGridViewAutoSizeRowMode = ...
    RowHeader: DataGridViewAutoSizeRowMode = ...
    value__ = ...


class DataGridViewAutoSizeRowsMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridViewAutoSizeRowsMode, values: AllCells (7), AllCellsExceptHeaders (6), AllHeaders (5), DisplayedCells (11), DisplayedCellsExceptHeaders (10), DisplayedHeaders (9), None (0) """
    AllCells: DataGridViewAutoSizeRowsMode = ...
    AllCellsExceptHeaders: DataGridViewAutoSizeRowsMode = ...
    AllHeaders: DataGridViewAutoSizeRowsMode = ...
    DisplayedCells: DataGridViewAutoSizeRowsMode = ...
    DisplayedCellsExceptHeaders: DataGridViewAutoSizeRowsMode = ...
    DisplayedHeaders: DataGridViewAutoSizeRowsMode = ...
    value__ = ...


class DataGridViewElement: # skipped bases: <type 'object'>, <type 'object'>
    """ DataGridViewElement() """
    @property
    def DataGridView(self) -> DataGridView:
        """ Get: DataGridView(self: DataGridViewElement) -> DataGridView """
        ...

    @property
    def State(self): # -> DataGridViewElementStates
        """ Get: State(self: DataGridViewElement) -> DataGridViewElementStates """
        ...


    def OnDataGridViewChanged(self, *args): #cannot find CLR method
        """ OnDataGridViewChanged(self: DataGridViewElement) """
        ...

    def RaiseCellClick(self, *args): #cannot find CLR method
        """ RaiseCellClick(self: DataGridViewElement, e: DataGridViewCellEventArgs) """
        ...

    def RaiseCellContentClick(self, *args): #cannot find CLR method
        """ RaiseCellContentClick(self: DataGridViewElement, e: DataGridViewCellEventArgs) """
        ...

    def RaiseCellContentDoubleClick(self, *args): #cannot find CLR method
        """ RaiseCellContentDoubleClick(self: DataGridViewElement, e: DataGridViewCellEventArgs) """
        ...

    def RaiseCellValueChanged(self, *args): #cannot find CLR method
        """ RaiseCellValueChanged(self: DataGridViewElement, e: DataGridViewCellEventArgs) """
        ...

    def RaiseDataError(self, *args): #cannot find CLR method
        """ RaiseDataError(self: DataGridViewElement, e: DataGridViewDataErrorEventArgs) """
        ...

    def RaiseMouseWheel(self, *args): #cannot find CLR method
        """ RaiseMouseWheel(self: DataGridViewElement, e: MouseEventArgs) """
        ...


class DataGridViewBand(IDisposable, ICloneable, DataGridViewElement): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip:
        """
        Get: ContextMenuStrip(self: DataGridViewBand) -> ContextMenuStrip
        Set: ContextMenuStrip(self: DataGridViewBand) = value
        """
        ...

    @property
    def DefaultCellStyle(self): # -> DataGridViewCellStyle
        """
        Get: DefaultCellStyle(self: DataGridViewBand) -> DataGridViewCellStyle
        Set: DefaultCellStyle(self: DataGridViewBand) = value
        """
        ...

    @property
    def DefaultHeaderCellType(self) -> Type:
        """
        Get: DefaultHeaderCellType(self: DataGridViewBand) -> Type
        Set: DefaultHeaderCellType(self: DataGridViewBand) = value
        """
        ...

    @property
    def Displayed(self) -> bool:
        """ Get: Displayed(self: DataGridViewBand) -> bool """
        ...

    @property
    def Frozen(self) -> bool:
        """
        Get: Frozen(self: DataGridViewBand) -> bool
        Set: Frozen(self: DataGridViewBand) = value
        """
        ...

    @property
    def HasDefaultCellStyle(self) -> bool:
        """ Get: HasDefaultCellStyle(self: DataGridViewBand) -> bool """
        ...

    @property
    def HeaderCellCore(self):
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: DataGridViewBand) -> int """
        ...

    @property
    def InheritedStyle(self): # -> DataGridViewCellStyle
        """ Get: InheritedStyle(self: DataGridViewBand) -> DataGridViewCellStyle """
        ...

    @property
    def IsRow(self):
        ...

    @property
    def ReadOnly(self) -> bool:
        """
        Get: ReadOnly(self: DataGridViewBand) -> bool
        Set: ReadOnly(self: DataGridViewBand) = value
        """
        ...

    @property
    def Resizable(self): # -> DataGridViewTriState
        """
        Get: Resizable(self: DataGridViewBand) -> DataGridViewTriState
        Set: Resizable(self: DataGridViewBand) = value
        """
        ...

    @property
    def Selected(self) -> bool:
        """
        Get: Selected(self: DataGridViewBand) -> bool
        Set: Selected(self: DataGridViewBand) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: DataGridViewBand) -> object
        Set: Tag(self: DataGridViewBand) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: DataGridViewBand) -> bool
        Set: Visible(self: DataGridViewBand) = value
        """
        ...


    def ToString(self) -> str:
        """ ToString(self: DataGridViewBand) -> str """
        ...

    def __str__(self, *args): #cannot find CLR method
        ...


class DataGridViewBindingCompleteEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DataGridViewBindingCompleteEventArgs(listChangedType: ListChangedType) """
    @property
    def ListChangedType(self) -> ListChangedType:
        """ Get: ListChangedType(self: DataGridViewBindingCompleteEventArgs) -> ListChangedType """
        ...


    def __new__(cls, listChangedType:ListChangedType) -> Self:
        """ __new__(cls: type, listChangedType: ListChangedType) """
        ...


class DataGridViewBindingCompleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewBindingCompleteEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewBindingCompleteEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewBindingCompleteEventHandler, sender: object, e: DataGridViewBindingCompleteEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewBindingCompleteEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewBindingCompleteEventArgs): # -> 
        """ Invoke(self: DataGridViewBindingCompleteEventHandler, sender: object, e: DataGridViewBindingCompleteEventArgs) """
        ...


class DataGridViewCell(IDisposable, ICloneable, DataGridViewElement): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AccessibilityObject(self) -> AccessibleObject:
        """ Get: AccessibilityObject(self: DataGridViewCell) -> AccessibleObject """
        ...

    @property
    def ColumnIndex(self) -> int:
        """ Get: ColumnIndex(self: DataGridViewCell) -> int """
        ...

    @property
    def ContentBounds(self) -> Rectangle:
        """ Get: ContentBounds(self: DataGridViewCell) -> Rectangle """
        ...

    @property
    def ContextMenuStrip(self) -> ContextMenuStrip:
        """
        Get: ContextMenuStrip(self: DataGridViewCell) -> ContextMenuStrip
        Set: ContextMenuStrip(self: DataGridViewCell) = value
        """
        ...

    @property
    def DefaultNewRowValue(self) -> object:
        """ Get: DefaultNewRowValue(self: DataGridViewCell) -> object """
        ...

    @property
    def Displayed(self) -> bool:
        """ Get: Displayed(self: DataGridViewCell) -> bool """
        ...

    @property
    def EditedFormattedValue(self) -> object:
        """ Get: EditedFormattedValue(self: DataGridViewCell) -> object """
        ...

    @property
    def EditType(self) -> Type:
        """ Get: EditType(self: DataGridViewCell) -> Type """
        ...

    @property
    def ErrorIconBounds(self) -> Rectangle:
        """ Get: ErrorIconBounds(self: DataGridViewCell) -> Rectangle """
        ...

    @property
    def ErrorText(self) -> str:
        """
        Get: ErrorText(self: DataGridViewCell) -> str
        Set: ErrorText(self: DataGridViewCell) = value
        """
        ...

    @property
    def FormattedValue(self) -> object:
        """ Get: FormattedValue(self: DataGridViewCell) -> object """
        ...

    @property
    def FormattedValueType(self) -> Type:
        """ Get: FormattedValueType(self: DataGridViewCell) -> Type """
        ...

    @property
    def Frozen(self) -> bool:
        """ Get: Frozen(self: DataGridViewCell) -> bool """
        ...

    @property
    def HasStyle(self) -> bool:
        """ Get: HasStyle(self: DataGridViewCell) -> bool """
        ...

    @property
    def InheritedState(self): # -> DataGridViewElementStates
        """ Get: InheritedState(self: DataGridViewCell) -> DataGridViewElementStates """
        ...

    @property
    def InheritedStyle(self): # -> DataGridViewCellStyle
        """ Get: InheritedStyle(self: DataGridViewCell) -> DataGridViewCellStyle """
        ...

    @property
    def IsInEditMode(self) -> bool:
        """ Get: IsInEditMode(self: DataGridViewCell) -> bool """
        ...

    @property
    def OwningColumn(self): # -> DataGridViewColumn
        """ Get: OwningColumn(self: DataGridViewCell) -> DataGridViewColumn """
        ...

    @property
    def OwningRow(self): # -> DataGridViewRow
        """ Get: OwningRow(self: DataGridViewCell) -> DataGridViewRow """
        ...

    @property
    def PreferredSize(self) -> Size:
        """ Get: PreferredSize(self: DataGridViewCell) -> Size """
        ...

    @property
    def ReadOnly(self) -> bool:
        """
        Get: ReadOnly(self: DataGridViewCell) -> bool
        Set: ReadOnly(self: DataGridViewCell) = value
        """
        ...

    @property
    def Resizable(self) -> bool:
        """ Get: Resizable(self: DataGridViewCell) -> bool """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: DataGridViewCell) -> int """
        ...

    @property
    def Selected(self) -> bool:
        """
        Get: Selected(self: DataGridViewCell) -> bool
        Set: Selected(self: DataGridViewCell) = value
        """
        ...

    @property
    def Size(self) -> Size:
        """ Get: Size(self: DataGridViewCell) -> Size """
        ...

    @property
    def Style(self): # -> DataGridViewCellStyle
        """
        Get: Style(self: DataGridViewCell) -> DataGridViewCellStyle
        Set: Style(self: DataGridViewCell) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: DataGridViewCell) -> object
        Set: Tag(self: DataGridViewCell) = value
        """
        ...

    @property
    def ToolTipText(self) -> str:
        """
        Get: ToolTipText(self: DataGridViewCell) -> str
        Set: ToolTipText(self: DataGridViewCell) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: DataGridViewCell) -> object
        Set: Value(self: DataGridViewCell) = value
        """
        ...

    @property
    def ValueType(self) -> Type:
        """
        Get: ValueType(self: DataGridViewCell) -> Type
        Set: ValueType(self: DataGridViewCell) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """ Get: Visible(self: DataGridViewCell) -> bool """
        ...


    def AdjustCellBorderStyle(self, dataGridViewAdvancedBorderStyleInput:DataGridViewAdvancedBorderStyle, dataGridViewAdvancedBorderStylePlaceholder:DataGridViewAdvancedBorderStyle, singleVerticalBorderAdded:bool, singleHorizontalBorderAdded:bool, isFirstDisplayedColumn:bool, isFirstDisplayedRow:bool) -> DataGridViewAdvancedBorderStyle:
        """ AdjustCellBorderStyle(self: DataGridViewCell, dataGridViewAdvancedBorderStyleInput: DataGridViewAdvancedBorderStyle, dataGridViewAdvancedBorderStylePlaceholder: DataGridViewAdvancedBorderStyle, singleVerticalBorderAdded: bool, singleHorizontalBorderAdded: bool, isFirstDisplayedColumn: bool, isFirstDisplayedRow: bool) -> DataGridViewAdvancedBorderStyle """
        ...

    def BorderWidths(self, *args): #cannot find CLR method
        """ BorderWidths(self: DataGridViewCell, advancedBorderStyle: DataGridViewAdvancedBorderStyle) -> Rectangle """
        ...

    def ClickUnsharesRow(self, *args): #cannot find CLR method
        """ ClickUnsharesRow(self: DataGridViewCell, e: DataGridViewCellEventArgs) -> bool """
        ...

    def ContentClickUnsharesRow(self, *args): #cannot find CLR method
        """ ContentClickUnsharesRow(self: DataGridViewCell, e: DataGridViewCellEventArgs) -> bool """
        ...

    def ContentDoubleClickUnsharesRow(self, *args): #cannot find CLR method
        """ ContentDoubleClickUnsharesRow(self: DataGridViewCell, e: DataGridViewCellEventArgs) -> bool """
        ...

    def CreateAccessibilityInstance(self, *args): #cannot find CLR method
        """ CreateAccessibilityInstance(self: DataGridViewCell) -> AccessibleObject """
        ...

    def DataGridViewCellAccessibleObject(self, *args): #cannot find CLR method
        """
        DataGridViewCellAccessibleObject()
        DataGridViewCellAccessibleObject(owner: DataGridViewCell)
        """
        ...

    def DetachEditingControl(self): # -> 
        """ DetachEditingControl(self: DataGridViewCell) """
        ...

    def DoubleClickUnsharesRow(self, *args): #cannot find CLR method
        """ DoubleClickUnsharesRow(self: DataGridViewCell, e: DataGridViewCellEventArgs) -> bool """
        ...

    def EnterUnsharesRow(self, *args): #cannot find CLR method
        """ EnterUnsharesRow(self: DataGridViewCell, rowIndex: int, throughMouseClick: bool) -> bool """
        ...

    def GetClipboardContent(self, *args): #cannot find CLR method
        """ GetClipboardContent(self: DataGridViewCell, rowIndex: int, firstCell: bool, lastCell: bool, inFirstRow: bool, inLastRow: bool, format: str) -> object """
        ...

    def GetContentBounds(self, rowIndex:int) -> Rectangle:
        """ GetContentBounds(self: DataGridViewCell, rowIndex: int) -> Rectangle """
        ...

    def GetEditedFormattedValue(self, rowIndex:int, context) -> object: # Not found arg types: {'context': 'DataGridViewDataErrorContexts'}
        """ GetEditedFormattedValue(self: DataGridViewCell, rowIndex: int, context: DataGridViewDataErrorContexts) -> object """
        ...

    def GetErrorIconBounds(self, *args): #cannot find CLR method
        """ GetErrorIconBounds(self: DataGridViewCell, graphics: Graphics, cellStyle: DataGridViewCellStyle, rowIndex: int) -> Rectangle """
        ...

    def GetErrorText(self, *args): #cannot find CLR method
        """ GetErrorText(self: DataGridViewCell, rowIndex: int) -> str """
        ...

    def GetFormattedValue(self, *args): #cannot find CLR method
        """ GetFormattedValue(self: DataGridViewCell, value: object, rowIndex: int, cellStyle: DataGridViewCellStyle, valueTypeConverter: TypeConverter, formattedValueTypeConverter: TypeConverter, context: DataGridViewDataErrorContexts) -> (object, DataGridViewCellStyle) """
        ...

    def GetInheritedContextMenuStrip(self, rowIndex:int) -> ContextMenuStrip:
        """ GetInheritedContextMenuStrip(self: DataGridViewCell, rowIndex: int) -> ContextMenuStrip """
        ...

    def GetInheritedState(self, rowIndex:int): # -> DataGridViewElementStates
        """ GetInheritedState(self: DataGridViewCell, rowIndex: int) -> DataGridViewElementStates """
        ...

    def GetInheritedStyle(self, inheritedCellStyle, rowIndex:int, includeColors:bool): # -> DataGridViewCellStyle # Not found arg types: {'inheritedCellStyle': 'DataGridViewCellStyle'}
        """ GetInheritedStyle(self: DataGridViewCell, inheritedCellStyle: DataGridViewCellStyle, rowIndex: int, includeColors: bool) -> DataGridViewCellStyle """
        ...

    def GetPreferredSize(self, *args): #cannot find CLR method
        """ GetPreferredSize(self: DataGridViewCell, graphics: Graphics, cellStyle: DataGridViewCellStyle, rowIndex: int, constraintSize: Size) -> Size """
        ...

    def GetSize(self, *args): #cannot find CLR method
        """ GetSize(self: DataGridViewCell, rowIndex: int) -> Size """
        ...

    def GetValue(self, *args): #cannot find CLR method
        """ GetValue(self: DataGridViewCell, rowIndex: int) -> object """
        ...

    def InitializeEditingControl(self, rowIndex:int, initialFormattedValue:object, dataGridViewCellStyle): # ->  # Not found arg types: {'dataGridViewCellStyle': 'DataGridViewCellStyle'}
        """ InitializeEditingControl(self: DataGridViewCell, rowIndex: int, initialFormattedValue: object, dataGridViewCellStyle: DataGridViewCellStyle) """
        ...

    def KeyDownUnsharesRow(self, *args): #cannot find CLR method
        """ KeyDownUnsharesRow(self: DataGridViewCell, e: KeyEventArgs, rowIndex: int) -> bool """
        ...

    def KeyEntersEditMode(self, e) -> bool: # Not found arg types: {'e': 'KeyEventArgs'}
        """ KeyEntersEditMode(self: DataGridViewCell, e: KeyEventArgs) -> bool """
        ...

    def KeyPressUnsharesRow(self, *args): #cannot find CLR method
        """ KeyPressUnsharesRow(self: DataGridViewCell, e: KeyPressEventArgs, rowIndex: int) -> bool """
        ...

    def KeyUpUnsharesRow(self, *args): #cannot find CLR method
        """ KeyUpUnsharesRow(self: DataGridViewCell, e: KeyEventArgs, rowIndex: int) -> bool """
        ...

    def LeaveUnsharesRow(self, *args): #cannot find CLR method
        """ LeaveUnsharesRow(self: DataGridViewCell, rowIndex: int, throughMouseClick: bool) -> bool """
        ...

    @staticmethod
    def MeasureTextHeight(graphics, text, font, maxWidth, flags, widthTruncated=None) -> int:
        """
        MeasureTextHeight(graphics: Graphics, text: str, font: Font, maxWidth: int, flags: TextFormatFlags) -> int
        MeasureTextHeight(graphics: Graphics, text: str, font: Font, maxWidth: int, flags: TextFormatFlags) -> (int, bool)
        """
        ...

    @staticmethod
    def MeasureTextPreferredSize(graphics:Graphics, text:str, font:Font, maxRatio:Single, flags) -> Size: # Not found arg types: {'flags': 'TextFormatFlags'}
        """ MeasureTextPreferredSize(graphics: Graphics, text: str, font: Font, maxRatio: Single, flags: TextFormatFlags) -> Size """
        ...

    @staticmethod
    def MeasureTextSize(graphics:Graphics, text:str, font:Font, flags) -> Size: # Not found arg types: {'flags': 'TextFormatFlags'}
        """ MeasureTextSize(graphics: Graphics, text: str, font: Font, flags: TextFormatFlags) -> Size """
        ...

    @staticmethod
    def MeasureTextWidth(graphics:Graphics, text:str, font:Font, maxHeight:int, flags) -> int: # Not found arg types: {'flags': 'TextFormatFlags'}
        """ MeasureTextWidth(graphics: Graphics, text: str, font: Font, maxHeight: int, flags: TextFormatFlags) -> int """
        ...

    def MouseClickUnsharesRow(self, *args): #cannot find CLR method
        """ MouseClickUnsharesRow(self: DataGridViewCell, e: DataGridViewCellMouseEventArgs) -> bool """
        ...

    def MouseDoubleClickUnsharesRow(self, *args): #cannot find CLR method
        """ MouseDoubleClickUnsharesRow(self: DataGridViewCell, e: DataGridViewCellMouseEventArgs) -> bool """
        ...

    def MouseDownUnsharesRow(self, *args): #cannot find CLR method
        """ MouseDownUnsharesRow(self: DataGridViewCell, e: DataGridViewCellMouseEventArgs) -> bool """
        ...

    def MouseEnterUnsharesRow(self, *args): #cannot find CLR method
        """ MouseEnterUnsharesRow(self: DataGridViewCell, rowIndex: int) -> bool """
        ...

    def MouseLeaveUnsharesRow(self, *args): #cannot find CLR method
        """ MouseLeaveUnsharesRow(self: DataGridViewCell, rowIndex: int) -> bool """
        ...

    def MouseMoveUnsharesRow(self, *args): #cannot find CLR method
        """ MouseMoveUnsharesRow(self: DataGridViewCell, e: DataGridViewCellMouseEventArgs) -> bool """
        ...

    def MouseUpUnsharesRow(self, *args): #cannot find CLR method
        """ MouseUpUnsharesRow(self: DataGridViewCell, e: DataGridViewCellMouseEventArgs) -> bool """
        ...

    def OnClick(self, *args): #cannot find CLR method
        """ OnClick(self: DataGridViewCell, e: DataGridViewCellEventArgs) """
        ...

    def OnContentClick(self, *args): #cannot find CLR method
        """ OnContentClick(self: DataGridViewCell, e: DataGridViewCellEventArgs) """
        ...

    def OnContentDoubleClick(self, *args): #cannot find CLR method
        """ OnContentDoubleClick(self: DataGridViewCell, e: DataGridViewCellEventArgs) """
        ...

    def OnDoubleClick(self, *args): #cannot find CLR method
        """ OnDoubleClick(self: DataGridViewCell, e: DataGridViewCellEventArgs) """
        ...

    def OnEnter(self, *args): #cannot find CLR method
        """ OnEnter(self: DataGridViewCell, rowIndex: int, throughMouseClick: bool) """
        ...

    def OnKeyDown(self, *args): #cannot find CLR method
        """ OnKeyDown(self: DataGridViewCell, e: KeyEventArgs, rowIndex: int) """
        ...

    def OnKeyPress(self, *args): #cannot find CLR method
        """ OnKeyPress(self: DataGridViewCell, e: KeyPressEventArgs, rowIndex: int) """
        ...

    def OnKeyUp(self, *args): #cannot find CLR method
        """ OnKeyUp(self: DataGridViewCell, e: KeyEventArgs, rowIndex: int) """
        ...

    def OnLeave(self, *args): #cannot find CLR method
        """ OnLeave(self: DataGridViewCell, rowIndex: int, throughMouseClick: bool) """
        ...

    def OnMouseClick(self, *args): #cannot find CLR method
        """ OnMouseClick(self: DataGridViewCell, e: DataGridViewCellMouseEventArgs) """
        ...

    def OnMouseDoubleClick(self, *args): #cannot find CLR method
        """ OnMouseDoubleClick(self: DataGridViewCell, e: DataGridViewCellMouseEventArgs) """
        ...

    def OnMouseDown(self, *args): #cannot find CLR method
        """ OnMouseDown(self: DataGridViewCell, e: DataGridViewCellMouseEventArgs) """
        ...

    def OnMouseEnter(self, *args): #cannot find CLR method
        """ OnMouseEnter(self: DataGridViewCell, rowIndex: int) """
        ...

    def OnMouseLeave(self, *args): #cannot find CLR method
        """ OnMouseLeave(self: DataGridViewCell, rowIndex: int) """
        ...

    def OnMouseMove(self, *args): #cannot find CLR method
        """ OnMouseMove(self: DataGridViewCell, e: DataGridViewCellMouseEventArgs) """
        ...

    def OnMouseUp(self, *args): #cannot find CLR method
        """ OnMouseUp(self: DataGridViewCell, e: DataGridViewCellMouseEventArgs) """
        ...

    def Paint(self, *args): #cannot find CLR method
        """ Paint(self: DataGridViewCell, graphics: Graphics, clipBounds: Rectangle, cellBounds: Rectangle, rowIndex: int, cellState: DataGridViewElementStates, value: object, formattedValue: object, errorText: str, cellStyle: DataGridViewCellStyle, advancedBorderStyle: DataGridViewAdvancedBorderStyle, paintParts: DataGridViewPaintParts) """
        ...

    def PaintBorder(self, *args): #cannot find CLR method
        """ PaintBorder(self: DataGridViewCell, graphics: Graphics, clipBounds: Rectangle, bounds: Rectangle, cellStyle: DataGridViewCellStyle, advancedBorderStyle: DataGridViewAdvancedBorderStyle) """
        ...

    def PaintErrorIcon(self, *args): #cannot find CLR method
        """ PaintErrorIcon(self: DataGridViewCell, graphics: Graphics, clipBounds: Rectangle, cellValueBounds: Rectangle, errorText: str) """
        ...

    def ParseFormattedValue(self, formattedValue:object, cellStyle, formattedValueTypeConverter:TypeConverter, valueTypeConverter:TypeConverter) -> object: # Not found arg types: {'cellStyle': 'DataGridViewCellStyle'}
        """ ParseFormattedValue(self: DataGridViewCell, formattedValue: object, cellStyle: DataGridViewCellStyle, formattedValueTypeConverter: TypeConverter, valueTypeConverter: TypeConverter) -> object """
        ...

    def PositionEditingControl(self, setLocation:bool, setSize:bool, cellBounds:Rectangle, cellClip:Rectangle, cellStyle, singleVerticalBorderAdded:bool, singleHorizontalBorderAdded:bool, isFirstDisplayedColumn:bool, isFirstDisplayedRow:bool): # ->  # Not found arg types: {'cellStyle': 'DataGridViewCellStyle'}
        """ PositionEditingControl(self: DataGridViewCell, setLocation: bool, setSize: bool, cellBounds: Rectangle, cellClip: Rectangle, cellStyle: DataGridViewCellStyle, singleVerticalBorderAdded: bool, singleHorizontalBorderAdded: bool, isFirstDisplayedColumn: bool, isFirstDisplayedRow: bool) """
        ...

    def PositionEditingPanel(self, cellBounds:Rectangle, cellClip:Rectangle, cellStyle, singleVerticalBorderAdded:bool, singleHorizontalBorderAdded:bool, isFirstDisplayedColumn:bool, isFirstDisplayedRow:bool) -> Rectangle: # Not found arg types: {'cellStyle': 'DataGridViewCellStyle'}
        """ PositionEditingPanel(self: DataGridViewCell, cellBounds: Rectangle, cellClip: Rectangle, cellStyle: DataGridViewCellStyle, singleVerticalBorderAdded: bool, singleHorizontalBorderAdded: bool, isFirstDisplayedColumn: bool, isFirstDisplayedRow: bool) -> Rectangle """
        ...

    def SetValue(self, *args): #cannot find CLR method
        """ SetValue(self: DataGridViewCell, rowIndex: int, value: object) -> bool """
        ...

    def ToString(self) -> str:
        """ ToString(self: DataGridViewCell) -> str """
        ...

    def __str__(self, *args): #cannot find CLR method
        ...



class DataGridViewButtonCell(DataGridViewCell): # skipped bases: <type 'IDisposable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewButtonCell() """
    @property
    def FlatStyle(self): # -> FlatStyle
        """
        Get: FlatStyle(self: DataGridViewButtonCell) -> FlatStyle
        Set: FlatStyle(self: DataGridViewButtonCell) = value
        """
        ...

    @property
    def UseColumnTextForButtonValue(self) -> bool:
        """
        Get: UseColumnTextForButtonValue(self: DataGridViewButtonCell) -> bool
        Set: UseColumnTextForButtonValue(self: DataGridViewButtonCell) = value
        """
        ...


    def DataGridViewButtonCellAccessibleObject(self, *args): #cannot find CLR method
        """ DataGridViewButtonCellAccessibleObject(owner: DataGridViewCell) """
        ...



class DataGridViewColumn(DataGridViewBand, IComponent): # skipped bases: <type 'IDisposable'>, <type 'ICloneable'>, <type 'object'>
    """
    DataGridViewColumn()
    DataGridViewColumn(cellTemplate: DataGridViewCell)
    """
    @property
    def AutoSizeMode(self) -> DataGridViewAutoSizeColumnMode:
        """
        Get: AutoSizeMode(self: DataGridViewColumn) -> DataGridViewAutoSizeColumnMode
        Set: AutoSizeMode(self: DataGridViewColumn) = value
        """
        ...

    @property
    def CellTemplate(self) -> DataGridViewCell:
        """
        Get: CellTemplate(self: DataGridViewColumn) -> DataGridViewCell
        Set: CellTemplate(self: DataGridViewColumn) = value
        """
        ...

    @property
    def CellType(self) -> Type:
        """ Get: CellType(self: DataGridViewColumn) -> Type """
        ...

    @property
    def DataPropertyName(self) -> str:
        """
        Get: DataPropertyName(self: DataGridViewColumn) -> str
        Set: DataPropertyName(self: DataGridViewColumn) = value
        """
        ...

    @property
    def DisplayIndex(self) -> int:
        """
        Get: DisplayIndex(self: DataGridViewColumn) -> int
        Set: DisplayIndex(self: DataGridViewColumn) = value
        """
        ...

    @property
    def DividerWidth(self) -> int:
        """
        Get: DividerWidth(self: DataGridViewColumn) -> int
        Set: DividerWidth(self: DataGridViewColumn) = value
        """
        ...

    @property
    def FillWeight(self) -> Single:
        """
        Get: FillWeight(self: DataGridViewColumn) -> Single
        Set: FillWeight(self: DataGridViewColumn) = value
        """
        ...

    @property
    def HeaderCell(self): # -> DataGridViewColumnHeaderCell
        """
        Get: HeaderCell(self: DataGridViewColumn) -> DataGridViewColumnHeaderCell
        Set: HeaderCell(self: DataGridViewColumn) = value
        """
        ...

    @property
    def HeaderText(self) -> str:
        """
        Get: HeaderText(self: DataGridViewColumn) -> str
        Set: HeaderText(self: DataGridViewColumn) = value
        """
        ...

    @property
    def InheritedAutoSizeMode(self) -> DataGridViewAutoSizeColumnMode:
        """ Get: InheritedAutoSizeMode(self: DataGridViewColumn) -> DataGridViewAutoSizeColumnMode """
        ...

    @property
    def IsDataBound(self) -> bool:
        """ Get: IsDataBound(self: DataGridViewColumn) -> bool """
        ...

    @property
    def MinimumWidth(self) -> int:
        """
        Get: MinimumWidth(self: DataGridViewColumn) -> int
        Set: MinimumWidth(self: DataGridViewColumn) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: DataGridViewColumn) -> str
        Set: Name(self: DataGridViewColumn) = value
        """
        ...

    @property
    def SortMode(self): # -> DataGridViewColumnSortMode
        """
        Get: SortMode(self: DataGridViewColumn) -> DataGridViewColumnSortMode
        Set: SortMode(self: DataGridViewColumn) = value
        """
        ...

    @property
    def ToolTipText(self) -> str:
        """
        Get: ToolTipText(self: DataGridViewColumn) -> str
        Set: ToolTipText(self: DataGridViewColumn) = value
        """
        ...

    @property
    def ValueType(self) -> Type:
        """
        Get: ValueType(self: DataGridViewColumn) -> Type
        Set: ValueType(self: DataGridViewColumn) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: DataGridViewColumn) -> int
        Set: Width(self: DataGridViewColumn) = value
        """
        ...


    def GetPreferredWidth(self, autoSizeColumnMode:DataGridViewAutoSizeColumnMode, fixedHeight:bool) -> int:
        """ GetPreferredWidth(self: DataGridViewColumn, autoSizeColumnMode: DataGridViewAutoSizeColumnMode, fixedHeight: bool) -> int """
        ...

    def __new__(cls, cellTemplate:DataGridViewCell = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, cellTemplate: DataGridViewCell)
        """
        ...

    Disposed = ...


class DataGridViewButtonColumn(DataGridViewColumn): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewButtonColumn() """
    @property
    def FlatStyle(self): # -> FlatStyle
        """
        Get: FlatStyle(self: DataGridViewButtonColumn) -> FlatStyle
        Set: FlatStyle(self: DataGridViewButtonColumn) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: DataGridViewButtonColumn) -> str
        Set: Text(self: DataGridViewButtonColumn) = value
        """
        ...

    @property
    def UseColumnTextForButtonValue(self) -> bool:
        """
        Get: UseColumnTextForButtonValue(self: DataGridViewButtonColumn) -> bool
        Set: UseColumnTextForButtonValue(self: DataGridViewButtonColumn) = value
        """
        ...



class DataGridViewCellBorderStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridViewCellBorderStyle, values: Custom (0), None (4), Raised (2), RaisedHorizontal (9), RaisedVertical (6), Single (1), SingleHorizontal (8), SingleVertical (5), Sunken (3), SunkenHorizontal (10), SunkenVertical (7) """
    Custom: DataGridViewCellBorderStyle = ...
    Raised: DataGridViewCellBorderStyle = ...
    RaisedHorizontal: DataGridViewCellBorderStyle = ...
    RaisedVertical: DataGridViewCellBorderStyle = ...
    Single: DataGridViewCellBorderStyle = ...
    SingleHorizontal: DataGridViewCellBorderStyle = ...
    SingleVertical: DataGridViewCellBorderStyle = ...
    Sunken: DataGridViewCellBorderStyle = ...
    SunkenHorizontal: DataGridViewCellBorderStyle = ...
    SunkenVertical: DataGridViewCellBorderStyle = ...
    value__ = ...


class DataGridViewCellCancelEventArgs(CancelEventArgs): # skipped bases: <type 'object'>
    """ DataGridViewCellCancelEventArgs(columnIndex: int, rowIndex: int) """
    @property
    def ColumnIndex(self) -> int:
        """ Get: ColumnIndex(self: DataGridViewCellCancelEventArgs) -> int """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: DataGridViewCellCancelEventArgs) -> int """
        ...



class DataGridViewCellCancelEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewCellCancelEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewCellCancelEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewCellCancelEventHandler, sender: object, e: DataGridViewCellCancelEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewCellCancelEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewCellCancelEventArgs): # -> 
        """ Invoke(self: DataGridViewCellCancelEventHandler, sender: object, e: DataGridViewCellCancelEventArgs) """
        ...


class DataGridViewCellCollection(BaseCollection, IList): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ DataGridViewCellCollection(dataGridViewRow: DataGridViewRow) """
    def AddRange(self, dataGridViewCells:Array): # -> 
        """ AddRange(self: DataGridViewCellCollection, *dataGridViewCells: Array[DataGridViewCell]) """
        ...

    def OnCollectionChanged(self, *args): #cannot find CLR method
        """ OnCollectionChanged(self: DataGridViewCellCollection, e: CollectionChangeEventArgs) """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ Contains(self: IList, value: object) -> bool """
        ...

    def __new__(cls, dataGridViewRow) -> Self: # Not found arg types: {'dataGridViewRow': 'DataGridViewRow'}
        """ __new__(cls: type, dataGridViewRow: DataGridViewRow) """
        ...

    CollectionChanged = ...


class DataGridViewCellEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DataGridViewCellEventArgs(columnIndex: int, rowIndex: int) """
    @property
    def ColumnIndex(self) -> int:
        """ Get: ColumnIndex(self: DataGridViewCellEventArgs) -> int """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: DataGridViewCellEventArgs) -> int """
        ...


    def __new__(cls, columnIndex:int, rowIndex:int) -> Self:
        """ __new__(cls: type, columnIndex: int, rowIndex: int) """
        ...


class DataGridViewCellContextMenuStripNeededEventArgs(DataGridViewCellEventArgs): # skipped bases: <type 'object'>
    """ DataGridViewCellContextMenuStripNeededEventArgs(columnIndex: int, rowIndex: int) """
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip:
        """
        Get: ContextMenuStrip(self: DataGridViewCellContextMenuStripNeededEventArgs) -> ContextMenuStrip
        Set: ContextMenuStrip(self: DataGridViewCellContextMenuStripNeededEventArgs) = value
        """
        ...



class DataGridViewCellContextMenuStripNeededEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewCellContextMenuStripNeededEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewCellContextMenuStripNeededEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewCellContextMenuStripNeededEventHandler, sender: object, e: DataGridViewCellContextMenuStripNeededEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewCellContextMenuStripNeededEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewCellContextMenuStripNeededEventArgs): # -> 
        """ Invoke(self: DataGridViewCellContextMenuStripNeededEventHandler, sender: object, e: DataGridViewCellContextMenuStripNeededEventArgs) """
        ...


class DataGridViewCellErrorTextNeededEventArgs(DataGridViewCellEventArgs): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ErrorText(self) -> str:
        """
        Get: ErrorText(self: DataGridViewCellErrorTextNeededEventArgs) -> str
        Set: ErrorText(self: DataGridViewCellErrorTextNeededEventArgs) = value
        """
        ...



class DataGridViewCellErrorTextNeededEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewCellErrorTextNeededEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewCellErrorTextNeededEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewCellErrorTextNeededEventHandler, sender: object, e: DataGridViewCellErrorTextNeededEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewCellErrorTextNeededEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewCellErrorTextNeededEventArgs): # -> 
        """ Invoke(self: DataGridViewCellErrorTextNeededEventHandler, sender: object, e: DataGridViewCellErrorTextNeededEventArgs) """
        ...


class DataGridViewCellEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewCellEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewCellEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewCellEventHandler, sender: object, e: DataGridViewCellEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewCellEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewCellEventArgs): # -> 
        """ Invoke(self: DataGridViewCellEventHandler, sender: object, e: DataGridViewCellEventArgs) """
        ...


class DataGridViewCellFormattingEventArgs(ConvertEventArgs): # skipped bases: <type 'object'>
    """ DataGridViewCellFormattingEventArgs(columnIndex: int, rowIndex: int, value: object, desiredType: Type, cellStyle: DataGridViewCellStyle) """
    @property
    def CellStyle(self): # -> DataGridViewCellStyle
        """
        Get: CellStyle(self: DataGridViewCellFormattingEventArgs) -> DataGridViewCellStyle
        Set: CellStyle(self: DataGridViewCellFormattingEventArgs) = value
        """
        ...

    @property
    def ColumnIndex(self) -> int:
        """ Get: ColumnIndex(self: DataGridViewCellFormattingEventArgs) -> int """
        ...

    @property
    def FormattingApplied(self) -> bool:
        """
        Get: FormattingApplied(self: DataGridViewCellFormattingEventArgs) -> bool
        Set: FormattingApplied(self: DataGridViewCellFormattingEventArgs) = value
        """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: DataGridViewCellFormattingEventArgs) -> int """
        ...



class DataGridViewCellFormattingEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewCellFormattingEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewCellFormattingEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewCellFormattingEventHandler, sender: object, e: DataGridViewCellFormattingEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewCellFormattingEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewCellFormattingEventArgs): # -> 
        """ Invoke(self: DataGridViewCellFormattingEventHandler, sender: object, e: DataGridViewCellFormattingEventArgs) """
        ...


class MouseEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ MouseEventArgs(button: MouseButtons, clicks: int, x: int, y: int, delta: int) """
    @property
    def Button(self): # -> MouseButtons
        """ Get: Button(self: MouseEventArgs) -> MouseButtons """
        ...

    @property
    def Clicks(self) -> int:
        """ Get: Clicks(self: MouseEventArgs) -> int """
        ...

    @property
    def Delta(self) -> int:
        """ Get: Delta(self: MouseEventArgs) -> int """
        ...

    @property
    def Location(self) -> Point:
        """ Get: Location(self: MouseEventArgs) -> Point """
        ...

    @property
    def X(self) -> int:
        """ Get: X(self: MouseEventArgs) -> int """
        ...

    @property
    def Y(self) -> int:
        """ Get: Y(self: MouseEventArgs) -> int """
        ...


    def __new__(cls, button, clicks:int, x:int, y:int, delta:int) -> Self: # Not found arg types: {'button': 'MouseButtons'}
        """ __new__(cls: type, button: MouseButtons, clicks: int, x: int, y: int, delta: int) """
        ...


class DataGridViewCellMouseEventArgs(MouseEventArgs): # skipped bases: <type 'object'>
    """ DataGridViewCellMouseEventArgs(columnIndex: int, rowIndex: int, localX: int, localY: int, e: MouseEventArgs) """
    @property
    def ColumnIndex(self) -> int:
        """ Get: ColumnIndex(self: DataGridViewCellMouseEventArgs) -> int """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: DataGridViewCellMouseEventArgs) -> int """
        ...



class DataGridViewCellMouseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewCellMouseEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewCellMouseEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewCellMouseEventHandler, sender: object, e: DataGridViewCellMouseEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewCellMouseEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewCellMouseEventArgs): # -> 
        """ Invoke(self: DataGridViewCellMouseEventHandler, sender: object, e: DataGridViewCellMouseEventArgs) """
        ...


class DataGridViewCellPaintingEventArgs(HandledEventArgs): # skipped bases: <type 'object'>
    """ DataGridViewCellPaintingEventArgs(dataGridView: DataGridView, graphics: Graphics, clipBounds: Rectangle, cellBounds: Rectangle, rowIndex: int, columnIndex: int, cellState: DataGridViewElementStates, value: object, formattedValue: object, errorText: str, cellStyle: DataGridViewCellStyle, advancedBorderStyle: DataGridViewAdvancedBorderStyle, paintParts: DataGridViewPaintParts) """
    @property
    def AdvancedBorderStyle(self) -> DataGridViewAdvancedBorderStyle:
        """ Get: AdvancedBorderStyle(self: DataGridViewCellPaintingEventArgs) -> DataGridViewAdvancedBorderStyle """
        ...

    @property
    def CellBounds(self) -> Rectangle:
        """ Get: CellBounds(self: DataGridViewCellPaintingEventArgs) -> Rectangle """
        ...

    @property
    def CellStyle(self): # -> DataGridViewCellStyle
        """ Get: CellStyle(self: DataGridViewCellPaintingEventArgs) -> DataGridViewCellStyle """
        ...

    @property
    def ClipBounds(self) -> Rectangle:
        """ Get: ClipBounds(self: DataGridViewCellPaintingEventArgs) -> Rectangle """
        ...

    @property
    def ColumnIndex(self) -> int:
        """ Get: ColumnIndex(self: DataGridViewCellPaintingEventArgs) -> int """
        ...

    @property
    def ErrorText(self) -> str:
        """ Get: ErrorText(self: DataGridViewCellPaintingEventArgs) -> str """
        ...

    @property
    def FormattedValue(self) -> object:
        """ Get: FormattedValue(self: DataGridViewCellPaintingEventArgs) -> object """
        ...

    @property
    def Graphics(self) -> Graphics:
        """ Get: Graphics(self: DataGridViewCellPaintingEventArgs) -> Graphics """
        ...

    @property
    def PaintParts(self): # -> DataGridViewPaintParts
        """ Get: PaintParts(self: DataGridViewCellPaintingEventArgs) -> DataGridViewPaintParts """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: DataGridViewCellPaintingEventArgs) -> int """
        ...

    @property
    def State(self): # -> DataGridViewElementStates
        """ Get: State(self: DataGridViewCellPaintingEventArgs) -> DataGridViewElementStates """
        ...

    @property
    def Value(self) -> object:
        """ Get: Value(self: DataGridViewCellPaintingEventArgs) -> object """
        ...


    def Paint(self, clipBounds:Rectangle, paintParts): # ->  # Not found arg types: {'paintParts': 'DataGridViewPaintParts'}
        """ Paint(self: DataGridViewCellPaintingEventArgs, clipBounds: Rectangle, paintParts: DataGridViewPaintParts) """
        ...

    def PaintBackground(self, clipBounds:Rectangle, cellsPaintSelectionBackground:bool): # -> 
        """ PaintBackground(self: DataGridViewCellPaintingEventArgs, clipBounds: Rectangle, cellsPaintSelectionBackground: bool) """
        ...

    def PaintContent(self, clipBounds:Rectangle): # -> 
        """ PaintContent(self: DataGridViewCellPaintingEventArgs, clipBounds: Rectangle) """
        ...


class DataGridViewCellPaintingEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewCellPaintingEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewCellPaintingEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewCellPaintingEventHandler, sender: object, e: DataGridViewCellPaintingEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewCellPaintingEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewCellPaintingEventArgs): # -> 
        """ Invoke(self: DataGridViewCellPaintingEventHandler, sender: object, e: DataGridViewCellPaintingEventArgs) """
        ...


class DataGridViewCellParsingEventArgs(ConvertEventArgs): # skipped bases: <type 'object'>
    """ DataGridViewCellParsingEventArgs(rowIndex: int, columnIndex: int, value: object, desiredType: Type, inheritedCellStyle: DataGridViewCellStyle) """
    @property
    def ColumnIndex(self) -> int:
        """ Get: ColumnIndex(self: DataGridViewCellParsingEventArgs) -> int """
        ...

    @property
    def InheritedCellStyle(self): # -> DataGridViewCellStyle
        """
        Get: InheritedCellStyle(self: DataGridViewCellParsingEventArgs) -> DataGridViewCellStyle
        Set: InheritedCellStyle(self: DataGridViewCellParsingEventArgs) = value
        """
        ...

    @property
    def ParsingApplied(self) -> bool:
        """
        Get: ParsingApplied(self: DataGridViewCellParsingEventArgs) -> bool
        Set: ParsingApplied(self: DataGridViewCellParsingEventArgs) = value
        """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: DataGridViewCellParsingEventArgs) -> int """
        ...



class DataGridViewCellParsingEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewCellParsingEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewCellParsingEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewCellParsingEventHandler, sender: object, e: DataGridViewCellParsingEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewCellParsingEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewCellParsingEventArgs): # -> 
        """ Invoke(self: DataGridViewCellParsingEventHandler, sender: object, e: DataGridViewCellParsingEventArgs) """
        ...


class DataGridViewCellStateChangedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DataGridViewCellStateChangedEventArgs(dataGridViewCell: DataGridViewCell, stateChanged: DataGridViewElementStates) """
    @property
    def Cell(self) -> DataGridViewCell:
        """ Get: Cell(self: DataGridViewCellStateChangedEventArgs) -> DataGridViewCell """
        ...

    @property
    def StateChanged(self): # -> DataGridViewElementStates
        """ Get: StateChanged(self: DataGridViewCellStateChangedEventArgs) -> DataGridViewElementStates """
        ...


    def __new__(cls, dataGridViewCell:DataGridViewCell, stateChanged) -> Self: # Not found arg types: {'stateChanged': 'DataGridViewElementStates'}
        """ __new__(cls: type, dataGridViewCell: DataGridViewCell, stateChanged: DataGridViewElementStates) """
        ...


class DataGridViewCellStateChangedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewCellStateChangedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewCellStateChangedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewCellStateChangedEventHandler, sender: object, e: DataGridViewCellStateChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewCellStateChangedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewCellStateChangedEventArgs): # -> 
        """ Invoke(self: DataGridViewCellStateChangedEventHandler, sender: object, e: DataGridViewCellStateChangedEventArgs) """
        ...


class DataGridViewCellStyle(ICloneable): # skipped bases: <type 'object'>
    """
    DataGridViewCellStyle()
    DataGridViewCellStyle(dataGridViewCellStyle: DataGridViewCellStyle)
    """
    @property
    def Alignment(self): # -> DataGridViewContentAlignment
        """
        Get: Alignment(self: DataGridViewCellStyle) -> DataGridViewContentAlignment
        Set: Alignment(self: DataGridViewCellStyle) = value
        """
        ...

    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: DataGridViewCellStyle) -> Color
        Set: BackColor(self: DataGridViewCellStyle) = value
        """
        ...

    @property
    def DataSourceNullValue(self) -> object:
        """
        Get: DataSourceNullValue(self: DataGridViewCellStyle) -> object
        Set: DataSourceNullValue(self: DataGridViewCellStyle) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: DataGridViewCellStyle) -> Font
        Set: Font(self: DataGridViewCellStyle) = value
        """
        ...

    @property
    def ForeColor(self) -> Color:
        """
        Get: ForeColor(self: DataGridViewCellStyle) -> Color
        Set: ForeColor(self: DataGridViewCellStyle) = value
        """
        ...

    @property
    def Format(self) -> str:
        """
        Get: Format(self: DataGridViewCellStyle) -> str
        Set: Format(self: DataGridViewCellStyle) = value
        """
        ...

    @property
    def FormatProvider(self) -> IFormatProvider:
        """
        Get: FormatProvider(self: DataGridViewCellStyle) -> IFormatProvider
        Set: FormatProvider(self: DataGridViewCellStyle) = value
        """
        ...

    @property
    def IsDataSourceNullValueDefault(self) -> bool:
        """ Get: IsDataSourceNullValueDefault(self: DataGridViewCellStyle) -> bool """
        ...

    @property
    def IsFormatProviderDefault(self) -> bool:
        """ Get: IsFormatProviderDefault(self: DataGridViewCellStyle) -> bool """
        ...

    @property
    def IsNullValueDefault(self) -> bool:
        """ Get: IsNullValueDefault(self: DataGridViewCellStyle) -> bool """
        ...

    @property
    def NullValue(self) -> object:
        """
        Get: NullValue(self: DataGridViewCellStyle) -> object
        Set: NullValue(self: DataGridViewCellStyle) = value
        """
        ...

    @property
    def Padding(self): # -> Padding
        """
        Get: Padding(self: DataGridViewCellStyle) -> Padding
        Set: Padding(self: DataGridViewCellStyle) = value
        """
        ...

    @property
    def SelectionBackColor(self) -> Color:
        """
        Get: SelectionBackColor(self: DataGridViewCellStyle) -> Color
        Set: SelectionBackColor(self: DataGridViewCellStyle) = value
        """
        ...

    @property
    def SelectionForeColor(self) -> Color:
        """
        Get: SelectionForeColor(self: DataGridViewCellStyle) -> Color
        Set: SelectionForeColor(self: DataGridViewCellStyle) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: DataGridViewCellStyle) -> object
        Set: Tag(self: DataGridViewCellStyle) = value
        """
        ...

    @property
    def WrapMode(self): # -> DataGridViewTriState
        """
        Get: WrapMode(self: DataGridViewCellStyle) -> DataGridViewTriState
        Set: WrapMode(self: DataGridViewCellStyle) = value
        """
        ...


    def ApplyStyle(self, dataGridViewCellStyle:DataGridViewCellStyle): # -> 
        """ ApplyStyle(self: DataGridViewCellStyle, dataGridViewCellStyle: DataGridViewCellStyle) """
        ...

    def Equals(self, o:object) -> bool:
        """ Equals(self: DataGridViewCellStyle, o: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: DataGridViewCellStyle) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: DataGridViewCellStyle) -> str """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class DataGridViewCellStyleContentChangedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def CellStyle(self) -> DataGridViewCellStyle:
        """ Get: CellStyle(self: DataGridViewCellStyleContentChangedEventArgs) -> DataGridViewCellStyle """
        ...

    @property
    def CellStyleScope(self): # -> DataGridViewCellStyleScopes
        """ Get: CellStyleScope(self: DataGridViewCellStyleContentChangedEventArgs) -> DataGridViewCellStyleScopes """
        ...



class DataGridViewCellStyleContentChangedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewCellStyleContentChangedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewCellStyleContentChangedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewCellStyleContentChangedEventHandler, sender: object, e: DataGridViewCellStyleContentChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewCellStyleContentChangedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewCellStyleContentChangedEventArgs): # -> 
        """ Invoke(self: DataGridViewCellStyleContentChangedEventHandler, sender: object, e: DataGridViewCellStyleContentChangedEventArgs) """
        ...


class DataGridViewCellStyleConverter(TypeConverter): # skipped bases: <type 'object'>
    """ DataGridViewCellStyleConverter() """
    pass

class DataGridViewCellStyleScopes(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) DataGridViewCellStyleScopes, values: AlternatingRows (128), Cell (1), Column (2), ColumnHeaders (16), DataGridView (8), None (0), Row (4), RowHeaders (32), Rows (64) """
    AlternatingRows: DataGridViewCellStyleScopes = ...
    Cell: DataGridViewCellStyleScopes = ...
    Column: DataGridViewCellStyleScopes = ...
    ColumnHeaders: DataGridViewCellStyleScopes = ...
    DataGridView: DataGridViewCellStyleScopes = ...
    Row: DataGridViewCellStyleScopes = ...
    RowHeaders: DataGridViewCellStyleScopes = ...
    Rows: DataGridViewCellStyleScopes = ...
    value__ = ...


class DataGridViewCellToolTipTextNeededEventArgs(DataGridViewCellEventArgs): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ToolTipText(self) -> str:
        """
        Get: ToolTipText(self: DataGridViewCellToolTipTextNeededEventArgs) -> str
        Set: ToolTipText(self: DataGridViewCellToolTipTextNeededEventArgs) = value
        """
        ...



class DataGridViewCellToolTipTextNeededEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewCellToolTipTextNeededEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewCellToolTipTextNeededEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewCellToolTipTextNeededEventHandler, sender: object, e: DataGridViewCellToolTipTextNeededEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewCellToolTipTextNeededEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewCellToolTipTextNeededEventArgs): # -> 
        """ Invoke(self: DataGridViewCellToolTipTextNeededEventHandler, sender: object, e: DataGridViewCellToolTipTextNeededEventArgs) """
        ...


class DataGridViewCellValidatingEventArgs(CancelEventArgs): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ColumnIndex(self) -> int:
        """ Get: ColumnIndex(self: DataGridViewCellValidatingEventArgs) -> int """
        ...

    @property
    def FormattedValue(self) -> object:
        """ Get: FormattedValue(self: DataGridViewCellValidatingEventArgs) -> object """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: DataGridViewCellValidatingEventArgs) -> int """
        ...



class DataGridViewCellValidatingEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewCellValidatingEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewCellValidatingEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewCellValidatingEventHandler, sender: object, e: DataGridViewCellValidatingEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewCellValidatingEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewCellValidatingEventArgs): # -> 
        """ Invoke(self: DataGridViewCellValidatingEventHandler, sender: object, e: DataGridViewCellValidatingEventArgs) """
        ...


class DataGridViewCellValueEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DataGridViewCellValueEventArgs(columnIndex: int, rowIndex: int) """
    @property
    def ColumnIndex(self) -> int:
        """ Get: ColumnIndex(self: DataGridViewCellValueEventArgs) -> int """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: DataGridViewCellValueEventArgs) -> int """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: DataGridViewCellValueEventArgs) -> object
        Set: Value(self: DataGridViewCellValueEventArgs) = value
        """
        ...


    def __new__(cls, columnIndex:int, rowIndex:int) -> Self:
        """ __new__(cls: type, columnIndex: int, rowIndex: int) """
        ...


class DataGridViewCellValueEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewCellValueEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewCellValueEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewCellValueEventHandler, sender: object, e: DataGridViewCellValueEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewCellValueEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewCellValueEventArgs): # -> 
        """ Invoke(self: DataGridViewCellValueEventHandler, sender: object, e: DataGridViewCellValueEventArgs) """
        ...


class DataGridViewCheckBoxCell(DataGridViewCell, IDataGridViewEditingCell): # skipped bases: <type 'IDisposable'>, <type 'ICloneable'>, <type 'object'>
    """
    DataGridViewCheckBoxCell()
    DataGridViewCheckBoxCell(threeState: bool)
    """
    @property
    def FalseValue(self) -> object:
        """
        Get: FalseValue(self: DataGridViewCheckBoxCell) -> object
        Set: FalseValue(self: DataGridViewCheckBoxCell) = value
        """
        ...

    @property
    def FlatStyle(self): # -> FlatStyle
        """
        Get: FlatStyle(self: DataGridViewCheckBoxCell) -> FlatStyle
        Set: FlatStyle(self: DataGridViewCheckBoxCell) = value
        """
        ...

    @property
    def IndeterminateValue(self) -> object:
        """
        Get: IndeterminateValue(self: DataGridViewCheckBoxCell) -> object
        Set: IndeterminateValue(self: DataGridViewCheckBoxCell) = value
        """
        ...

    @property
    def ThreeState(self) -> bool:
        """
        Get: ThreeState(self: DataGridViewCheckBoxCell) -> bool
        Set: ThreeState(self: DataGridViewCheckBoxCell) = value
        """
        ...

    @property
    def TrueValue(self) -> object:
        """
        Get: TrueValue(self: DataGridViewCheckBoxCell) -> object
        Set: TrueValue(self: DataGridViewCheckBoxCell) = value
        """
        ...


    def DataGridViewCheckBoxCellAccessibleObject(self, *args): #cannot find CLR method
        """ DataGridViewCheckBoxCellAccessibleObject(owner: DataGridViewCell) """
        ...

    def __new__(cls, threeState:bool = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, threeState: bool)
        """
        ...



class DataGridViewCheckBoxColumn(DataGridViewColumn): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'ICloneable'>, <type 'object'>
    """
    DataGridViewCheckBoxColumn()
    DataGridViewCheckBoxColumn(threeState: bool)
    """
    @property
    def FalseValue(self) -> object:
        """
        Get: FalseValue(self: DataGridViewCheckBoxColumn) -> object
        Set: FalseValue(self: DataGridViewCheckBoxColumn) = value
        """
        ...

    @property
    def FlatStyle(self): # -> FlatStyle
        """
        Get: FlatStyle(self: DataGridViewCheckBoxColumn) -> FlatStyle
        Set: FlatStyle(self: DataGridViewCheckBoxColumn) = value
        """
        ...

    @property
    def IndeterminateValue(self) -> object:
        """
        Get: IndeterminateValue(self: DataGridViewCheckBoxColumn) -> object
        Set: IndeterminateValue(self: DataGridViewCheckBoxColumn) = value
        """
        ...

    @property
    def ThreeState(self) -> bool:
        """
        Get: ThreeState(self: DataGridViewCheckBoxColumn) -> bool
        Set: ThreeState(self: DataGridViewCheckBoxColumn) = value
        """
        ...

    @property
    def TrueValue(self) -> object:
        """
        Get: TrueValue(self: DataGridViewCheckBoxColumn) -> object
        Set: TrueValue(self: DataGridViewCheckBoxColumn) = value
        """
        ...



class DataGridViewClipboardCopyMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridViewClipboardCopyMode, values: Disable (0), EnableAlwaysIncludeHeaderText (3), EnableWithAutoHeaderText (1), EnableWithoutHeaderText (2) """
    Disable: DataGridViewClipboardCopyMode = ...
    EnableAlwaysIncludeHeaderText: DataGridViewClipboardCopyMode = ...
    EnableWithAutoHeaderText: DataGridViewClipboardCopyMode = ...
    EnableWithoutHeaderText: DataGridViewClipboardCopyMode = ...
    value__ = ...


class DataGridViewColumnCollection(BaseCollection, IList): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ DataGridViewColumnCollection(dataGridView: DataGridView) """
    @property
    def DataGridView(self):
        ...


    def AddRange(self, dataGridViewColumns:Array): # -> 
        """ AddRange(self: DataGridViewColumnCollection, *dataGridViewColumns: Array[DataGridViewColumn]) """
        ...

    def GetColumnCount(self, includeFilter) -> int: # Not found arg types: {'includeFilter': 'DataGridViewElementStates'}
        """ GetColumnCount(self: DataGridViewColumnCollection, includeFilter: DataGridViewElementStates) -> int """
        ...

    def GetColumnsWidth(self, includeFilter) -> int: # Not found arg types: {'includeFilter': 'DataGridViewElementStates'}
        """ GetColumnsWidth(self: DataGridViewColumnCollection, includeFilter: DataGridViewElementStates) -> int """
        ...

    def GetFirstColumn(self, includeFilter, excludeFilter = ...) -> DataGridViewColumn: # Not found arg types: {'includeFilter': 'DataGridViewElementStates', 'excludeFilter': 'DataGridViewElementStates'}
        """
        GetFirstColumn(self: DataGridViewColumnCollection, includeFilter: DataGridViewElementStates) -> DataGridViewColumn
        GetFirstColumn(self: DataGridViewColumnCollection, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> DataGridViewColumn
        """
        ...

    def GetLastColumn(self, includeFilter, excludeFilter) -> DataGridViewColumn: # Not found arg types: {'includeFilter': 'DataGridViewElementStates', 'excludeFilter': 'DataGridViewElementStates'}
        """ GetLastColumn(self: DataGridViewColumnCollection, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> DataGridViewColumn """
        ...

    def GetNextColumn(self, dataGridViewColumnStart:DataGridViewColumn, includeFilter, excludeFilter) -> DataGridViewColumn: # Not found arg types: {'includeFilter': 'DataGridViewElementStates', 'excludeFilter': 'DataGridViewElementStates'}
        """ GetNextColumn(self: DataGridViewColumnCollection, dataGridViewColumnStart: DataGridViewColumn, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> DataGridViewColumn """
        ...

    def GetPreviousColumn(self, dataGridViewColumnStart:DataGridViewColumn, includeFilter, excludeFilter) -> DataGridViewColumn: # Not found arg types: {'includeFilter': 'DataGridViewElementStates', 'excludeFilter': 'DataGridViewElementStates'}
        """ GetPreviousColumn(self: DataGridViewColumnCollection, dataGridViewColumnStart: DataGridViewColumn, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> DataGridViewColumn """
        ...

    def OnCollectionChanged(self, *args): #cannot find CLR method
        """ OnCollectionChanged(self: DataGridViewColumnCollection, e: CollectionChangeEventArgs) """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ Contains(self: IList, value: object) -> bool """
        ...

    def __new__(cls, dataGridView:DataGridView) -> Self:
        """ __new__(cls: type, dataGridView: DataGridView) """
        ...

    CollectionChanged = ...


class DataGridViewColumnDesignTimeVisibleAttribute(Attribute): # skipped bases: <type '_Attribute'>, <type 'object'>
    """
    DataGridViewColumnDesignTimeVisibleAttribute(visible: bool)
    DataGridViewColumnDesignTimeVisibleAttribute()
    """
    @property
    def Visible(self) -> bool:
        """ Get: Visible(self: DataGridViewColumnDesignTimeVisibleAttribute) -> bool """
        ...


    def __new__(cls, visible:bool = ...) -> Self:
        """
        __new__(cls: type, visible: bool)
        __new__(cls: type)
        """
        ...

    Default: DataGridViewColumnDesignTimeVisibleAttribute = ...
    No: DataGridViewColumnDesignTimeVisibleAttribute = ...
    Yes: DataGridViewColumnDesignTimeVisibleAttribute = ...


class HandledMouseEventArgs(MouseEventArgs): # skipped bases: <type 'object'>
    """
    HandledMouseEventArgs(button: MouseButtons, clicks: int, x: int, y: int, delta: int)
    HandledMouseEventArgs(button: MouseButtons, clicks: int, x: int, y: int, delta: int, defaultHandledValue: bool)
    """
    @property
    def Handled(self) -> bool:
        """
        Get: Handled(self: HandledMouseEventArgs) -> bool
        Set: Handled(self: HandledMouseEventArgs) = value
        """
        ...



class DataGridViewColumnDividerDoubleClickEventArgs(HandledMouseEventArgs): # skipped bases: <type 'object'>
    """ DataGridViewColumnDividerDoubleClickEventArgs(columnIndex: int, e: HandledMouseEventArgs) """
    @property
    def ColumnIndex(self) -> int:
        """ Get: ColumnIndex(self: DataGridViewColumnDividerDoubleClickEventArgs) -> int """
        ...



class DataGridViewColumnDividerDoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewColumnDividerDoubleClickEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewColumnDividerDoubleClickEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewColumnDividerDoubleClickEventHandler, sender: object, e: DataGridViewColumnDividerDoubleClickEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewColumnDividerDoubleClickEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewColumnDividerDoubleClickEventArgs): # -> 
        """ Invoke(self: DataGridViewColumnDividerDoubleClickEventHandler, sender: object, e: DataGridViewColumnDividerDoubleClickEventArgs) """
        ...


class DataGridViewColumnEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DataGridViewColumnEventArgs(dataGridViewColumn: DataGridViewColumn) """
    @property
    def Column(self) -> DataGridViewColumn:
        """ Get: Column(self: DataGridViewColumnEventArgs) -> DataGridViewColumn """
        ...


    def __new__(cls, dataGridViewColumn:DataGridViewColumn) -> Self:
        """ __new__(cls: type, dataGridViewColumn: DataGridViewColumn) """
        ...


class DataGridViewColumnEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewColumnEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewColumnEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewColumnEventHandler, sender: object, e: DataGridViewColumnEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewColumnEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewColumnEventArgs): # -> 
        """ Invoke(self: DataGridViewColumnEventHandler, sender: object, e: DataGridViewColumnEventArgs) """
        ...


class DataGridViewHeaderCell(DataGridViewCell): # skipped bases: <type 'IDisposable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewHeaderCell() """
    @property
    def ButtonState(self):
        ...



class DataGridViewColumnHeaderCell(DataGridViewHeaderCell): # skipped bases: <type 'IDisposable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewColumnHeaderCell() """
    @property
    def SortGlyphDirection(self) -> SortOrder:
        """
        Get: SortGlyphDirection(self: DataGridViewColumnHeaderCell) -> SortOrder
        Set: SortGlyphDirection(self: DataGridViewColumnHeaderCell) = value
        """
        ...


    def DataGridViewColumnHeaderCellAccessibleObject(self, *args): #cannot find CLR method
        """ DataGridViewColumnHeaderCellAccessibleObject(owner: DataGridViewColumnHeaderCell) """
        ...

    def GetInheritedStyle(self, inheritedCellStyle:DataGridViewCellStyle, rowIndex:int, includeColors:bool) -> DataGridViewCellStyle:
        """ GetInheritedStyle(self: DataGridViewColumnHeaderCell, inheritedCellStyle: DataGridViewCellStyle, rowIndex: int, includeColors: bool) -> DataGridViewCellStyle """
        ...



class DataGridViewColumnHeadersHeightSizeMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridViewColumnHeadersHeightSizeMode, values: AutoSize (2), DisableResizing (1), EnableResizing (0) """
    AutoSize: DataGridViewColumnHeadersHeightSizeMode = ...
    DisableResizing: DataGridViewColumnHeadersHeightSizeMode = ...
    EnableResizing: DataGridViewColumnHeadersHeightSizeMode = ...
    value__ = ...


class DataGridViewColumnSortMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridViewColumnSortMode, values: Automatic (1), NotSortable (0), Programmatic (2) """
    Automatic: DataGridViewColumnSortMode = ...
    NotSortable: DataGridViewColumnSortMode = ...
    Programmatic: DataGridViewColumnSortMode = ...
    value__ = ...


class DataGridViewColumnStateChangedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DataGridViewColumnStateChangedEventArgs(dataGridViewColumn: DataGridViewColumn, stateChanged: DataGridViewElementStates) """
    @property
    def Column(self) -> DataGridViewColumn:
        """ Get: Column(self: DataGridViewColumnStateChangedEventArgs) -> DataGridViewColumn """
        ...

    @property
    def StateChanged(self): # -> DataGridViewElementStates
        """ Get: StateChanged(self: DataGridViewColumnStateChangedEventArgs) -> DataGridViewElementStates """
        ...


    def __new__(cls, dataGridViewColumn:DataGridViewColumn, stateChanged) -> Self: # Not found arg types: {'stateChanged': 'DataGridViewElementStates'}
        """ __new__(cls: type, dataGridViewColumn: DataGridViewColumn, stateChanged: DataGridViewElementStates) """
        ...


class DataGridViewColumnStateChangedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewColumnStateChangedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewColumnStateChangedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewColumnStateChangedEventHandler, sender: object, e: DataGridViewColumnStateChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewColumnStateChangedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewColumnStateChangedEventArgs): # -> 
        """ Invoke(self: DataGridViewColumnStateChangedEventHandler, sender: object, e: DataGridViewColumnStateChangedEventArgs) """
        ...


class DataGridViewComboBoxCell(DataGridViewCell): # skipped bases: <type 'IDisposable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewComboBoxCell() """
    @property
    def AutoComplete(self) -> bool:
        """
        Get: AutoComplete(self: DataGridViewComboBoxCell) -> bool
        Set: AutoComplete(self: DataGridViewComboBoxCell) = value
        """
        ...

    @property
    def DataSource(self) -> object:
        """
        Get: DataSource(self: DataGridViewComboBoxCell) -> object
        Set: DataSource(self: DataGridViewComboBoxCell) = value
        """
        ...

    @property
    def DisplayMember(self) -> str:
        """
        Get: DisplayMember(self: DataGridViewComboBoxCell) -> str
        Set: DisplayMember(self: DataGridViewComboBoxCell) = value
        """
        ...

    @property
    def DisplayStyle(self): # -> DataGridViewComboBoxDisplayStyle
        """
        Get: DisplayStyle(self: DataGridViewComboBoxCell) -> DataGridViewComboBoxDisplayStyle
        Set: DisplayStyle(self: DataGridViewComboBoxCell) = value
        """
        ...

    @property
    def DisplayStyleForCurrentCellOnly(self) -> bool:
        """
        Get: DisplayStyleForCurrentCellOnly(self: DataGridViewComboBoxCell) -> bool
        Set: DisplayStyleForCurrentCellOnly(self: DataGridViewComboBoxCell) = value
        """
        ...

    @property
    def DropDownWidth(self) -> int:
        """
        Get: DropDownWidth(self: DataGridViewComboBoxCell) -> int
        Set: DropDownWidth(self: DataGridViewComboBoxCell) = value
        """
        ...

    @property
    def FlatStyle(self): # -> FlatStyle
        """
        Get: FlatStyle(self: DataGridViewComboBoxCell) -> FlatStyle
        Set: FlatStyle(self: DataGridViewComboBoxCell) = value
        """
        ...

    @property
    def Items(self): # -> ObjectCollection
        """ Get: Items(self: DataGridViewComboBoxCell) -> ObjectCollection """
        ...

    @property
    def MaxDropDownItems(self) -> int:
        """
        Get: MaxDropDownItems(self: DataGridViewComboBoxCell) -> int
        Set: MaxDropDownItems(self: DataGridViewComboBoxCell) = value
        """
        ...

    @property
    def Sorted(self) -> bool:
        """
        Get: Sorted(self: DataGridViewComboBoxCell) -> bool
        Set: Sorted(self: DataGridViewComboBoxCell) = value
        """
        ...

    @property
    def ValueMember(self) -> str:
        """
        Get: ValueMember(self: DataGridViewComboBoxCell) -> str
        Set: ValueMember(self: DataGridViewComboBoxCell) = value
        """
        ...


    def DataGridViewComboBoxCellAccessibleObject(self, *args): #cannot find CLR method
        """ DataGridViewComboBoxCellAccessibleObject(owner: DataGridViewCell) """
        ...

    def ObjectCollection(self, *args): #cannot find CLR method
        """ ObjectCollection(owner: DataGridViewComboBoxCell) """
        ...



class DataGridViewComboBoxColumn(DataGridViewColumn): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewComboBoxColumn() """
    @property
    def AutoComplete(self) -> bool:
        """
        Get: AutoComplete(self: DataGridViewComboBoxColumn) -> bool
        Set: AutoComplete(self: DataGridViewComboBoxColumn) = value
        """
        ...

    @property
    def DataSource(self) -> object:
        """
        Get: DataSource(self: DataGridViewComboBoxColumn) -> object
        Set: DataSource(self: DataGridViewComboBoxColumn) = value
        """
        ...

    @property
    def DisplayMember(self) -> str:
        """
        Get: DisplayMember(self: DataGridViewComboBoxColumn) -> str
        Set: DisplayMember(self: DataGridViewComboBoxColumn) = value
        """
        ...

    @property
    def DisplayStyle(self): # -> DataGridViewComboBoxDisplayStyle
        """
        Get: DisplayStyle(self: DataGridViewComboBoxColumn) -> DataGridViewComboBoxDisplayStyle
        Set: DisplayStyle(self: DataGridViewComboBoxColumn) = value
        """
        ...

    @property
    def DisplayStyleForCurrentCellOnly(self) -> bool:
        """
        Get: DisplayStyleForCurrentCellOnly(self: DataGridViewComboBoxColumn) -> bool
        Set: DisplayStyleForCurrentCellOnly(self: DataGridViewComboBoxColumn) = value
        """
        ...

    @property
    def DropDownWidth(self) -> int:
        """
        Get: DropDownWidth(self: DataGridViewComboBoxColumn) -> int
        Set: DropDownWidth(self: DataGridViewComboBoxColumn) = value
        """
        ...

    @property
    def FlatStyle(self): # -> FlatStyle
        """
        Get: FlatStyle(self: DataGridViewComboBoxColumn) -> FlatStyle
        Set: FlatStyle(self: DataGridViewComboBoxColumn) = value
        """
        ...

    @property
    def Items(self): # -> ObjectCollection
        """ Get: Items(self: DataGridViewComboBoxColumn) -> ObjectCollection """
        ...

    @property
    def MaxDropDownItems(self) -> int:
        """
        Get: MaxDropDownItems(self: DataGridViewComboBoxColumn) -> int
        Set: MaxDropDownItems(self: DataGridViewComboBoxColumn) = value
        """
        ...

    @property
    def Sorted(self) -> bool:
        """
        Get: Sorted(self: DataGridViewComboBoxColumn) -> bool
        Set: Sorted(self: DataGridViewComboBoxColumn) = value
        """
        ...

    @property
    def ValueMember(self) -> str:
        """
        Get: ValueMember(self: DataGridViewComboBoxColumn) -> str
        Set: ValueMember(self: DataGridViewComboBoxColumn) = value
        """
        ...



class DataGridViewComboBoxDisplayStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridViewComboBoxDisplayStyle, values: ComboBox (0), DropDownButton (1), Nothing (2) """
    ComboBox: DataGridViewComboBoxDisplayStyle = ...
    DropDownButton: DataGridViewComboBoxDisplayStyle = ...
    Nothing: DataGridViewComboBoxDisplayStyle = ...
    value__ = ...


class IDataGridViewEditingControl: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def EditingControlDataGridView(self) -> DataGridView:
        """
        Get: EditingControlDataGridView(self: IDataGridViewEditingControl) -> DataGridView
        Set: EditingControlDataGridView(self: IDataGridViewEditingControl) = value
        """
        ...

    @property
    def EditingControlFormattedValue(self) -> object:
        """
        Get: EditingControlFormattedValue(self: IDataGridViewEditingControl) -> object
        Set: EditingControlFormattedValue(self: IDataGridViewEditingControl) = value
        """
        ...

    @property
    def EditingControlRowIndex(self) -> int:
        """
        Get: EditingControlRowIndex(self: IDataGridViewEditingControl) -> int
        Set: EditingControlRowIndex(self: IDataGridViewEditingControl) = value
        """
        ...

    @property
    def EditingControlValueChanged(self) -> bool:
        """
        Get: EditingControlValueChanged(self: IDataGridViewEditingControl) -> bool
        Set: EditingControlValueChanged(self: IDataGridViewEditingControl) = value
        """
        ...

    @property
    def EditingPanelCursor(self) -> Cursor:
        """ Get: EditingPanelCursor(self: IDataGridViewEditingControl) -> Cursor """
        ...

    @property
    def RepositionEditingControlOnValueChange(self) -> bool:
        """ Get: RepositionEditingControlOnValueChange(self: IDataGridViewEditingControl) -> bool """
        ...


    def ApplyCellStyleToEditingControl(self, dataGridViewCellStyle:DataGridViewCellStyle): # -> 
        """ ApplyCellStyleToEditingControl(self: IDataGridViewEditingControl, dataGridViewCellStyle: DataGridViewCellStyle) """
        ...

    def EditingControlWantsInputKey(self, keyData, dataGridViewWantsInputKey:bool) -> bool: # Not found arg types: {'keyData': 'Keys'}
        """ EditingControlWantsInputKey(self: IDataGridViewEditingControl, keyData: Keys, dataGridViewWantsInputKey: bool) -> bool """
        ...

    def GetEditingControlFormattedValue(self, context) -> object: # Not found arg types: {'context': 'DataGridViewDataErrorContexts'}
        """ GetEditingControlFormattedValue(self: IDataGridViewEditingControl, context: DataGridViewDataErrorContexts) -> object """
        ...

    def PrepareEditingControlForEdit(self, selectAll:bool): # -> 
        """ PrepareEditingControlForEdit(self: IDataGridViewEditingControl, selectAll: bool) """
        ...


class DataGridViewComboBoxEditingControl(ComboBox, IDataGridViewEditingControl): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ DataGridViewComboBoxEditingControl() """
    pass

class DataGridViewContentAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridViewContentAlignment, values: BottomCenter (512), BottomLeft (256), BottomRight (1024), MiddleCenter (32), MiddleLeft (16), MiddleRight (64), NotSet (0), TopCenter (2), TopLeft (1), TopRight (4) """
    BottomCenter: DataGridViewContentAlignment = ...
    BottomLeft: DataGridViewContentAlignment = ...
    BottomRight: DataGridViewContentAlignment = ...
    MiddleCenter: DataGridViewContentAlignment = ...
    MiddleLeft: DataGridViewContentAlignment = ...
    MiddleRight: DataGridViewContentAlignment = ...
    NotSet: DataGridViewContentAlignment = ...
    TopCenter: DataGridViewContentAlignment = ...
    TopLeft: DataGridViewContentAlignment = ...
    TopRight: DataGridViewContentAlignment = ...
    value__ = ...


class DataGridViewDataErrorContexts(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) DataGridViewDataErrorContexts, values: ClipboardContent (16384), Commit (512), CurrentCellChange (4096), Display (2), Formatting (1), InitialValueRestoration (1024), LeaveControl (2048), Parsing (256), PreferredSize (4), RowDeletion (8), Scroll (8192) """
    ClipboardContent: DataGridViewDataErrorContexts = ...
    Commit: DataGridViewDataErrorContexts = ...
    CurrentCellChange: DataGridViewDataErrorContexts = ...
    Display: DataGridViewDataErrorContexts = ...
    Formatting: DataGridViewDataErrorContexts = ...
    InitialValueRestoration: DataGridViewDataErrorContexts = ...
    LeaveControl: DataGridViewDataErrorContexts = ...
    Parsing: DataGridViewDataErrorContexts = ...
    PreferredSize: DataGridViewDataErrorContexts = ...
    RowDeletion: DataGridViewDataErrorContexts = ...
    Scroll: DataGridViewDataErrorContexts = ...
    value__ = ...


class DataGridViewDataErrorEventArgs(DataGridViewCellCancelEventArgs): # skipped bases: <type 'object'>
    """ DataGridViewDataErrorEventArgs(exception: Exception, columnIndex: int, rowIndex: int, context: DataGridViewDataErrorContexts) """
    @property
    def Context(self) -> DataGridViewDataErrorContexts:
        """ Get: Context(self: DataGridViewDataErrorEventArgs) -> DataGridViewDataErrorContexts """
        ...

    @property
    def Exception(self) -> Exception:
        """ Get: Exception(self: DataGridViewDataErrorEventArgs) -> Exception """
        ...

    @property
    def ThrowException(self) -> bool:
        """
        Get: ThrowException(self: DataGridViewDataErrorEventArgs) -> bool
        Set: ThrowException(self: DataGridViewDataErrorEventArgs) = value
        """
        ...



class DataGridViewDataErrorEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewDataErrorEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewDataErrorEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewDataErrorEventHandler, sender: object, e: DataGridViewDataErrorEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewDataErrorEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewDataErrorEventArgs): # -> 
        """ Invoke(self: DataGridViewDataErrorEventHandler, sender: object, e: DataGridViewDataErrorEventArgs) """
        ...


class DataGridViewEditingControlShowingEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DataGridViewEditingControlShowingEventArgs(control: Control, cellStyle: DataGridViewCellStyle) """
    @property
    def CellStyle(self) -> DataGridViewCellStyle:
        """
        Get: CellStyle(self: DataGridViewEditingControlShowingEventArgs) -> DataGridViewCellStyle
        Set: CellStyle(self: DataGridViewEditingControlShowingEventArgs) = value
        """
        ...

    @property
    def Control(self) -> Control:
        """ Get: Control(self: DataGridViewEditingControlShowingEventArgs) -> Control """
        ...


    def __new__(cls, control:Control, cellStyle:DataGridViewCellStyle) -> Self:
        """ __new__(cls: type, control: Control, cellStyle: DataGridViewCellStyle) """
        ...


class DataGridViewEditingControlShowingEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewEditingControlShowingEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewEditingControlShowingEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewEditingControlShowingEventHandler, sender: object, e: DataGridViewEditingControlShowingEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewEditingControlShowingEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewEditingControlShowingEventArgs): # -> 
        """ Invoke(self: DataGridViewEditingControlShowingEventHandler, sender: object, e: DataGridViewEditingControlShowingEventArgs) """
        ...


class DataGridViewEditMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridViewEditMode, values: EditOnEnter (0), EditOnF2 (3), EditOnKeystroke (1), EditOnKeystrokeOrF2 (2), EditProgrammatically (4) """
    EditOnEnter: DataGridViewEditMode = ...
    EditOnF2: DataGridViewEditMode = ...
    EditOnKeystroke: DataGridViewEditMode = ...
    EditOnKeystrokeOrF2: DataGridViewEditMode = ...
    EditProgrammatically: DataGridViewEditMode = ...
    value__ = ...


class DataGridViewElementStates(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) DataGridViewElementStates, values: Displayed (1), Frozen (2), None (0), ReadOnly (4), Resizable (8), ResizableSet (16), Selected (32), Visible (64) """
    Displayed: DataGridViewElementStates = ...
    Frozen: DataGridViewElementStates = ...
    ReadOnly: DataGridViewElementStates = ...
    Resizable: DataGridViewElementStates = ...
    ResizableSet: DataGridViewElementStates = ...
    Selected: DataGridViewElementStates = ...
    value__ = ...
    Visible: DataGridViewElementStates = ...


class DataGridViewHeaderBorderStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridViewHeaderBorderStyle, values: Custom (0), None (4), Raised (2), Single (1), Sunken (3) """
    Custom: DataGridViewHeaderBorderStyle = ...
    Raised: DataGridViewHeaderBorderStyle = ...
    Single: DataGridViewHeaderBorderStyle = ...
    Sunken: DataGridViewHeaderBorderStyle = ...
    value__ = ...


class DataGridViewHitTestType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridViewHitTestType, values: Cell (1), ColumnHeader (2), HorizontalScrollBar (5), None (0), RowHeader (3), TopLeftHeader (4), VerticalScrollBar (6) """
    Cell: DataGridViewHitTestType = ...
    ColumnHeader: DataGridViewHitTestType = ...
    HorizontalScrollBar: DataGridViewHitTestType = ...
    RowHeader: DataGridViewHitTestType = ...
    TopLeftHeader: DataGridViewHitTestType = ...
    value__ = ...
    VerticalScrollBar: DataGridViewHitTestType = ...


class DataGridViewImageCell(DataGridViewCell): # skipped bases: <type 'IDisposable'>, <type 'ICloneable'>, <type 'object'>
    """
    DataGridViewImageCell()
    DataGridViewImageCell(valueIsIcon: bool)
    """
    @property
    def Description(self) -> str:
        """
        Get: Description(self: DataGridViewImageCell) -> str
        Set: Description(self: DataGridViewImageCell) = value
        """
        ...

    @property
    def ImageLayout(self): # -> DataGridViewImageCellLayout
        """
        Get: ImageLayout(self: DataGridViewImageCell) -> DataGridViewImageCellLayout
        Set: ImageLayout(self: DataGridViewImageCell) = value
        """
        ...

    @property
    def ValueIsIcon(self) -> bool:
        """
        Get: ValueIsIcon(self: DataGridViewImageCell) -> bool
        Set: ValueIsIcon(self: DataGridViewImageCell) = value
        """
        ...


    def DataGridViewImageCellAccessibleObject(self, *args): #cannot find CLR method
        """ DataGridViewImageCellAccessibleObject(owner: DataGridViewCell) """
        ...

    def __new__(cls, valueIsIcon:bool = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, valueIsIcon: bool)
        """
        ...



class DataGridViewImageCellLayout(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridViewImageCellLayout, values: Normal (1), NotSet (0), Stretch (2), Zoom (3) """
    Normal: DataGridViewImageCellLayout = ...
    NotSet: DataGridViewImageCellLayout = ...
    Stretch: DataGridViewImageCellLayout = ...
    value__ = ...
    Zoom: DataGridViewImageCellLayout = ...


class DataGridViewImageColumn(DataGridViewColumn): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'ICloneable'>, <type 'object'>
    """
    DataGridViewImageColumn()
    DataGridViewImageColumn(valuesAreIcons: bool)
    """
    @property
    def Description(self) -> str:
        """
        Get: Description(self: DataGridViewImageColumn) -> str
        Set: Description(self: DataGridViewImageColumn) = value
        """
        ...

    @property
    def Icon(self) -> Icon:
        """
        Get: Icon(self: DataGridViewImageColumn) -> Icon
        Set: Icon(self: DataGridViewImageColumn) = value
        """
        ...

    @property
    def Image(self) -> Image:
        """
        Get: Image(self: DataGridViewImageColumn) -> Image
        Set: Image(self: DataGridViewImageColumn) = value
        """
        ...

    @property
    def ImageLayout(self) -> DataGridViewImageCellLayout:
        """
        Get: ImageLayout(self: DataGridViewImageColumn) -> DataGridViewImageCellLayout
        Set: ImageLayout(self: DataGridViewImageColumn) = value
        """
        ...

    @property
    def ValuesAreIcons(self) -> bool:
        """
        Get: ValuesAreIcons(self: DataGridViewImageColumn) -> bool
        Set: ValuesAreIcons(self: DataGridViewImageColumn) = value
        """
        ...



class DataGridViewLinkCell(DataGridViewCell): # skipped bases: <type 'IDisposable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewLinkCell() """
    @property
    def ActiveLinkColor(self) -> Color:
        """
        Get: ActiveLinkColor(self: DataGridViewLinkCell) -> Color
        Set: ActiveLinkColor(self: DataGridViewLinkCell) = value
        """
        ...

    @property
    def LinkBehavior(self): # -> LinkBehavior
        """
        Get: LinkBehavior(self: DataGridViewLinkCell) -> LinkBehavior
        Set: LinkBehavior(self: DataGridViewLinkCell) = value
        """
        ...

    @property
    def LinkColor(self) -> Color:
        """
        Get: LinkColor(self: DataGridViewLinkCell) -> Color
        Set: LinkColor(self: DataGridViewLinkCell) = value
        """
        ...

    @property
    def LinkVisited(self) -> bool:
        """
        Get: LinkVisited(self: DataGridViewLinkCell) -> bool
        Set: LinkVisited(self: DataGridViewLinkCell) = value
        """
        ...

    @property
    def TrackVisitedState(self) -> bool:
        """
        Get: TrackVisitedState(self: DataGridViewLinkCell) -> bool
        Set: TrackVisitedState(self: DataGridViewLinkCell) = value
        """
        ...

    @property
    def UseColumnTextForLinkValue(self) -> bool:
        """
        Get: UseColumnTextForLinkValue(self: DataGridViewLinkCell) -> bool
        Set: UseColumnTextForLinkValue(self: DataGridViewLinkCell) = value
        """
        ...

    @property
    def VisitedLinkColor(self) -> Color:
        """
        Get: VisitedLinkColor(self: DataGridViewLinkCell) -> Color
        Set: VisitedLinkColor(self: DataGridViewLinkCell) = value
        """
        ...


    def DataGridViewLinkCellAccessibleObject(self, *args): #cannot find CLR method
        """ DataGridViewLinkCellAccessibleObject(owner: DataGridViewCell) """
        ...



class DataGridViewLinkColumn(DataGridViewColumn): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewLinkColumn() """
    @property
    def ActiveLinkColor(self) -> Color:
        """
        Get: ActiveLinkColor(self: DataGridViewLinkColumn) -> Color
        Set: ActiveLinkColor(self: DataGridViewLinkColumn) = value
        """
        ...

    @property
    def LinkBehavior(self): # -> LinkBehavior
        """
        Get: LinkBehavior(self: DataGridViewLinkColumn) -> LinkBehavior
        Set: LinkBehavior(self: DataGridViewLinkColumn) = value
        """
        ...

    @property
    def LinkColor(self) -> Color:
        """
        Get: LinkColor(self: DataGridViewLinkColumn) -> Color
        Set: LinkColor(self: DataGridViewLinkColumn) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: DataGridViewLinkColumn) -> str
        Set: Text(self: DataGridViewLinkColumn) = value
        """
        ...

    @property
    def TrackVisitedState(self) -> bool:
        """
        Get: TrackVisitedState(self: DataGridViewLinkColumn) -> bool
        Set: TrackVisitedState(self: DataGridViewLinkColumn) = value
        """
        ...

    @property
    def UseColumnTextForLinkValue(self) -> bool:
        """
        Get: UseColumnTextForLinkValue(self: DataGridViewLinkColumn) -> bool
        Set: UseColumnTextForLinkValue(self: DataGridViewLinkColumn) = value
        """
        ...

    @property
    def VisitedLinkColor(self) -> Color:
        """
        Get: VisitedLinkColor(self: DataGridViewLinkColumn) -> Color
        Set: VisitedLinkColor(self: DataGridViewLinkColumn) = value
        """
        ...



class DataGridViewPaintParts(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) DataGridViewPaintParts, values: All (127), Background (1), Border (2), ContentBackground (4), ContentForeground (8), ErrorIcon (16), Focus (32), None (0), SelectionBackground (64) """
    All: DataGridViewPaintParts = ...
    Background: DataGridViewPaintParts = ...
    Border: DataGridViewPaintParts = ...
    ContentBackground: DataGridViewPaintParts = ...
    ContentForeground: DataGridViewPaintParts = ...
    ErrorIcon: DataGridViewPaintParts = ...
    Focus: DataGridViewPaintParts = ...
    SelectionBackground: DataGridViewPaintParts = ...
    value__ = ...


class DataGridViewRow(DataGridViewBand): # skipped bases: <type 'IDisposable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewRow() """
    @property
    def AccessibilityObject(self) -> AccessibleObject:
        """ Get: AccessibilityObject(self: DataGridViewRow) -> AccessibleObject """
        ...

    @property
    def Cells(self) -> DataGridViewCellCollection:
        """ Get: Cells(self: DataGridViewRow) -> DataGridViewCellCollection """
        ...

    @property
    def DataBoundItem(self) -> object:
        """ Get: DataBoundItem(self: DataGridViewRow) -> object """
        ...

    @property
    def DividerHeight(self) -> int:
        """
        Get: DividerHeight(self: DataGridViewRow) -> int
        Set: DividerHeight(self: DataGridViewRow) = value
        """
        ...

    @property
    def ErrorText(self) -> str:
        """
        Get: ErrorText(self: DataGridViewRow) -> str
        Set: ErrorText(self: DataGridViewRow) = value
        """
        ...

    @property
    def HeaderCell(self): # -> DataGridViewRowHeaderCell
        """
        Get: HeaderCell(self: DataGridViewRow) -> DataGridViewRowHeaderCell
        Set: HeaderCell(self: DataGridViewRow) = value
        """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: DataGridViewRow) -> int
        Set: Height(self: DataGridViewRow) = value
        """
        ...

    @property
    def IsNewRow(self) -> bool:
        """ Get: IsNewRow(self: DataGridViewRow) -> bool """
        ...

    @property
    def MinimumHeight(self) -> int:
        """
        Get: MinimumHeight(self: DataGridViewRow) -> int
        Set: MinimumHeight(self: DataGridViewRow) = value
        """
        ...

    @property
    def State(self) -> DataGridViewElementStates:
        """ Get: State(self: DataGridViewRow) -> DataGridViewElementStates """
        ...


    def AdjustRowHeaderBorderStyle(self, dataGridViewAdvancedBorderStyleInput:DataGridViewAdvancedBorderStyle, dataGridViewAdvancedBorderStylePlaceholder:DataGridViewAdvancedBorderStyle, singleVerticalBorderAdded:bool, singleHorizontalBorderAdded:bool, isFirstDisplayedRow:bool, isLastVisibleRow:bool) -> DataGridViewAdvancedBorderStyle:
        """ AdjustRowHeaderBorderStyle(self: DataGridViewRow, dataGridViewAdvancedBorderStyleInput: DataGridViewAdvancedBorderStyle, dataGridViewAdvancedBorderStylePlaceholder: DataGridViewAdvancedBorderStyle, singleVerticalBorderAdded: bool, singleHorizontalBorderAdded: bool, isFirstDisplayedRow: bool, isLastVisibleRow: bool) -> DataGridViewAdvancedBorderStyle """
        ...

    def CreateAccessibilityInstance(self, *args): #cannot find CLR method
        """ CreateAccessibilityInstance(self: DataGridViewRow) -> AccessibleObject """
        ...

    def CreateCells(self, dataGridView:DataGridView, values:Array = ...): # -> 
        """ CreateCells(self: DataGridViewRow, dataGridView: DataGridView, *values: Array[object])CreateCells(self: DataGridViewRow, dataGridView: DataGridView) """
        ...

    def CreateCellsInstance(self, *args): #cannot find CLR method
        """ CreateCellsInstance(self: DataGridViewRow) -> DataGridViewCellCollection """
        ...

    def DataGridViewRowAccessibleObject(self, *args): #cannot find CLR method
        """
        DataGridViewRowAccessibleObject()
        DataGridViewRowAccessibleObject(owner: DataGridViewRow)
        """
        ...

    def DrawFocus(self, *args): #cannot find CLR method
        """ DrawFocus(self: DataGridViewRow, graphics: Graphics, clipBounds: Rectangle, bounds: Rectangle, rowIndex: int, rowState: DataGridViewElementStates, cellStyle: DataGridViewCellStyle, cellsPaintSelectionBackground: bool) """
        ...

    def GetContextMenuStrip(self, rowIndex:int) -> ContextMenuStrip:
        """ GetContextMenuStrip(self: DataGridViewRow, rowIndex: int) -> ContextMenuStrip """
        ...

    def GetErrorText(self, rowIndex:int) -> str:
        """ GetErrorText(self: DataGridViewRow, rowIndex: int) -> str """
        ...

    def GetPreferredHeight(self, rowIndex:int, autoSizeRowMode:DataGridViewAutoSizeRowMode, fixedWidth:bool) -> int:
        """ GetPreferredHeight(self: DataGridViewRow, rowIndex: int, autoSizeRowMode: DataGridViewAutoSizeRowMode, fixedWidth: bool) -> int """
        ...

    def GetState(self, rowIndex:int) -> DataGridViewElementStates:
        """ GetState(self: DataGridViewRow, rowIndex: int) -> DataGridViewElementStates """
        ...

    def Paint(self, *args): #cannot find CLR method
        """ Paint(self: DataGridViewRow, graphics: Graphics, clipBounds: Rectangle, rowBounds: Rectangle, rowIndex: int, rowState: DataGridViewElementStates, isFirstDisplayedRow: bool, isLastVisibleRow: bool) """
        ...

    def PaintCells(self, *args): #cannot find CLR method
        """ PaintCells(self: DataGridViewRow, graphics: Graphics, clipBounds: Rectangle, rowBounds: Rectangle, rowIndex: int, rowState: DataGridViewElementStates, isFirstDisplayedRow: bool, isLastVisibleRow: bool, paintParts: DataGridViewPaintParts) """
        ...

    def PaintHeader(self, *args): #cannot find CLR method
        """ PaintHeader(self: DataGridViewRow, graphics: Graphics, clipBounds: Rectangle, rowBounds: Rectangle, rowIndex: int, rowState: DataGridViewElementStates, isFirstDisplayedRow: bool, isLastVisibleRow: bool, paintParts: DataGridViewPaintParts) """
        ...

    def SetValues(self, values:Array) -> bool:
        """ SetValues(self: DataGridViewRow, *values: Array[object]) -> bool """
        ...



class DataGridViewRowCancelEventArgs(CancelEventArgs): # skipped bases: <type 'object'>
    """ DataGridViewRowCancelEventArgs(dataGridViewRow: DataGridViewRow) """
    @property
    def Row(self) -> DataGridViewRow:
        """ Get: Row(self: DataGridViewRowCancelEventArgs) -> DataGridViewRow """
        ...



class DataGridViewRowCancelEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewRowCancelEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewRowCancelEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewRowCancelEventHandler, sender: object, e: DataGridViewRowCancelEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewRowCancelEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewRowCancelEventArgs): # -> 
        """ Invoke(self: DataGridViewRowCancelEventHandler, sender: object, e: DataGridViewRowCancelEventArgs) """
        ...


class DataGridViewRowCollection(IList): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ DataGridViewRowCollection(dataGridView: DataGridView) """
    @property
    def Count(self) -> int:
        """ Get: Count(self: DataGridViewRowCollection) -> int """
        ...

    @property
    def DataGridView(self):
        ...

    @property
    def List(self):
        ...


    def AddCopies(self, indexSource:int, count:int) -> int:
        """ AddCopies(self: DataGridViewRowCollection, indexSource: int, count: int) -> int """
        ...

    def AddCopy(self, indexSource:int) -> int:
        """ AddCopy(self: DataGridViewRowCollection, indexSource: int) -> int """
        ...

    def AddRange(self, dataGridViewRows:Array): # -> 
        """ AddRange(self: DataGridViewRowCollection, *dataGridViewRows: Array[DataGridViewRow]) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: DataGridViewRowCollection, array: Array[DataGridViewRow], index: int) """
        ...

    def GetFirstRow(self, includeFilter:DataGridViewElementStates, excludeFilter:DataGridViewElementStates = ...) -> int:
        """
        GetFirstRow(self: DataGridViewRowCollection, includeFilter: DataGridViewElementStates) -> int
        GetFirstRow(self: DataGridViewRowCollection, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> int
        """
        ...

    def GetLastRow(self, includeFilter:DataGridViewElementStates) -> int:
        """ GetLastRow(self: DataGridViewRowCollection, includeFilter: DataGridViewElementStates) -> int """
        ...

    def GetNextRow(self, indexStart:int, includeFilter:DataGridViewElementStates, excludeFilter:DataGridViewElementStates = ...) -> int:
        """
        GetNextRow(self: DataGridViewRowCollection, indexStart: int, includeFilter: DataGridViewElementStates) -> int
        GetNextRow(self: DataGridViewRowCollection, indexStart: int, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> int
        """
        ...

    def GetPreviousRow(self, indexStart:int, includeFilter:DataGridViewElementStates, excludeFilter:DataGridViewElementStates = ...) -> int:
        """
        GetPreviousRow(self: DataGridViewRowCollection, indexStart: int, includeFilter: DataGridViewElementStates) -> int
        GetPreviousRow(self: DataGridViewRowCollection, indexStart: int, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> int
        """
        ...

    def GetRowCount(self, includeFilter:DataGridViewElementStates) -> int:
        """ GetRowCount(self: DataGridViewRowCollection, includeFilter: DataGridViewElementStates) -> int """
        ...

    def GetRowsHeight(self, includeFilter:DataGridViewElementStates) -> int:
        """ GetRowsHeight(self: DataGridViewRowCollection, includeFilter: DataGridViewElementStates) -> int """
        ...

    def GetRowState(self, rowIndex:int) -> DataGridViewElementStates:
        """ GetRowState(self: DataGridViewRowCollection, rowIndex: int) -> DataGridViewElementStates """
        ...

    def InsertCopies(self, indexSource:int, indexDestination:int, count:int): # -> 
        """ InsertCopies(self: DataGridViewRowCollection, indexSource: int, indexDestination: int, count: int) """
        ...

    def InsertCopy(self, indexSource:int, indexDestination:int): # -> 
        """ InsertCopy(self: DataGridViewRowCollection, indexSource: int, indexDestination: int) """
        ...

    def InsertRange(self, rowIndex:int, dataGridViewRows:Array): # -> 
        """ InsertRange(self: DataGridViewRowCollection, rowIndex: int, *dataGridViewRows: Array[DataGridViewRow]) """
        ...

    def OnCollectionChanged(self, *args): #cannot find CLR method
        """ OnCollectionChanged(self: DataGridViewRowCollection, e: CollectionChangeEventArgs) """
        ...

    def SharedRow(self, rowIndex:int) -> DataGridViewRow:
        """ SharedRow(self: DataGridViewRowCollection, rowIndex: int) -> DataGridViewRow """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ Contains(self: IList, value: object) -> bool """
        ...

    CollectionChanged = ...


class DataGridViewRowContextMenuStripNeededEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DataGridViewRowContextMenuStripNeededEventArgs(rowIndex: int) """
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip:
        """
        Get: ContextMenuStrip(self: DataGridViewRowContextMenuStripNeededEventArgs) -> ContextMenuStrip
        Set: ContextMenuStrip(self: DataGridViewRowContextMenuStripNeededEventArgs) = value
        """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: DataGridViewRowContextMenuStripNeededEventArgs) -> int """
        ...


    def __new__(cls, rowIndex:int) -> Self:
        """ __new__(cls: type, rowIndex: int) """
        ...


class DataGridViewRowContextMenuStripNeededEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewRowContextMenuStripNeededEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewRowContextMenuStripNeededEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewRowContextMenuStripNeededEventHandler, sender: object, e: DataGridViewRowContextMenuStripNeededEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewRowContextMenuStripNeededEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewRowContextMenuStripNeededEventArgs): # -> 
        """ Invoke(self: DataGridViewRowContextMenuStripNeededEventHandler, sender: object, e: DataGridViewRowContextMenuStripNeededEventArgs) """
        ...


class DataGridViewRowDividerDoubleClickEventArgs(HandledMouseEventArgs): # skipped bases: <type 'object'>
    """ DataGridViewRowDividerDoubleClickEventArgs(rowIndex: int, e: HandledMouseEventArgs) """
    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: DataGridViewRowDividerDoubleClickEventArgs) -> int """
        ...



class DataGridViewRowDividerDoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewRowDividerDoubleClickEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewRowDividerDoubleClickEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewRowDividerDoubleClickEventHandler, sender: object, e: DataGridViewRowDividerDoubleClickEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewRowDividerDoubleClickEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewRowDividerDoubleClickEventArgs): # -> 
        """ Invoke(self: DataGridViewRowDividerDoubleClickEventHandler, sender: object, e: DataGridViewRowDividerDoubleClickEventArgs) """
        ...


class DataGridViewRowErrorTextNeededEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ErrorText(self) -> str:
        """
        Get: ErrorText(self: DataGridViewRowErrorTextNeededEventArgs) -> str
        Set: ErrorText(self: DataGridViewRowErrorTextNeededEventArgs) = value
        """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: DataGridViewRowErrorTextNeededEventArgs) -> int """
        ...



class DataGridViewRowErrorTextNeededEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewRowErrorTextNeededEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewRowErrorTextNeededEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewRowErrorTextNeededEventHandler, sender: object, e: DataGridViewRowErrorTextNeededEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewRowErrorTextNeededEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewRowErrorTextNeededEventArgs): # -> 
        """ Invoke(self: DataGridViewRowErrorTextNeededEventHandler, sender: object, e: DataGridViewRowErrorTextNeededEventArgs) """
        ...


class DataGridViewRowEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DataGridViewRowEventArgs(dataGridViewRow: DataGridViewRow) """
    @property
    def Row(self) -> DataGridViewRow:
        """ Get: Row(self: DataGridViewRowEventArgs) -> DataGridViewRow """
        ...


    def __new__(cls, dataGridViewRow:DataGridViewRow) -> Self:
        """ __new__(cls: type, dataGridViewRow: DataGridViewRow) """
        ...


class DataGridViewRowEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewRowEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewRowEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewRowEventHandler, sender: object, e: DataGridViewRowEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewRowEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewRowEventArgs): # -> 
        """ Invoke(self: DataGridViewRowEventHandler, sender: object, e: DataGridViewRowEventArgs) """
        ...


class DataGridViewRowHeaderCell(DataGridViewHeaderCell): # skipped bases: <type 'IDisposable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewRowHeaderCell() """
    def DataGridViewRowHeaderCellAccessibleObject(self, *args): #cannot find CLR method
        """ DataGridViewRowHeaderCellAccessibleObject(owner: DataGridViewRowHeaderCell) """
        ...

    def GetInheritedStyle(self, inheritedCellStyle:DataGridViewCellStyle, rowIndex:int, includeColors:bool) -> DataGridViewCellStyle:
        """ GetInheritedStyle(self: DataGridViewRowHeaderCell, inheritedCellStyle: DataGridViewCellStyle, rowIndex: int, includeColors: bool) -> DataGridViewCellStyle """
        ...



class DataGridViewRowHeadersWidthSizeMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridViewRowHeadersWidthSizeMode, values: AutoSizeToAllHeaders (2), AutoSizeToDisplayedHeaders (3), AutoSizeToFirstHeader (4), DisableResizing (1), EnableResizing (0) """
    AutoSizeToAllHeaders: DataGridViewRowHeadersWidthSizeMode = ...
    AutoSizeToDisplayedHeaders: DataGridViewRowHeadersWidthSizeMode = ...
    AutoSizeToFirstHeader: DataGridViewRowHeadersWidthSizeMode = ...
    DisableResizing: DataGridViewRowHeadersWidthSizeMode = ...
    EnableResizing: DataGridViewRowHeadersWidthSizeMode = ...
    value__ = ...


class DataGridViewRowHeightInfoNeededEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Height(self) -> int:
        """
        Get: Height(self: DataGridViewRowHeightInfoNeededEventArgs) -> int
        Set: Height(self: DataGridViewRowHeightInfoNeededEventArgs) = value
        """
        ...

    @property
    def MinimumHeight(self) -> int:
        """
        Get: MinimumHeight(self: DataGridViewRowHeightInfoNeededEventArgs) -> int
        Set: MinimumHeight(self: DataGridViewRowHeightInfoNeededEventArgs) = value
        """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: DataGridViewRowHeightInfoNeededEventArgs) -> int """
        ...



class DataGridViewRowHeightInfoNeededEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewRowHeightInfoNeededEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewRowHeightInfoNeededEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewRowHeightInfoNeededEventHandler, sender: object, e: DataGridViewRowHeightInfoNeededEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewRowHeightInfoNeededEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewRowHeightInfoNeededEventArgs): # -> 
        """ Invoke(self: DataGridViewRowHeightInfoNeededEventHandler, sender: object, e: DataGridViewRowHeightInfoNeededEventArgs) """
        ...


class DataGridViewRowHeightInfoPushedEventArgs(HandledEventArgs): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Height(self) -> int:
        """ Get: Height(self: DataGridViewRowHeightInfoPushedEventArgs) -> int """
        ...

    @property
    def MinimumHeight(self) -> int:
        """ Get: MinimumHeight(self: DataGridViewRowHeightInfoPushedEventArgs) -> int """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: DataGridViewRowHeightInfoPushedEventArgs) -> int """
        ...



class DataGridViewRowHeightInfoPushedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewRowHeightInfoPushedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewRowHeightInfoPushedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewRowHeightInfoPushedEventHandler, sender: object, e: DataGridViewRowHeightInfoPushedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewRowHeightInfoPushedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewRowHeightInfoPushedEventArgs): # -> 
        """ Invoke(self: DataGridViewRowHeightInfoPushedEventHandler, sender: object, e: DataGridViewRowHeightInfoPushedEventArgs) """
        ...


class DataGridViewRowPostPaintEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DataGridViewRowPostPaintEventArgs(dataGridView: DataGridView, graphics: Graphics, clipBounds: Rectangle, rowBounds: Rectangle, rowIndex: int, rowState: DataGridViewElementStates, errorText: str, inheritedRowStyle: DataGridViewCellStyle, isFirstDisplayedRow: bool, isLastVisibleRow: bool) """
    @property
    def ClipBounds(self) -> Rectangle:
        """
        Get: ClipBounds(self: DataGridViewRowPostPaintEventArgs) -> Rectangle
        Set: ClipBounds(self: DataGridViewRowPostPaintEventArgs) = value
        """
        ...

    @property
    def ErrorText(self) -> str:
        """ Get: ErrorText(self: DataGridViewRowPostPaintEventArgs) -> str """
        ...

    @property
    def Graphics(self) -> Graphics:
        """ Get: Graphics(self: DataGridViewRowPostPaintEventArgs) -> Graphics """
        ...

    @property
    def InheritedRowStyle(self) -> DataGridViewCellStyle:
        """ Get: InheritedRowStyle(self: DataGridViewRowPostPaintEventArgs) -> DataGridViewCellStyle """
        ...

    @property
    def IsFirstDisplayedRow(self) -> bool:
        """ Get: IsFirstDisplayedRow(self: DataGridViewRowPostPaintEventArgs) -> bool """
        ...

    @property
    def IsLastVisibleRow(self) -> bool:
        """ Get: IsLastVisibleRow(self: DataGridViewRowPostPaintEventArgs) -> bool """
        ...

    @property
    def RowBounds(self) -> Rectangle:
        """ Get: RowBounds(self: DataGridViewRowPostPaintEventArgs) -> Rectangle """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: DataGridViewRowPostPaintEventArgs) -> int """
        ...

    @property
    def State(self) -> DataGridViewElementStates:
        """ Get: State(self: DataGridViewRowPostPaintEventArgs) -> DataGridViewElementStates """
        ...


    def DrawFocus(self, bounds:Rectangle, cellsPaintSelectionBackground:bool): # -> 
        """ DrawFocus(self: DataGridViewRowPostPaintEventArgs, bounds: Rectangle, cellsPaintSelectionBackground: bool) """
        ...

    def PaintCells(self, clipBounds:Rectangle, paintParts:DataGridViewPaintParts): # -> 
        """ PaintCells(self: DataGridViewRowPostPaintEventArgs, clipBounds: Rectangle, paintParts: DataGridViewPaintParts) """
        ...

    def PaintCellsBackground(self, clipBounds:Rectangle, cellsPaintSelectionBackground:bool): # -> 
        """ PaintCellsBackground(self: DataGridViewRowPostPaintEventArgs, clipBounds: Rectangle, cellsPaintSelectionBackground: bool) """
        ...

    def PaintCellsContent(self, clipBounds:Rectangle): # -> 
        """ PaintCellsContent(self: DataGridViewRowPostPaintEventArgs, clipBounds: Rectangle) """
        ...

    def PaintHeader(self, *__args:bool): # -> 
        """ PaintHeader(self: DataGridViewRowPostPaintEventArgs, paintSelectionBackground: bool)PaintHeader(self: DataGridViewRowPostPaintEventArgs, paintParts: DataGridViewPaintParts) """
        ...

    def __new__(cls, dataGridView:DataGridView, graphics:Graphics, clipBounds:Rectangle, rowBounds:Rectangle, rowIndex:int, rowState:DataGridViewElementStates, errorText:str, inheritedRowStyle:DataGridViewCellStyle, isFirstDisplayedRow:bool, isLastVisibleRow:bool) -> Self:
        """ __new__(cls: type, dataGridView: DataGridView, graphics: Graphics, clipBounds: Rectangle, rowBounds: Rectangle, rowIndex: int, rowState: DataGridViewElementStates, errorText: str, inheritedRowStyle: DataGridViewCellStyle, isFirstDisplayedRow: bool, isLastVisibleRow: bool) """
        ...


class DataGridViewRowPostPaintEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewRowPostPaintEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewRowPostPaintEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewRowPostPaintEventHandler, sender: object, e: DataGridViewRowPostPaintEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewRowPostPaintEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewRowPostPaintEventArgs): # -> 
        """ Invoke(self: DataGridViewRowPostPaintEventHandler, sender: object, e: DataGridViewRowPostPaintEventArgs) """
        ...


class DataGridViewRowPrePaintEventArgs(HandledEventArgs): # skipped bases: <type 'object'>
    """ DataGridViewRowPrePaintEventArgs(dataGridView: DataGridView, graphics: Graphics, clipBounds: Rectangle, rowBounds: Rectangle, rowIndex: int, rowState: DataGridViewElementStates, errorText: str, inheritedRowStyle: DataGridViewCellStyle, isFirstDisplayedRow: bool, isLastVisibleRow: bool) """
    @property
    def ClipBounds(self) -> Rectangle:
        """
        Get: ClipBounds(self: DataGridViewRowPrePaintEventArgs) -> Rectangle
        Set: ClipBounds(self: DataGridViewRowPrePaintEventArgs) = value
        """
        ...

    @property
    def ErrorText(self) -> str:
        """ Get: ErrorText(self: DataGridViewRowPrePaintEventArgs) -> str """
        ...

    @property
    def Graphics(self) -> Graphics:
        """ Get: Graphics(self: DataGridViewRowPrePaintEventArgs) -> Graphics """
        ...

    @property
    def InheritedRowStyle(self) -> DataGridViewCellStyle:
        """ Get: InheritedRowStyle(self: DataGridViewRowPrePaintEventArgs) -> DataGridViewCellStyle """
        ...

    @property
    def IsFirstDisplayedRow(self) -> bool:
        """ Get: IsFirstDisplayedRow(self: DataGridViewRowPrePaintEventArgs) -> bool """
        ...

    @property
    def IsLastVisibleRow(self) -> bool:
        """ Get: IsLastVisibleRow(self: DataGridViewRowPrePaintEventArgs) -> bool """
        ...

    @property
    def PaintParts(self) -> DataGridViewPaintParts:
        """
        Get: PaintParts(self: DataGridViewRowPrePaintEventArgs) -> DataGridViewPaintParts
        Set: PaintParts(self: DataGridViewRowPrePaintEventArgs) = value
        """
        ...

    @property
    def RowBounds(self) -> Rectangle:
        """ Get: RowBounds(self: DataGridViewRowPrePaintEventArgs) -> Rectangle """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: DataGridViewRowPrePaintEventArgs) -> int """
        ...

    @property
    def State(self) -> DataGridViewElementStates:
        """ Get: State(self: DataGridViewRowPrePaintEventArgs) -> DataGridViewElementStates """
        ...


    def DrawFocus(self, bounds:Rectangle, cellsPaintSelectionBackground:bool): # -> 
        """ DrawFocus(self: DataGridViewRowPrePaintEventArgs, bounds: Rectangle, cellsPaintSelectionBackground: bool) """
        ...

    def PaintCells(self, clipBounds:Rectangle, paintParts:DataGridViewPaintParts): # -> 
        """ PaintCells(self: DataGridViewRowPrePaintEventArgs, clipBounds: Rectangle, paintParts: DataGridViewPaintParts) """
        ...

    def PaintCellsBackground(self, clipBounds:Rectangle, cellsPaintSelectionBackground:bool): # -> 
        """ PaintCellsBackground(self: DataGridViewRowPrePaintEventArgs, clipBounds: Rectangle, cellsPaintSelectionBackground: bool) """
        ...

    def PaintCellsContent(self, clipBounds:Rectangle): # -> 
        """ PaintCellsContent(self: DataGridViewRowPrePaintEventArgs, clipBounds: Rectangle) """
        ...

    def PaintHeader(self, *__args:bool): # -> 
        """ PaintHeader(self: DataGridViewRowPrePaintEventArgs, paintSelectionBackground: bool)PaintHeader(self: DataGridViewRowPrePaintEventArgs, paintParts: DataGridViewPaintParts) """
        ...


class DataGridViewRowPrePaintEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewRowPrePaintEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewRowPrePaintEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewRowPrePaintEventHandler, sender: object, e: DataGridViewRowPrePaintEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewRowPrePaintEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewRowPrePaintEventArgs): # -> 
        """ Invoke(self: DataGridViewRowPrePaintEventHandler, sender: object, e: DataGridViewRowPrePaintEventArgs) """
        ...


class DataGridViewRowsAddedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DataGridViewRowsAddedEventArgs(rowIndex: int, rowCount: int) """
    @property
    def RowCount(self) -> int:
        """ Get: RowCount(self: DataGridViewRowsAddedEventArgs) -> int """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: DataGridViewRowsAddedEventArgs) -> int """
        ...


    def __new__(cls, rowIndex:int, rowCount:int) -> Self:
        """ __new__(cls: type, rowIndex: int, rowCount: int) """
        ...


class DataGridViewRowsAddedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewRowsAddedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewRowsAddedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewRowsAddedEventHandler, sender: object, e: DataGridViewRowsAddedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewRowsAddedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewRowsAddedEventArgs): # -> 
        """ Invoke(self: DataGridViewRowsAddedEventHandler, sender: object, e: DataGridViewRowsAddedEventArgs) """
        ...


class DataGridViewRowsRemovedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DataGridViewRowsRemovedEventArgs(rowIndex: int, rowCount: int) """
    @property
    def RowCount(self) -> int:
        """ Get: RowCount(self: DataGridViewRowsRemovedEventArgs) -> int """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: DataGridViewRowsRemovedEventArgs) -> int """
        ...


    def __new__(cls, rowIndex:int, rowCount:int) -> Self:
        """ __new__(cls: type, rowIndex: int, rowCount: int) """
        ...


class DataGridViewRowsRemovedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewRowsRemovedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewRowsRemovedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewRowsRemovedEventHandler, sender: object, e: DataGridViewRowsRemovedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewRowsRemovedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewRowsRemovedEventArgs): # -> 
        """ Invoke(self: DataGridViewRowsRemovedEventHandler, sender: object, e: DataGridViewRowsRemovedEventArgs) """
        ...


class DataGridViewRowStateChangedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DataGridViewRowStateChangedEventArgs(dataGridViewRow: DataGridViewRow, stateChanged: DataGridViewElementStates) """
    @property
    def Row(self) -> DataGridViewRow:
        """ Get: Row(self: DataGridViewRowStateChangedEventArgs) -> DataGridViewRow """
        ...

    @property
    def StateChanged(self) -> DataGridViewElementStates:
        """ Get: StateChanged(self: DataGridViewRowStateChangedEventArgs) -> DataGridViewElementStates """
        ...


    def __new__(cls, dataGridViewRow:DataGridViewRow, stateChanged:DataGridViewElementStates) -> Self:
        """ __new__(cls: type, dataGridViewRow: DataGridViewRow, stateChanged: DataGridViewElementStates) """
        ...


class DataGridViewRowStateChangedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewRowStateChangedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewRowStateChangedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewRowStateChangedEventHandler, sender: object, e: DataGridViewRowStateChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewRowStateChangedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewRowStateChangedEventArgs): # -> 
        """ Invoke(self: DataGridViewRowStateChangedEventHandler, sender: object, e: DataGridViewRowStateChangedEventArgs) """
        ...


class DataGridViewSelectedCellCollection(BaseCollection, IList): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def __contains__(self, *args): #cannot find CLR method
        """ Contains(self: IList, value: object) -> bool """
        ...


class DataGridViewSelectedColumnCollection(BaseCollection, IList): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def __contains__(self, *args): #cannot find CLR method
        """ Contains(self: IList, value: object) -> bool """
        ...


class DataGridViewSelectedRowCollection(BaseCollection, IList): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def __contains__(self, *args): #cannot find CLR method
        """ Contains(self: IList, value: object) -> bool """
        ...


class DataGridViewSelectionMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridViewSelectionMode, values: CellSelect (0), ColumnHeaderSelect (4), FullColumnSelect (2), FullRowSelect (1), RowHeaderSelect (3) """
    CellSelect: DataGridViewSelectionMode = ...
    ColumnHeaderSelect: DataGridViewSelectionMode = ...
    FullColumnSelect: DataGridViewSelectionMode = ...
    FullRowSelect: DataGridViewSelectionMode = ...
    RowHeaderSelect: DataGridViewSelectionMode = ...
    value__ = ...


class DataGridViewSortCompareEventArgs(HandledEventArgs): # skipped bases: <type 'object'>
    """ DataGridViewSortCompareEventArgs(dataGridViewColumn: DataGridViewColumn, cellValue1: object, cellValue2: object, rowIndex1: int, rowIndex2: int) """
    @property
    def CellValue1(self) -> object:
        """ Get: CellValue1(self: DataGridViewSortCompareEventArgs) -> object """
        ...

    @property
    def CellValue2(self) -> object:
        """ Get: CellValue2(self: DataGridViewSortCompareEventArgs) -> object """
        ...

    @property
    def Column(self) -> DataGridViewColumn:
        """ Get: Column(self: DataGridViewSortCompareEventArgs) -> DataGridViewColumn """
        ...

    @property
    def RowIndex1(self) -> int:
        """ Get: RowIndex1(self: DataGridViewSortCompareEventArgs) -> int """
        ...

    @property
    def RowIndex2(self) -> int:
        """ Get: RowIndex2(self: DataGridViewSortCompareEventArgs) -> int """
        ...

    @property
    def SortResult(self) -> int:
        """
        Get: SortResult(self: DataGridViewSortCompareEventArgs) -> int
        Set: SortResult(self: DataGridViewSortCompareEventArgs) = value
        """
        ...



class DataGridViewSortCompareEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewSortCompareEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DataGridViewSortCompareEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DataGridViewSortCompareEventHandler, sender: object, e: DataGridViewSortCompareEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DataGridViewSortCompareEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DataGridViewSortCompareEventArgs): # -> 
        """ Invoke(self: DataGridViewSortCompareEventHandler, sender: object, e: DataGridViewSortCompareEventArgs) """
        ...


class DataGridViewTextBoxCell(DataGridViewCell): # skipped bases: <type 'IDisposable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewTextBoxCell() """
    @property
    def MaxInputLength(self) -> int:
        """
        Get: MaxInputLength(self: DataGridViewTextBoxCell) -> int
        Set: MaxInputLength(self: DataGridViewTextBoxCell) = value
        """
        ...


    def DataGridViewTextBoxCellAccessibleObject(self, *args): #cannot find CLR method
        """ DataGridViewTextBoxCellAccessibleObject(owner: DataGridViewCell) """
        ...



class DataGridViewTextBoxColumn(DataGridViewColumn): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewTextBoxColumn() """
    @property
    def MaxInputLength(self) -> int:
        """
        Get: MaxInputLength(self: DataGridViewTextBoxColumn) -> int
        Set: MaxInputLength(self: DataGridViewTextBoxColumn) = value
        """
        ...



class DataGridViewTextBoxEditingControl(TextBox, IDataGridViewEditingControl): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ DataGridViewTextBoxEditingControl() """
    pass

class DataGridViewTopLeftHeaderCell(DataGridViewColumnHeaderCell): # skipped bases: <type 'IDisposable'>, <type 'ICloneable'>, <type 'object'>
    """ DataGridViewTopLeftHeaderCell() """
    def DataGridViewTopLeftHeaderCellAccessibleObject(self, *args): #cannot find CLR method
        """ DataGridViewTopLeftHeaderCellAccessibleObject(owner: DataGridViewTopLeftHeaderCell) """
        ...



class DataGridViewTriState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataGridViewTriState, values: False (2), NotSet (0), True (1) """
    NotSet: DataGridViewTriState = ...
    value__ = ...


class IDataObject: # skipped bases: <type 'object'>
    """ no doc """
    def GetData(self, format:str, autoConvert:bool = ...) -> object:
        """
        GetData(self: IDataObject, format: str, autoConvert: bool) -> object
        GetData(self: IDataObject, format: str) -> object
        GetData(self: IDataObject, format: Type) -> object
        """
        ...

    def GetDataPresent(self, format:str, autoConvert:bool = ...) -> bool:
        """
        GetDataPresent(self: IDataObject, format: str, autoConvert: bool) -> bool
        GetDataPresent(self: IDataObject, format: str) -> bool
        GetDataPresent(self: IDataObject, format: Type) -> bool
        """
        ...

    def GetFormats(self, autoConvert:bool = ...) -> Array:
        """
        GetFormats(self: IDataObject, autoConvert: bool) -> Array[str]
        GetFormats(self: IDataObject) -> Array[str]
        """
        ...

    def SetData(self, *__args:object): # -> 
        """ SetData(self: IDataObject, format: str, autoConvert: bool, data: object)SetData(self: IDataObject, format: str, data: object)SetData(self: IDataObject, format: Type, data: object)SetData(self: IDataObject, data: object) """
        ...


class DataObject(IDataObject): # skipped bases: <type 'object'>
    """
    DataObject()
    DataObject(data: object)
    DataObject(format: str, data: object)
    """
    def ContainsAudio(self) -> bool:
        """ ContainsAudio(self: DataObject) -> bool """
        ...

    def ContainsFileDropList(self) -> bool:
        """ ContainsFileDropList(self: DataObject) -> bool """
        ...

    def ContainsImage(self) -> bool:
        """ ContainsImage(self: DataObject) -> bool """
        ...

    def ContainsText(self, format = ...) -> bool: # Not found arg types: {'format': 'TextDataFormat'}
        """
        ContainsText(self: DataObject) -> bool
        ContainsText(self: DataObject, format: TextDataFormat) -> bool
        """
        ...

    def GetAudioStream(self) -> Stream:
        """ GetAudioStream(self: DataObject) -> Stream """
        ...

    def GetFileDropList(self) -> StringCollection:
        """ GetFileDropList(self: DataObject) -> StringCollection """
        ...

    def GetImage(self) -> Image:
        """ GetImage(self: DataObject) -> Image """
        ...

    def GetText(self, format = ...) -> str: # Not found arg types: {'format': 'TextDataFormat'}
        """
        GetText(self: DataObject) -> str
        GetText(self: DataObject, format: TextDataFormat) -> str
        """
        ...

    def SetAudio(self, *__args:Array): # -> 
        """ SetAudio(self: DataObject, audioBytes: Array[Byte])SetAudio(self: DataObject, audioStream: Stream) """
        ...

    def SetFileDropList(self, filePaths:StringCollection): # -> 
        """ SetFileDropList(self: DataObject, filePaths: StringCollection) """
        ...

    def SetImage(self, image:Image): # -> 
        """ SetImage(self: DataObject, image: Image) """
        ...

    def SetText(self, textData:str, format = ...): # ->  # Not found arg types: {'format': 'TextDataFormat'}
        """ SetText(self: DataObject, textData: str)SetText(self: DataObject, textData: str, format: TextDataFormat) """
        ...


class DataSourceUpdateMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataSourceUpdateMode, values: Never (2), OnPropertyChanged (1), OnValidation (0) """
    Never: DataSourceUpdateMode = ...
    OnPropertyChanged: DataSourceUpdateMode = ...
    OnValidation: DataSourceUpdateMode = ...
    value__ = ...


class DateBoldEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def DaysToBold(self) -> Array:
        """
        Get: DaysToBold(self: DateBoldEventArgs) -> Array[int]
        Set: DaysToBold(self: DateBoldEventArgs) = value
        """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: DateBoldEventArgs) -> int """
        ...

    @property
    def StartDate(self) -> DateTime:
        """ Get: StartDate(self: DateBoldEventArgs) -> DateTime """
        ...



class DateBoldEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DateBoldEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DateBoldEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DateBoldEventHandler, sender: object, e: DateBoldEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DateBoldEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DateBoldEventArgs): # -> 
        """ Invoke(self: DateBoldEventHandler, sender: object, e: DateBoldEventArgs) """
        ...


class DateRangeEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DateRangeEventArgs(start: DateTime, end: DateTime) """
    @property
    def End(self) -> DateTime:
        """ Get: End(self: DateRangeEventArgs) -> DateTime """
        ...

    @property
    def Start(self) -> DateTime:
        """ Get: Start(self: DateRangeEventArgs) -> DateTime """
        ...


    def __new__(cls, start:DateTime, end:DateTime) -> Self:
        """ __new__(cls: type, start: DateTime, end: DateTime) """
        ...


class DateRangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DateRangeEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DateRangeEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DateRangeEventHandler, sender: object, e: DateRangeEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DateRangeEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DateRangeEventArgs): # -> 
        """ Invoke(self: DateRangeEventHandler, sender: object, e: DateRangeEventArgs) """
        ...


class DateTimePicker(Control): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ DateTimePicker() """
    @property
    def CalendarFont(self) -> Font:
        """
        Get: CalendarFont(self: DateTimePicker) -> Font
        Set: CalendarFont(self: DateTimePicker) = value
        """
        ...

    @property
    def CalendarForeColor(self) -> Color:
        """
        Get: CalendarForeColor(self: DateTimePicker) -> Color
        Set: CalendarForeColor(self: DateTimePicker) = value
        """
        ...

    @property
    def CalendarMonthBackground(self) -> Color:
        """
        Get: CalendarMonthBackground(self: DateTimePicker) -> Color
        Set: CalendarMonthBackground(self: DateTimePicker) = value
        """
        ...

    @property
    def CalendarTitleBackColor(self) -> Color:
        """
        Get: CalendarTitleBackColor(self: DateTimePicker) -> Color
        Set: CalendarTitleBackColor(self: DateTimePicker) = value
        """
        ...

    @property
    def CalendarTitleForeColor(self) -> Color:
        """
        Get: CalendarTitleForeColor(self: DateTimePicker) -> Color
        Set: CalendarTitleForeColor(self: DateTimePicker) = value
        """
        ...

    @property
    def CalendarTrailingForeColor(self) -> Color:
        """
        Get: CalendarTrailingForeColor(self: DateTimePicker) -> Color
        Set: CalendarTrailingForeColor(self: DateTimePicker) = value
        """
        ...

    @property
    def Checked(self) -> bool:
        """
        Get: Checked(self: DateTimePicker) -> bool
        Set: Checked(self: DateTimePicker) = value
        """
        ...

    @property
    def CustomFormat(self) -> str:
        """
        Get: CustomFormat(self: DateTimePicker) -> str
        Set: CustomFormat(self: DateTimePicker) = value
        """
        ...

    @property
    def DropDownAlign(self): # -> LeftRightAlignment
        """
        Get: DropDownAlign(self: DateTimePicker) -> LeftRightAlignment
        Set: DropDownAlign(self: DateTimePicker) = value
        """
        ...

    @property
    def Format(self): # -> DateTimePickerFormat
        """
        Get: Format(self: DateTimePicker) -> DateTimePickerFormat
        Set: Format(self: DateTimePicker) = value
        """
        ...

    @property
    def MaxDate(self) -> DateTime:
        """
        Get: MaxDate(self: DateTimePicker) -> DateTime
        Set: MaxDate(self: DateTimePicker) = value
        """
        ...

    @property
    def MaximumDateTime(self) -> DateTime:
        """ Get: MaximumDateTime() -> DateTime """
        ...

    @property
    def MinDate(self) -> DateTime:
        """
        Get: MinDate(self: DateTimePicker) -> DateTime
        Set: MinDate(self: DateTimePicker) = value
        """
        ...

    @property
    def MinimumDateTime(self) -> DateTime:
        """ Get: MinimumDateTime() -> DateTime """
        ...

    @property
    def PreferredHeight(self) -> int:
        """ Get: PreferredHeight(self: DateTimePicker) -> int """
        ...

    @property
    def RightToLeftLayout(self) -> bool:
        """
        Get: RightToLeftLayout(self: DateTimePicker) -> bool
        Set: RightToLeftLayout(self: DateTimePicker) = value
        """
        ...

    @property
    def ShowCheckBox(self) -> bool:
        """
        Get: ShowCheckBox(self: DateTimePicker) -> bool
        Set: ShowCheckBox(self: DateTimePicker) = value
        """
        ...

    @property
    def ShowUpDown(self) -> bool:
        """
        Get: ShowUpDown(self: DateTimePicker) -> bool
        Set: ShowUpDown(self: DateTimePicker) = value
        """
        ...

    @property
    def Value(self) -> DateTime:
        """
        Get: Value(self: DateTimePicker) -> DateTime
        Set: Value(self: DateTimePicker) = value
        """
        ...


    def DateTimePickerAccessibleObject(self, *args): #cannot find CLR method
        """ DateTimePickerAccessibleObject(owner: DateTimePicker) """
        ...

    def OnCloseUp(self, *args): #cannot find CLR method
        """ OnCloseUp(self: DateTimePicker, eventargs: EventArgs) """
        ...

    def OnDropDown(self, *args): #cannot find CLR method
        """ OnDropDown(self: DateTimePicker, eventargs: EventArgs) """
        ...

    def OnFormatChanged(self, *args): #cannot find CLR method
        """ OnFormatChanged(self: DateTimePicker, e: EventArgs) """
        ...

    def OnRightToLeftLayoutChanged(self, *args): #cannot find CLR method
        """ OnRightToLeftLayoutChanged(self: DateTimePicker, e: EventArgs) """
        ...

    def OnValueChanged(self, *args): #cannot find CLR method
        """ OnValueChanged(self: DateTimePicker, eventargs: EventArgs) """
        ...

    def ToString(self) -> str:
        """ ToString(self: DateTimePicker) -> str """
        ...

    BackColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    Click = ...
    CloseUp = ...
    DefaultMonthBackColor: Color = ...
    DefaultTitleBackColor: Color = ...
    DefaultTitleForeColor: Color = ...
    DefaultTrailingForeColor: Color = ...
    DoubleClick = ...
    DropDown = ...
    ForeColorChanged = ...
    FormatChanged = ...
    MaxDateTime: DateTime = ...
    MinDateTime: DateTime = ...
    MouseClick = ...
    MouseDoubleClick = ...
    PaddingChanged = ...
    Paint = ...
    RightToLeftLayoutChanged = ...
    TextChanged = ...
    ValueChanged = ...


class DateTimePickerFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DateTimePickerFormat, values: Custom (8), Long (1), Short (2), Time (4) """
    Custom: DateTimePickerFormat = ...
    Long: DateTimePickerFormat = ...
    Short: DateTimePickerFormat = ...
    Time: DateTimePickerFormat = ...
    value__ = ...


class Day(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum Day, values: Default (7), Friday (4), Monday (0), Saturday (5), Sunday (6), Thursday (3), Tuesday (1), Wednesday (2) """
    Default: Day = ...
    Friday: Day = ...
    Monday: Day = ...
    Saturday: Day = ...
    Sunday: Day = ...
    Thursday: Day = ...
    Tuesday: Day = ...
    value__ = ...
    Wednesday: Day = ...


class DialogResult(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DialogResult, values: Abort (3), Cancel (2), Ignore (5), No (7), None (0), OK (1), Retry (4), Yes (6) """
    Abort: DialogResult = ...
    Cancel: DialogResult = ...
    Ignore: DialogResult = ...
    No: DialogResult = ...
    OK: DialogResult = ...
    Retry: DialogResult = ...
    value__ = ...
    Yes: DialogResult = ...


class DockingAttribute(Attribute): # skipped bases: <type '_Attribute'>, <type 'object'>
    """
    DockingAttribute()
    DockingAttribute(dockingBehavior: DockingBehavior)
    """
    @property
    def DockingBehavior(self): # -> DockingBehavior
        """ Get: DockingBehavior(self: DockingAttribute) -> DockingBehavior """
        ...


    def __new__(cls, dockingBehavior = ...) -> Self: # Not found arg types: {'dockingBehavior': 'DockingBehavior'}
        """
        __new__(cls: type)
        __new__(cls: type, dockingBehavior: DockingBehavior)
        """
        ...

    Default: DockingAttribute = ...


class DockingBehavior(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DockingBehavior, values: Ask (1), AutoDock (2), Never (0) """
    Ask: DockingBehavior = ...
    AutoDock: DockingBehavior = ...
    Never: DockingBehavior = ...
    value__ = ...


class DockStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DockStyle, values: Bottom (2), Fill (5), Left (3), None (0), Right (4), Top (1) """
    Bottom: DockStyle = ...
    Fill: DockStyle = ...
    Left: DockStyle = ...
    Right: DockStyle = ...
    Top: DockStyle = ...
    value__ = ...


class UpDownBase(ContainerControl): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'IContainerControl'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ UpDownBase() """
    @property
    def AutoScroll(self) -> bool:
        """
        Get: AutoScroll(self: UpDownBase) -> bool
        Set: AutoScroll(self: UpDownBase) = value
        """
        ...

    @property
    def AutoScrollMargin(self) -> Size:
        """
        Get: AutoScrollMargin(self: UpDownBase) -> Size
        Set: AutoScrollMargin(self: UpDownBase) = value
        """
        ...

    @property
    def AutoScrollMinSize(self) -> Size:
        """
        Get: AutoScrollMinSize(self: UpDownBase) -> Size
        Set: AutoScrollMinSize(self: UpDownBase) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: UpDownBase) -> bool
        Set: AutoSize(self: UpDownBase) = value
        """
        ...

    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: UpDownBase) -> Color
        Set: BackColor(self: UpDownBase) = value
        """
        ...

    @property
    def BackgroundImage(self) -> Image:
        """
        Get: BackgroundImage(self: UpDownBase) -> Image
        Set: BackgroundImage(self: UpDownBase) = value
        """
        ...

    @property
    def BackgroundImageLayout(self): # -> ImageLayout
        """
        Get: BackgroundImageLayout(self: UpDownBase) -> ImageLayout
        Set: BackgroundImageLayout(self: UpDownBase) = value
        """
        ...

    @property
    def BorderStyle(self) -> BorderStyle:
        """
        Get: BorderStyle(self: UpDownBase) -> BorderStyle
        Set: BorderStyle(self: UpDownBase) = value
        """
        ...

    @property
    def ChangingText(self):
        ...

    @property
    def ContextMenu(self) -> ContextMenu:
        """
        Get: ContextMenu(self: UpDownBase) -> ContextMenu
        Set: ContextMenu(self: UpDownBase) = value
        """
        ...

    @property
    def ContextMenuStrip(self) -> ContextMenuStrip:
        """
        Get: ContextMenuStrip(self: UpDownBase) -> ContextMenuStrip
        Set: ContextMenuStrip(self: UpDownBase) = value
        """
        ...

    @property
    def DockPadding(self): # -> DockPaddingEdges
        """ Get: DockPadding(self: UpDownBase) -> DockPaddingEdges """
        ...

    @property
    def Focused(self) -> bool:
        """ Get: Focused(self: UpDownBase) -> bool """
        ...

    @property
    def ForeColor(self) -> Color:
        """
        Get: ForeColor(self: UpDownBase) -> Color
        Set: ForeColor(self: UpDownBase) = value
        """
        ...

    @property
    def InterceptArrowKeys(self) -> bool:
        """
        Get: InterceptArrowKeys(self: UpDownBase) -> bool
        Set: InterceptArrowKeys(self: UpDownBase) = value
        """
        ...

    @property
    def MaximumSize(self) -> Size:
        """
        Get: MaximumSize(self: UpDownBase) -> Size
        Set: MaximumSize(self: UpDownBase) = value
        """
        ...

    @property
    def MinimumSize(self) -> Size:
        """
        Get: MinimumSize(self: UpDownBase) -> Size
        Set: MinimumSize(self: UpDownBase) = value
        """
        ...

    @property
    def PreferredHeight(self) -> int:
        """ Get: PreferredHeight(self: UpDownBase) -> int """
        ...

    @property
    def ReadOnly(self) -> bool:
        """
        Get: ReadOnly(self: UpDownBase) -> bool
        Set: ReadOnly(self: UpDownBase) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: UpDownBase) -> str
        Set: Text(self: UpDownBase) = value
        """
        ...

    @property
    def TextAlign(self): # -> HorizontalAlignment
        """
        Get: TextAlign(self: UpDownBase) -> HorizontalAlignment
        Set: TextAlign(self: UpDownBase) = value
        """
        ...

    @property
    def UpDownAlign(self): # -> LeftRightAlignment
        """
        Get: UpDownAlign(self: UpDownBase) -> LeftRightAlignment
        Set: UpDownAlign(self: UpDownBase) = value
        """
        ...

    @property
    def UserEdit(self):
        ...


    def DownButton(self): # -> 
        """ DownButton(self: UpDownBase) """
        ...

    def OnChanged(self, *args): #cannot find CLR method
        """ OnChanged(self: UpDownBase, source: object, e: EventArgs) """
        ...

    def OnTextBoxKeyDown(self, *args): #cannot find CLR method
        """ OnTextBoxKeyDown(self: UpDownBase, source: object, e: KeyEventArgs) """
        ...

    def OnTextBoxKeyPress(self, *args): #cannot find CLR method
        """ OnTextBoxKeyPress(self: UpDownBase, source: object, e: KeyPressEventArgs) """
        ...

    def OnTextBoxLostFocus(self, *args): #cannot find CLR method
        """ OnTextBoxLostFocus(self: UpDownBase, source: object, e: EventArgs) """
        ...

    def OnTextBoxResize(self, *args): #cannot find CLR method
        """ OnTextBoxResize(self: UpDownBase, source: object, e: EventArgs) """
        ...

    def OnTextBoxTextChanged(self, *args): #cannot find CLR method
        """ OnTextBoxTextChanged(self: UpDownBase, source: object, e: EventArgs) """
        ...

    def UpButton(self): # -> 
        """ UpButton(self: UpDownBase) """
        ...

    def UpdateEditText(self, *args): #cannot find CLR method
        """ UpdateEditText(self: UpDownBase) """
        ...

    def ValidateEditText(self, *args): #cannot find CLR method
        """ ValidateEditText(self: UpDownBase) """
        ...

    AutoSizeChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...


class DomainUpDown(UpDownBase): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IViewObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'IContainerControl'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IOleObject'>, <type 'object'>
    """ DomainUpDown() """
    @property
    def Items(self): # -> DomainUpDownItemCollection
        """ Get: Items(self: DomainUpDown) -> DomainUpDownItemCollection """
        ...

    @property
    def Padding(self): # -> Padding
        """
        Get: Padding(self: DomainUpDown) -> Padding
        Set: Padding(self: DomainUpDown) = value
        """
        ...

    @property
    def SelectedIndex(self) -> int:
        """
        Get: SelectedIndex(self: DomainUpDown) -> int
        Set: SelectedIndex(self: DomainUpDown) = value
        """
        ...

    @property
    def SelectedItem(self) -> object:
        """
        Get: SelectedItem(self: DomainUpDown) -> object
        Set: SelectedItem(self: DomainUpDown) = value
        """
        ...

    @property
    def Sorted(self) -> bool:
        """
        Get: Sorted(self: DomainUpDown) -> bool
        Set: Sorted(self: DomainUpDown) = value
        """
        ...

    @property
    def Wrap(self) -> bool:
        """
        Get: Wrap(self: DomainUpDown) -> bool
        Set: Wrap(self: DomainUpDown) = value
        """
        ...


    def DomainItemAccessibleObject(self, *args): #cannot find CLR method
        """ DomainItemAccessibleObject(name: str, parent: AccessibleObject) """
        ...

    def DomainUpDownAccessibleObject(self, *args): #cannot find CLR method
        """ DomainUpDownAccessibleObject(owner: Control) """
        ...

    def DomainUpDownItemCollection(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def OnSelectedItemChanged(self, *args): #cannot find CLR method
        """ OnSelectedItemChanged(self: DomainUpDown, source: object, e: EventArgs) """
        ...

    def ToString(self) -> str:
        """ ToString(self: DomainUpDown) -> str """
        ...

    PaddingChanged = ...
    SelectedItemChanged = ...


class DpiChangedEventArgs(CancelEventArgs): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def DeviceDpiNew(self) -> int:
        """ Get: DeviceDpiNew(self: DpiChangedEventArgs) -> int """
        ...

    @property
    def DeviceDpiOld(self) -> int:
        """ Get: DeviceDpiOld(self: DpiChangedEventArgs) -> int """
        ...

    @property
    def SuggestedRectangle(self) -> Rectangle:
        """ Get: SuggestedRectangle(self: DpiChangedEventArgs) -> Rectangle """
        ...


    def ToString(self) -> str:
        """ ToString(self: DpiChangedEventArgs) -> str """
        ...


class DpiChangedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DpiChangedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DpiChangedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DpiChangedEventHandler, sender: object, e: DpiChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DpiChangedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DpiChangedEventArgs): # -> 
        """ Invoke(self: DpiChangedEventHandler, sender: object, e: DpiChangedEventArgs) """
        ...


class DragAction(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DragAction, values: Cancel (2), Continue (0), Drop (1) """
    Cancel: DragAction = ...
    Continue: DragAction = ...
    Drop: DragAction = ...
    value__ = ...


class DragDropEffects(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) DragDropEffects, values: All (-2147483645), Copy (1), Link (4), Move (2), None (0), Scroll (-2147483648) """
    All: DragDropEffects = ...
    Copy: DragDropEffects = ...
    Link: DragDropEffects = ...
    Move: DragDropEffects = ...
    Scroll: DragDropEffects = ...
    value__ = ...


class DragEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DragEventArgs(data: IDataObject, keyState: int, x: int, y: int, allowedEffect: DragDropEffects, effect: DragDropEffects) """
    @property
    def AllowedEffect(self) -> DragDropEffects:
        """ Get: AllowedEffect(self: DragEventArgs) -> DragDropEffects """
        ...

    @property
    def Data(self) -> IDataObject:
        """ Get: Data(self: DragEventArgs) -> IDataObject """
        ...

    @property
    def Effect(self) -> DragDropEffects:
        """
        Get: Effect(self: DragEventArgs) -> DragDropEffects
        Set: Effect(self: DragEventArgs) = value
        """
        ...

    @property
    def KeyState(self) -> int:
        """ Get: KeyState(self: DragEventArgs) -> int """
        ...

    @property
    def X(self) -> int:
        """ Get: X(self: DragEventArgs) -> int """
        ...

    @property
    def Y(self) -> int:
        """ Get: Y(self: DragEventArgs) -> int """
        ...


    def __new__(cls, data:IDataObject, keyState:int, x:int, y:int, allowedEffect:DragDropEffects, effect:DragDropEffects) -> Self:
        """ __new__(cls: type, data: IDataObject, keyState: int, x: int, y: int, allowedEffect: DragDropEffects, effect: DragDropEffects) """
        ...


class DragEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DragEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DragEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DragEventHandler, sender: object, e: DragEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DragEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DragEventArgs): # -> 
        """ Invoke(self: DragEventHandler, sender: object, e: DragEventArgs) """
        ...


class DrawItemEventArgs(EventArgs): # skipped bases: <type 'object'>
    """
    DrawItemEventArgs(graphics: Graphics, font: Font, rect: Rectangle, index: int, state: DrawItemState)
    DrawItemEventArgs(graphics: Graphics, font: Font, rect: Rectangle, index: int, state: DrawItemState, foreColor: Color, backColor: Color)
    """
    @property
    def BackColor(self) -> Color:
        """ Get: BackColor(self: DrawItemEventArgs) -> Color """
        ...

    @property
    def Bounds(self) -> Rectangle:
        """ Get: Bounds(self: DrawItemEventArgs) -> Rectangle """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: DrawItemEventArgs) -> Font """
        ...

    @property
    def ForeColor(self) -> Color:
        """ Get: ForeColor(self: DrawItemEventArgs) -> Color """
        ...

    @property
    def Graphics(self) -> Graphics:
        """ Get: Graphics(self: DrawItemEventArgs) -> Graphics """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: DrawItemEventArgs) -> int """
        ...

    @property
    def State(self): # -> DrawItemState
        """ Get: State(self: DrawItemEventArgs) -> DrawItemState """
        ...


    def DrawBackground(self): # -> 
        """ DrawBackground(self: DrawItemEventArgs) """
        ...

    def DrawFocusRectangle(self): # -> 
        """ DrawFocusRectangle(self: DrawItemEventArgs) """
        ...

    def __new__(cls, graphics:Graphics, font:Font, rect:Rectangle, index:int, state, foreColor:Color = ..., backColor:Color = ...) -> Self: # Not found arg types: {'state': 'DrawItemState'}
        """
        __new__(cls: type, graphics: Graphics, font: Font, rect: Rectangle, index: int, state: DrawItemState)
        __new__(cls: type, graphics: Graphics, font: Font, rect: Rectangle, index: int, state: DrawItemState, foreColor: Color, backColor: Color)
        """
        ...


class DrawItemEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DrawItemEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DrawItemEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DrawItemEventHandler, sender: object, e: DrawItemEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DrawItemEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DrawItemEventArgs): # -> 
        """ Invoke(self: DrawItemEventHandler, sender: object, e: DrawItemEventArgs) """
        ...


class DrawItemState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) DrawItemState, values: Checked (8), ComboBoxEdit (4096), Default (32), Disabled (4), Focus (16), Grayed (2), HotLight (64), Inactive (128), NoAccelerator (256), NoFocusRect (512), None (0), Selected (1) """
    Checked: DrawItemState = ...
    ComboBoxEdit: DrawItemState = ...
    Default: DrawItemState = ...
    Disabled: DrawItemState = ...
    Focus: DrawItemState = ...
    Grayed: DrawItemState = ...
    HotLight: DrawItemState = ...
    Inactive: DrawItemState = ...
    NoAccelerator: DrawItemState = ...
    NoFocusRect: DrawItemState = ...
    Selected: DrawItemState = ...
    value__ = ...


class DrawListViewColumnHeaderEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DrawListViewColumnHeaderEventArgs(graphics: Graphics, bounds: Rectangle, columnIndex: int, header: ColumnHeader, state: ListViewItemStates, foreColor: Color, backColor: Color, font: Font) """
    @property
    def BackColor(self) -> Color:
        """ Get: BackColor(self: DrawListViewColumnHeaderEventArgs) -> Color """
        ...

    @property
    def Bounds(self) -> Rectangle:
        """ Get: Bounds(self: DrawListViewColumnHeaderEventArgs) -> Rectangle """
        ...

    @property
    def ColumnIndex(self) -> int:
        """ Get: ColumnIndex(self: DrawListViewColumnHeaderEventArgs) -> int """
        ...

    @property
    def DrawDefault(self) -> bool:
        """
        Get: DrawDefault(self: DrawListViewColumnHeaderEventArgs) -> bool
        Set: DrawDefault(self: DrawListViewColumnHeaderEventArgs) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: DrawListViewColumnHeaderEventArgs) -> Font """
        ...

    @property
    def ForeColor(self) -> Color:
        """ Get: ForeColor(self: DrawListViewColumnHeaderEventArgs) -> Color """
        ...

    @property
    def Graphics(self) -> Graphics:
        """ Get: Graphics(self: DrawListViewColumnHeaderEventArgs) -> Graphics """
        ...

    @property
    def Header(self) -> ColumnHeader:
        """ Get: Header(self: DrawListViewColumnHeaderEventArgs) -> ColumnHeader """
        ...

    @property
    def State(self): # -> ListViewItemStates
        """ Get: State(self: DrawListViewColumnHeaderEventArgs) -> ListViewItemStates """
        ...


    def DrawBackground(self): # -> 
        """ DrawBackground(self: DrawListViewColumnHeaderEventArgs) """
        ...

    def DrawText(self, flags = ...): # ->  # Not found arg types: {'flags': 'TextFormatFlags'}
        """ DrawText(self: DrawListViewColumnHeaderEventArgs)DrawText(self: DrawListViewColumnHeaderEventArgs, flags: TextFormatFlags) """
        ...

    def __new__(cls, graphics:Graphics, bounds:Rectangle, columnIndex:int, header:ColumnHeader, state, foreColor:Color, backColor:Color, font:Font) -> Self: # Not found arg types: {'state': 'ListViewItemStates'}
        """ __new__(cls: type, graphics: Graphics, bounds: Rectangle, columnIndex: int, header: ColumnHeader, state: ListViewItemStates, foreColor: Color, backColor: Color, font: Font) """
        ...


class DrawListViewColumnHeaderEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DrawListViewColumnHeaderEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DrawListViewColumnHeaderEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DrawListViewColumnHeaderEventHandler, sender: object, e: DrawListViewColumnHeaderEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DrawListViewColumnHeaderEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DrawListViewColumnHeaderEventArgs): # -> 
        """ Invoke(self: DrawListViewColumnHeaderEventHandler, sender: object, e: DrawListViewColumnHeaderEventArgs) """
        ...


class DrawListViewItemEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DrawListViewItemEventArgs(graphics: Graphics, item: ListViewItem, bounds: Rectangle, itemIndex: int, state: ListViewItemStates) """
    @property
    def Bounds(self) -> Rectangle:
        """ Get: Bounds(self: DrawListViewItemEventArgs) -> Rectangle """
        ...

    @property
    def DrawDefault(self) -> bool:
        """
        Get: DrawDefault(self: DrawListViewItemEventArgs) -> bool
        Set: DrawDefault(self: DrawListViewItemEventArgs) = value
        """
        ...

    @property
    def Graphics(self) -> Graphics:
        """ Get: Graphics(self: DrawListViewItemEventArgs) -> Graphics """
        ...

    @property
    def Item(self) -> ListViewItem:
        """ Get: Item(self: DrawListViewItemEventArgs) -> ListViewItem """
        ...

    @property
    def ItemIndex(self) -> int:
        """ Get: ItemIndex(self: DrawListViewItemEventArgs) -> int """
        ...

    @property
    def State(self): # -> ListViewItemStates
        """ Get: State(self: DrawListViewItemEventArgs) -> ListViewItemStates """
        ...


    def DrawBackground(self): # -> 
        """ DrawBackground(self: DrawListViewItemEventArgs) """
        ...

    def DrawFocusRectangle(self): # -> 
        """ DrawFocusRectangle(self: DrawListViewItemEventArgs) """
        ...

    def DrawText(self, flags = ...): # ->  # Not found arg types: {'flags': 'TextFormatFlags'}
        """ DrawText(self: DrawListViewItemEventArgs)DrawText(self: DrawListViewItemEventArgs, flags: TextFormatFlags) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __new__(cls, graphics:Graphics, item:ListViewItem, bounds:Rectangle, itemIndex:int, state) -> Self: # Not found arg types: {'state': 'ListViewItemStates'}
        """ __new__(cls: type, graphics: Graphics, item: ListViewItem, bounds: Rectangle, itemIndex: int, state: ListViewItemStates) """
        ...


class DrawListViewItemEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DrawListViewItemEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DrawListViewItemEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DrawListViewItemEventHandler, sender: object, e: DrawListViewItemEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DrawListViewItemEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DrawListViewItemEventArgs): # -> 
        """ Invoke(self: DrawListViewItemEventHandler, sender: object, e: DrawListViewItemEventArgs) """
        ...


class DrawListViewSubItemEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DrawListViewSubItemEventArgs(graphics: Graphics, bounds: Rectangle, item: ListViewItem, subItem: ListViewSubItem, itemIndex: int, columnIndex: int, header: ColumnHeader, itemState: ListViewItemStates) """
    @property
    def Bounds(self) -> Rectangle:
        """ Get: Bounds(self: DrawListViewSubItemEventArgs) -> Rectangle """
        ...

    @property
    def ColumnIndex(self) -> int:
        """ Get: ColumnIndex(self: DrawListViewSubItemEventArgs) -> int """
        ...

    @property
    def DrawDefault(self) -> bool:
        """
        Get: DrawDefault(self: DrawListViewSubItemEventArgs) -> bool
        Set: DrawDefault(self: DrawListViewSubItemEventArgs) = value
        """
        ...

    @property
    def Graphics(self) -> Graphics:
        """ Get: Graphics(self: DrawListViewSubItemEventArgs) -> Graphics """
        ...

    @property
    def Header(self) -> ColumnHeader:
        """ Get: Header(self: DrawListViewSubItemEventArgs) -> ColumnHeader """
        ...

    @property
    def Item(self) -> ListViewItem:
        """ Get: Item(self: DrawListViewSubItemEventArgs) -> ListViewItem """
        ...

    @property
    def ItemIndex(self) -> int:
        """ Get: ItemIndex(self: DrawListViewSubItemEventArgs) -> int """
        ...

    @property
    def ItemState(self): # -> ListViewItemStates
        """ Get: ItemState(self: DrawListViewSubItemEventArgs) -> ListViewItemStates """
        ...

    @property
    def SubItem(self): # -> ListViewSubItem
        """ Get: SubItem(self: DrawListViewSubItemEventArgs) -> ListViewSubItem """
        ...


    def DrawBackground(self): # -> 
        """ DrawBackground(self: DrawListViewSubItemEventArgs) """
        ...

    def DrawFocusRectangle(self, bounds:Rectangle): # -> 
        """ DrawFocusRectangle(self: DrawListViewSubItemEventArgs, bounds: Rectangle) """
        ...

    def DrawText(self, flags = ...): # ->  # Not found arg types: {'flags': 'TextFormatFlags'}
        """ DrawText(self: DrawListViewSubItemEventArgs)DrawText(self: DrawListViewSubItemEventArgs, flags: TextFormatFlags) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __new__(cls, graphics:Graphics, bounds:Rectangle, item:ListViewItem, subItem, itemIndex:int, columnIndex:int, header:ColumnHeader, itemState) -> Self: # Not found arg types: {'itemState': 'ListViewItemStates', 'subItem': 'ListViewSubItem'}
        """ __new__(cls: type, graphics: Graphics, bounds: Rectangle, item: ListViewItem, subItem: ListViewSubItem, itemIndex: int, columnIndex: int, header: ColumnHeader, itemState: ListViewItemStates) """
        ...


class DrawListViewSubItemEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DrawListViewSubItemEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DrawListViewSubItemEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DrawListViewSubItemEventHandler, sender: object, e: DrawListViewSubItemEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DrawListViewSubItemEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DrawListViewSubItemEventArgs): # -> 
        """ Invoke(self: DrawListViewSubItemEventHandler, sender: object, e: DrawListViewSubItemEventArgs) """
        ...


class DrawMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DrawMode, values: Normal (0), OwnerDrawFixed (1), OwnerDrawVariable (2) """
    Normal: DrawMode = ...
    OwnerDrawFixed: DrawMode = ...
    OwnerDrawVariable: DrawMode = ...
    value__ = ...


class DrawToolTipEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DrawToolTipEventArgs(graphics: Graphics, associatedWindow: IWin32Window, associatedControl: Control, bounds: Rectangle, toolTipText: str, backColor: Color, foreColor: Color, font: Font) """
    @property
    def AssociatedControl(self) -> Control:
        """ Get: AssociatedControl(self: DrawToolTipEventArgs) -> Control """
        ...

    @property
    def AssociatedWindow(self) -> IWin32Window:
        """ Get: AssociatedWindow(self: DrawToolTipEventArgs) -> IWin32Window """
        ...

    @property
    def Bounds(self) -> Rectangle:
        """ Get: Bounds(self: DrawToolTipEventArgs) -> Rectangle """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: DrawToolTipEventArgs) -> Font """
        ...

    @property
    def Graphics(self) -> Graphics:
        """ Get: Graphics(self: DrawToolTipEventArgs) -> Graphics """
        ...

    @property
    def ToolTipText(self) -> str:
        """ Get: ToolTipText(self: DrawToolTipEventArgs) -> str """
        ...


    def DrawBackground(self): # -> 
        """ DrawBackground(self: DrawToolTipEventArgs) """
        ...

    def DrawBorder(self): # -> 
        """ DrawBorder(self: DrawToolTipEventArgs) """
        ...

    def DrawText(self, flags = ...): # ->  # Not found arg types: {'flags': 'TextFormatFlags'}
        """ DrawText(self: DrawToolTipEventArgs)DrawText(self: DrawToolTipEventArgs, flags: TextFormatFlags) """
        ...

    def __new__(cls, graphics:Graphics, associatedWindow:IWin32Window, associatedControl:Control, bounds:Rectangle, toolTipText:str, backColor:Color, foreColor:Color, font:Font) -> Self:
        """ __new__(cls: type, graphics: Graphics, associatedWindow: IWin32Window, associatedControl: Control, bounds: Rectangle, toolTipText: str, backColor: Color, foreColor: Color, font: Font) """
        ...


class DrawToolTipEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DrawToolTipEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DrawToolTipEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DrawToolTipEventHandler, sender: object, e: DrawToolTipEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DrawToolTipEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DrawToolTipEventArgs): # -> 
        """ Invoke(self: DrawToolTipEventHandler, sender: object, e: DrawToolTipEventArgs) """
        ...


class DrawTreeNodeEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ DrawTreeNodeEventArgs(graphics: Graphics, node: TreeNode, bounds: Rectangle, state: TreeNodeStates) """
    @property
    def Bounds(self) -> Rectangle:
        """ Get: Bounds(self: DrawTreeNodeEventArgs) -> Rectangle """
        ...

    @property
    def DrawDefault(self) -> bool:
        """
        Get: DrawDefault(self: DrawTreeNodeEventArgs) -> bool
        Set: DrawDefault(self: DrawTreeNodeEventArgs) = value
        """
        ...

    @property
    def Graphics(self) -> Graphics:
        """ Get: Graphics(self: DrawTreeNodeEventArgs) -> Graphics """
        ...

    @property
    def Node(self): # -> TreeNode
        """ Get: Node(self: DrawTreeNodeEventArgs) -> TreeNode """
        ...

    @property
    def State(self): # -> TreeNodeStates
        """ Get: State(self: DrawTreeNodeEventArgs) -> TreeNodeStates """
        ...


    def __new__(cls, graphics:Graphics, node, bounds:Rectangle, state) -> Self: # Not found arg types: {'state': 'TreeNodeStates', 'node': 'TreeNode'}
        """ __new__(cls: type, graphics: Graphics, node: TreeNode, bounds: Rectangle, state: TreeNodeStates) """
        ...


class DrawTreeNodeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DrawTreeNodeEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:DrawTreeNodeEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: DrawTreeNodeEventHandler, sender: object, e: DrawTreeNodeEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: DrawTreeNodeEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:DrawTreeNodeEventArgs): # -> 
        """ Invoke(self: DrawTreeNodeEventHandler, sender: object, e: DrawTreeNodeEventArgs) """
        ...


class ErrorBlinkStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ErrorBlinkStyle, values: AlwaysBlink (1), BlinkIfDifferentError (0), NeverBlink (2) """
    AlwaysBlink: ErrorBlinkStyle = ...
    BlinkIfDifferentError: ErrorBlinkStyle = ...
    NeverBlink: ErrorBlinkStyle = ...
    value__ = ...


class ErrorIconAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ErrorIconAlignment, values: BottomLeft (4), BottomRight (5), MiddleLeft (2), MiddleRight (3), TopLeft (0), TopRight (1) """
    BottomLeft: ErrorIconAlignment = ...
    BottomRight: ErrorIconAlignment = ...
    MiddleLeft: ErrorIconAlignment = ...
    MiddleRight: ErrorIconAlignment = ...
    TopLeft: ErrorIconAlignment = ...
    TopRight: ErrorIconAlignment = ...
    value__ = ...


class ErrorProvider(IExtenderProvider, ISupportInitialize, Component): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """
    ErrorProvider()
    ErrorProvider(parentControl: ContainerControl)
    ErrorProvider(container: IContainer)
    """
    @property
    def BlinkRate(self) -> int:
        """
        Get: BlinkRate(self: ErrorProvider) -> int
        Set: BlinkRate(self: ErrorProvider) = value
        """
        ...

    @property
    def BlinkStyle(self) -> ErrorBlinkStyle:
        """
        Get: BlinkStyle(self: ErrorProvider) -> ErrorBlinkStyle
        Set: BlinkStyle(self: ErrorProvider) = value
        """
        ...

    @property
    def ContainerControl(self) -> ContainerControl:
        """
        Get: ContainerControl(self: ErrorProvider) -> ContainerControl
        Set: ContainerControl(self: ErrorProvider) = value
        """
        ...

    @property
    def DataMember(self) -> str:
        """
        Get: DataMember(self: ErrorProvider) -> str
        Set: DataMember(self: ErrorProvider) = value
        """
        ...

    @property
    def DataSource(self) -> object:
        """
        Get: DataSource(self: ErrorProvider) -> object
        Set: DataSource(self: ErrorProvider) = value
        """
        ...

    @property
    def Icon(self) -> Icon:
        """
        Get: Icon(self: ErrorProvider) -> Icon
        Set: Icon(self: ErrorProvider) = value
        """
        ...

    @property
    def RightToLeft(self) -> bool:
        """
        Get: RightToLeft(self: ErrorProvider) -> bool
        Set: RightToLeft(self: ErrorProvider) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: ErrorProvider) -> object
        Set: Tag(self: ErrorProvider) = value
        """
        ...


    def BindToDataAndErrors(self, newDataSource:object, newDataMember:str): # -> 
        """ BindToDataAndErrors(self: ErrorProvider, newDataSource: object, newDataMember: str) """
        ...

    def Clear(self): # -> 
        """ Clear(self: ErrorProvider) """
        ...

    def GetError(self, control:Control) -> str:
        """ GetError(self: ErrorProvider, control: Control) -> str """
        ...

    def GetIconAlignment(self, control:Control) -> ErrorIconAlignment:
        """ GetIconAlignment(self: ErrorProvider, control: Control) -> ErrorIconAlignment """
        ...

    def GetIconPadding(self, control:Control) -> int:
        """ GetIconPadding(self: ErrorProvider, control: Control) -> int """
        ...

    def OnRightToLeftChanged(self, *args): #cannot find CLR method
        """ OnRightToLeftChanged(self: ErrorProvider, e: EventArgs) """
        ...

    def SetError(self, control:Control, value:str): # -> 
        """ SetError(self: ErrorProvider, control: Control, value: str) """
        ...

    def SetIconAlignment(self, control:Control, value:ErrorIconAlignment): # -> 
        """ SetIconAlignment(self: ErrorProvider, control: Control, value: ErrorIconAlignment) """
        ...

    def SetIconPadding(self, control:Control, padding:int): # -> 
        """ SetIconPadding(self: ErrorProvider, control: Control, padding: int) """
        ...

    def UpdateBinding(self): # -> 
        """ UpdateBinding(self: ErrorProvider) """
        ...

    def __new__(cls, *__args:ContainerControl) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, parentControl: ContainerControl)
        __new__(cls: type, container: IContainer)
        """
        ...

    RightToLeftChanged = ...


class FeatureSupport(IFeatureSupport): # skipped bases: <type 'object'>
    """ no doc """
    pass

class FileDialog(CommonDialog): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """ no doc """
    @property
    def AddExtension(self) -> bool:
        """
        Get: AddExtension(self: FileDialog) -> bool
        Set: AddExtension(self: FileDialog) = value
        """
        ...

    @property
    def AutoUpgradeEnabled(self) -> bool:
        """
        Get: AutoUpgradeEnabled(self: FileDialog) -> bool
        Set: AutoUpgradeEnabled(self: FileDialog) = value
        """
        ...

    @property
    def CheckFileExists(self) -> bool:
        """
        Get: CheckFileExists(self: FileDialog) -> bool
        Set: CheckFileExists(self: FileDialog) = value
        """
        ...

    @property
    def CheckPathExists(self) -> bool:
        """
        Get: CheckPathExists(self: FileDialog) -> bool
        Set: CheckPathExists(self: FileDialog) = value
        """
        ...

    @property
    def CustomPlaces(self): # -> FileDialogCustomPlacesCollection
        """ Get: CustomPlaces(self: FileDialog) -> FileDialogCustomPlacesCollection """
        ...

    @property
    def DefaultExt(self) -> str:
        """
        Get: DefaultExt(self: FileDialog) -> str
        Set: DefaultExt(self: FileDialog) = value
        """
        ...

    @property
    def DereferenceLinks(self) -> bool:
        """
        Get: DereferenceLinks(self: FileDialog) -> bool
        Set: DereferenceLinks(self: FileDialog) = value
        """
        ...

    @property
    def FileName(self) -> str:
        """
        Get: FileName(self: FileDialog) -> str
        Set: FileName(self: FileDialog) = value
        """
        ...

    @property
    def FileNames(self) -> Array:
        """ Get: FileNames(self: FileDialog) -> Array[str] """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: FileDialog) -> str
        Set: Filter(self: FileDialog) = value
        """
        ...

    @property
    def FilterIndex(self) -> int:
        """
        Get: FilterIndex(self: FileDialog) -> int
        Set: FilterIndex(self: FileDialog) = value
        """
        ...

    @property
    def InitialDirectory(self) -> str:
        """
        Get: InitialDirectory(self: FileDialog) -> str
        Set: InitialDirectory(self: FileDialog) = value
        """
        ...

    @property
    def Instance(self):
        ...

    @property
    def Options(self):
        ...

    @property
    def RestoreDirectory(self) -> bool:
        """
        Get: RestoreDirectory(self: FileDialog) -> bool
        Set: RestoreDirectory(self: FileDialog) = value
        """
        ...

    @property
    def ShowHelp(self) -> bool:
        """
        Get: ShowHelp(self: FileDialog) -> bool
        Set: ShowHelp(self: FileDialog) = value
        """
        ...

    @property
    def SupportMultiDottedExtensions(self) -> bool:
        """
        Get: SupportMultiDottedExtensions(self: FileDialog) -> bool
        Set: SupportMultiDottedExtensions(self: FileDialog) = value
        """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: FileDialog) -> str
        Set: Title(self: FileDialog) = value
        """
        ...

    @property
    def ValidateNames(self) -> bool:
        """
        Get: ValidateNames(self: FileDialog) -> bool
        Set: ValidateNames(self: FileDialog) = value
        """
        ...


    def OnFileOk(self, *args): #cannot find CLR method
        """ OnFileOk(self: FileDialog, e: CancelEventArgs) """
        ...

    def ToString(self) -> str:
        """ ToString(self: FileDialog) -> str """
        ...

    EventFileOk: object = ...
    FileOk = ...


class FileDialogCustomPlace: # skipped bases: <type 'object'>, <type 'object'>
    """
    FileDialogCustomPlace(path: str)
    FileDialogCustomPlace(knownFolderGuid: Guid)
    """
    @property
    def KnownFolderGuid(self) -> Guid:
        """
        Get: KnownFolderGuid(self: FileDialogCustomPlace) -> Guid
        Set: KnownFolderGuid(self: FileDialogCustomPlace) = value
        """
        ...

    @property
    def Path(self) -> str:
        """
        Get: Path(self: FileDialogCustomPlace) -> str
        Set: Path(self: FileDialogCustomPlace) = value
        """
        ...


    def ToString(self) -> str:
        """ ToString(self: FileDialogCustomPlace) -> str """
        ...


class FileDialogCustomPlacesCollection(Collection): # skipped bases: <type 'IEnumerable[FileDialogCustomPlace]'>, <type 'IReadOnlyCollection[FileDialogCustomPlace]'>, <type 'IEnumerable'>, <type 'IList'>, <type 'ICollection[FileDialogCustomPlace]'>, <type 'IReadOnlyList[FileDialogCustomPlace]'>, <type 'IList[FileDialogCustomPlace]'>, <type 'ICollection'>, <type 'object'>
    """ FileDialogCustomPlacesCollection() """
    pass

class FixedPanel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FixedPanel, values: None (0), Panel1 (1), Panel2 (2) """
    Panel1: FixedPanel = ...
    Panel2: FixedPanel = ...
    value__ = ...


class FlatButtonAppearance: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def BorderColor(self) -> Color:
        """
        Get: BorderColor(self: FlatButtonAppearance) -> Color
        Set: BorderColor(self: FlatButtonAppearance) = value
        """
        ...

    @property
    def BorderSize(self) -> int:
        """
        Get: BorderSize(self: FlatButtonAppearance) -> int
        Set: BorderSize(self: FlatButtonAppearance) = value
        """
        ...

    @property
    def CheckedBackColor(self) -> Color:
        """
        Get: CheckedBackColor(self: FlatButtonAppearance) -> Color
        Set: CheckedBackColor(self: FlatButtonAppearance) = value
        """
        ...

    @property
    def MouseDownBackColor(self) -> Color:
        """
        Get: MouseDownBackColor(self: FlatButtonAppearance) -> Color
        Set: MouseDownBackColor(self: FlatButtonAppearance) = value
        """
        ...

    @property
    def MouseOverBackColor(self) -> Color:
        """
        Get: MouseOverBackColor(self: FlatButtonAppearance) -> Color
        Set: MouseOverBackColor(self: FlatButtonAppearance) = value
        """
        ...



class FlatStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FlatStyle, values: Flat (0), Popup (1), Standard (2), System (3) """
    Flat: FlatStyle = ...
    Popup: FlatStyle = ...
    Standard: FlatStyle = ...
    System: FlatStyle = ...
    value__ = ...


class FlowDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FlowDirection, values: BottomUp (3), LeftToRight (0), RightToLeft (2), TopDown (1) """
    BottomUp: FlowDirection = ...
    LeftToRight: FlowDirection = ...
    RightToLeft: FlowDirection = ...
    TopDown: FlowDirection = ...
    value__ = ...


class Panel(ScrollableControl): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'object'>
    """ Panel() """
    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: Panel) -> bool
        Set: AutoSize(self: Panel) = value
        """
        ...

    @property
    def AutoSizeMode(self) -> AutoSizeMode:
        """
        Get: AutoSizeMode(self: Panel) -> AutoSizeMode
        Set: AutoSizeMode(self: Panel) = value
        """
        ...

    @property
    def BorderStyle(self) -> BorderStyle:
        """
        Get: BorderStyle(self: Panel) -> BorderStyle
        Set: BorderStyle(self: Panel) = value
        """
        ...

    @property
    def TabStop(self) -> bool:
        """
        Get: TabStop(self: Panel) -> bool
        Set: TabStop(self: Panel) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Panel) -> str
        Set: Text(self: Panel) = value
        """
        ...


    def ToString(self) -> str:
        """ ToString(self: Panel) -> str """
        ...

    AutoSizeChanged = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    TextChanged = ...


class FlowLayoutPanel(IExtenderProvider, Panel): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ FlowLayoutPanel() """
    @property
    def FlowDirection(self) -> FlowDirection:
        """
        Get: FlowDirection(self: FlowLayoutPanel) -> FlowDirection
        Set: FlowDirection(self: FlowLayoutPanel) = value
        """
        ...

    @property
    def LayoutEngine(self) -> LayoutEngine:
        """ Get: LayoutEngine(self: FlowLayoutPanel) -> LayoutEngine """
        ...

    @property
    def WrapContents(self) -> bool:
        """
        Get: WrapContents(self: FlowLayoutPanel) -> bool
        Set: WrapContents(self: FlowLayoutPanel) = value
        """
        ...


    def GetFlowBreak(self, control:Control) -> bool:
        """ GetFlowBreak(self: FlowLayoutPanel, control: Control) -> bool """
        ...

    def SetFlowBreak(self, control:Control, value:bool): # -> 
        """ SetFlowBreak(self: FlowLayoutPanel, control: Control, value: bool) """
        ...


class LayoutSettings: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def LayoutEngine(self) -> LayoutEngine:
        """ Get: LayoutEngine(self: LayoutSettings) -> LayoutEngine """
        ...



class FlowLayoutSettings(LayoutSettings): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def FlowDirection(self) -> FlowDirection:
        """
        Get: FlowDirection(self: FlowLayoutSettings) -> FlowDirection
        Set: FlowDirection(self: FlowLayoutSettings) = value
        """
        ...

    @property
    def WrapContents(self) -> bool:
        """
        Get: WrapContents(self: FlowLayoutSettings) -> bool
        Set: WrapContents(self: FlowLayoutSettings) = value
        """
        ...


    def GetFlowBreak(self, child:object) -> bool:
        """ GetFlowBreak(self: FlowLayoutSettings, child: object) -> bool """
        ...

    def SetFlowBreak(self, child:object, value:bool): # -> 
        """ SetFlowBreak(self: FlowLayoutSettings, child: object, value: bool) """
        ...


class FolderBrowserDialog(CommonDialog): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """ FolderBrowserDialog() """
    @property
    def Description(self) -> str:
        """
        Get: Description(self: FolderBrowserDialog) -> str
        Set: Description(self: FolderBrowserDialog) = value
        """
        ...

    @property
    def RootFolder(self): # -> SpecialFolder
        """
        Get: RootFolder(self: FolderBrowserDialog) -> SpecialFolder
        Set: RootFolder(self: FolderBrowserDialog) = value
        """
        ...

    @property
    def SelectedPath(self) -> str:
        """
        Get: SelectedPath(self: FolderBrowserDialog) -> str
        Set: SelectedPath(self: FolderBrowserDialog) = value
        """
        ...

    @property
    def ShowNewFolderButton(self) -> bool:
        """
        Get: ShowNewFolderButton(self: FolderBrowserDialog) -> bool
        Set: ShowNewFolderButton(self: FolderBrowserDialog) = value
        """
        ...


    HelpRequest = ...


class FontDialog(CommonDialog): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """ FontDialog() """
    @property
    def AllowScriptChange(self) -> bool:
        """
        Get: AllowScriptChange(self: FontDialog) -> bool
        Set: AllowScriptChange(self: FontDialog) = value
        """
        ...

    @property
    def AllowSimulations(self) -> bool:
        """
        Get: AllowSimulations(self: FontDialog) -> bool
        Set: AllowSimulations(self: FontDialog) = value
        """
        ...

    @property
    def AllowVectorFonts(self) -> bool:
        """
        Get: AllowVectorFonts(self: FontDialog) -> bool
        Set: AllowVectorFonts(self: FontDialog) = value
        """
        ...

    @property
    def AllowVerticalFonts(self) -> bool:
        """
        Get: AllowVerticalFonts(self: FontDialog) -> bool
        Set: AllowVerticalFonts(self: FontDialog) = value
        """
        ...

    @property
    def Color(self) -> Color:
        """
        Get: Color(self: FontDialog) -> Color
        Set: Color(self: FontDialog) = value
        """
        ...

    @property
    def FixedPitchOnly(self) -> bool:
        """
        Get: FixedPitchOnly(self: FontDialog) -> bool
        Set: FixedPitchOnly(self: FontDialog) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: FontDialog) -> Font
        Set: Font(self: FontDialog) = value
        """
        ...

    @property
    def FontMustExist(self) -> bool:
        """
        Get: FontMustExist(self: FontDialog) -> bool
        Set: FontMustExist(self: FontDialog) = value
        """
        ...

    @property
    def MaxSize(self) -> int:
        """
        Get: MaxSize(self: FontDialog) -> int
        Set: MaxSize(self: FontDialog) = value
        """
        ...

    @property
    def MinSize(self) -> int:
        """
        Get: MinSize(self: FontDialog) -> int
        Set: MinSize(self: FontDialog) = value
        """
        ...

    @property
    def Options(self):
        ...

    @property
    def ScriptsOnly(self) -> bool:
        """
        Get: ScriptsOnly(self: FontDialog) -> bool
        Set: ScriptsOnly(self: FontDialog) = value
        """
        ...

    @property
    def ShowApply(self) -> bool:
        """
        Get: ShowApply(self: FontDialog) -> bool
        Set: ShowApply(self: FontDialog) = value
        """
        ...

    @property
    def ShowColor(self) -> bool:
        """
        Get: ShowColor(self: FontDialog) -> bool
        Set: ShowColor(self: FontDialog) = value
        """
        ...

    @property
    def ShowEffects(self) -> bool:
        """
        Get: ShowEffects(self: FontDialog) -> bool
        Set: ShowEffects(self: FontDialog) = value
        """
        ...

    @property
    def ShowHelp(self) -> bool:
        """
        Get: ShowHelp(self: FontDialog) -> bool
        Set: ShowHelp(self: FontDialog) = value
        """
        ...


    def OnApply(self, *args): #cannot find CLR method
        """ OnApply(self: FontDialog, e: EventArgs) """
        ...

    def ToString(self) -> str:
        """ ToString(self: FontDialog) -> str """
        ...

    Apply = ...
    EventApply: object = ...


class Form(ContainerControl): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'IContainerControl'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ Form() """
    @property
    def AcceptButton(self) -> IButtonControl:
        """
        Get: AcceptButton(self: Form) -> IButtonControl
        Set: AcceptButton(self: Form) = value
        """
        ...

    @property
    def ActiveForm(self) -> Form:
        """ Get: ActiveForm() -> Form """
        ...

    @property
    def ActiveMdiChild(self) -> Form:
        """ Get: ActiveMdiChild(self: Form) -> Form """
        ...

    @property
    def AllowTransparency(self) -> bool:
        """
        Get: AllowTransparency(self: Form) -> bool
        Set: AllowTransparency(self: Form) = value
        """
        ...

    @property
    def AutoScale(self) -> bool:
        """
        Get: AutoScale(self: Form) -> bool
        Set: AutoScale(self: Form) = value
        """
        ...

    @property
    def AutoScaleBaseSize(self) -> Size:
        """
        Get: AutoScaleBaseSize(self: Form) -> Size
        Set: AutoScaleBaseSize(self: Form) = value
        """
        ...

    @property
    def AutoScroll(self) -> bool:
        """
        Get: AutoScroll(self: Form) -> bool
        Set: AutoScroll(self: Form) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: Form) -> bool
        Set: AutoSize(self: Form) = value
        """
        ...

    @property
    def AutoSizeMode(self) -> AutoSizeMode:
        """
        Get: AutoSizeMode(self: Form) -> AutoSizeMode
        Set: AutoSizeMode(self: Form) = value
        """
        ...

    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: Form) -> Color
        Set: BackColor(self: Form) = value
        """
        ...

    @property
    def CancelButton(self) -> IButtonControl:
        """
        Get: CancelButton(self: Form) -> IButtonControl
        Set: CancelButton(self: Form) = value
        """
        ...

    @property
    def ClientSize(self) -> Size:
        """
        Get: ClientSize(self: Form) -> Size
        Set: ClientSize(self: Form) = value
        """
        ...

    @property
    def ControlBox(self) -> bool:
        """
        Get: ControlBox(self: Form) -> bool
        Set: ControlBox(self: Form) = value
        """
        ...

    @property
    def DesktopBounds(self) -> Rectangle:
        """
        Get: DesktopBounds(self: Form) -> Rectangle
        Set: DesktopBounds(self: Form) = value
        """
        ...

    @property
    def DesktopLocation(self) -> Point:
        """
        Get: DesktopLocation(self: Form) -> Point
        Set: DesktopLocation(self: Form) = value
        """
        ...

    @property
    def DialogResult(self) -> DialogResult:
        """
        Get: DialogResult(self: Form) -> DialogResult
        Set: DialogResult(self: Form) = value
        """
        ...

    @property
    def FormBorderStyle(self): # -> FormBorderStyle
        """
        Get: FormBorderStyle(self: Form) -> FormBorderStyle
        Set: FormBorderStyle(self: Form) = value
        """
        ...

    @property
    def HelpButton(self) -> bool:
        """
        Get: HelpButton(self: Form) -> bool
        Set: HelpButton(self: Form) = value
        """
        ...

    @property
    def Icon(self) -> Icon:
        """
        Get: Icon(self: Form) -> Icon
        Set: Icon(self: Form) = value
        """
        ...

    @property
    def IsMdiChild(self) -> bool:
        """ Get: IsMdiChild(self: Form) -> bool """
        ...

    @property
    def IsMdiContainer(self) -> bool:
        """
        Get: IsMdiContainer(self: Form) -> bool
        Set: IsMdiContainer(self: Form) = value
        """
        ...

    @property
    def IsRestrictedWindow(self) -> bool:
        """ Get: IsRestrictedWindow(self: Form) -> bool """
        ...

    @property
    def KeyPreview(self) -> bool:
        """
        Get: KeyPreview(self: Form) -> bool
        Set: KeyPreview(self: Form) = value
        """
        ...

    @property
    def Location(self) -> Point:
        """
        Get: Location(self: Form) -> Point
        Set: Location(self: Form) = value
        """
        ...

    @property
    def MainMenuStrip(self): # -> MenuStrip
        """
        Get: MainMenuStrip(self: Form) -> MenuStrip
        Set: MainMenuStrip(self: Form) = value
        """
        ...

    @property
    def Margin(self): # -> Padding
        """
        Get: Margin(self: Form) -> Padding
        Set: Margin(self: Form) = value
        """
        ...

    @property
    def MaximizeBox(self) -> bool:
        """
        Get: MaximizeBox(self: Form) -> bool
        Set: MaximizeBox(self: Form) = value
        """
        ...

    @property
    def MaximizedBounds(self):
        ...

    @property
    def MaximumSize(self) -> Size:
        """
        Get: MaximumSize(self: Form) -> Size
        Set: MaximumSize(self: Form) = value
        """
        ...

    @property
    def MdiChildren(self) -> Array:
        """ Get: MdiChildren(self: Form) -> Array[Form] """
        ...

    @property
    def MdiParent(self) -> Form:
        """
        Get: MdiParent(self: Form) -> Form
        Set: MdiParent(self: Form) = value
        """
        ...

    @property
    def Menu(self): # -> MainMenu
        """
        Get: Menu(self: Form) -> MainMenu
        Set: Menu(self: Form) = value
        """
        ...

    @property
    def MergedMenu(self): # -> MainMenu
        """ Get: MergedMenu(self: Form) -> MainMenu """
        ...

    @property
    def MinimizeBox(self) -> bool:
        """
        Get: MinimizeBox(self: Form) -> bool
        Set: MinimizeBox(self: Form) = value
        """
        ...

    @property
    def MinimumSize(self) -> Size:
        """
        Get: MinimumSize(self: Form) -> Size
        Set: MinimumSize(self: Form) = value
        """
        ...

    @property
    def Modal(self) -> bool:
        """ Get: Modal(self: Form) -> bool """
        ...

    @property
    def Opacity(self) -> float:
        """
        Get: Opacity(self: Form) -> float
        Set: Opacity(self: Form) = value
        """
        ...

    @property
    def OwnedForms(self) -> Array:
        """ Get: OwnedForms(self: Form) -> Array[Form] """
        ...

    @property
    def Owner(self) -> Form:
        """
        Get: Owner(self: Form) -> Form
        Set: Owner(self: Form) = value
        """
        ...

    @property
    def RestoreBounds(self) -> Rectangle:
        """ Get: RestoreBounds(self: Form) -> Rectangle """
        ...

    @property
    def RightToLeftLayout(self) -> bool:
        """
        Get: RightToLeftLayout(self: Form) -> bool
        Set: RightToLeftLayout(self: Form) = value
        """
        ...

    @property
    def ShowIcon(self) -> bool:
        """
        Get: ShowIcon(self: Form) -> bool
        Set: ShowIcon(self: Form) = value
        """
        ...

    @property
    def ShowInTaskbar(self) -> bool:
        """
        Get: ShowInTaskbar(self: Form) -> bool
        Set: ShowInTaskbar(self: Form) = value
        """
        ...

    @property
    def ShowWithoutActivation(self):
        ...

    @property
    def Size(self) -> Size:
        """
        Get: Size(self: Form) -> Size
        Set: Size(self: Form) = value
        """
        ...

    @property
    def SizeGripStyle(self): # -> SizeGripStyle
        """
        Get: SizeGripStyle(self: Form) -> SizeGripStyle
        Set: SizeGripStyle(self: Form) = value
        """
        ...

    @property
    def StartPosition(self): # -> FormStartPosition
        """
        Get: StartPosition(self: Form) -> FormStartPosition
        Set: StartPosition(self: Form) = value
        """
        ...

    @property
    def TabIndex(self) -> int:
        """
        Get: TabIndex(self: Form) -> int
        Set: TabIndex(self: Form) = value
        """
        ...

    @property
    def TabStop(self) -> bool:
        """
        Get: TabStop(self: Form) -> bool
        Set: TabStop(self: Form) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Form) -> str
        Set: Text(self: Form) = value
        """
        ...

    @property
    def TopLevel(self) -> bool:
        """
        Get: TopLevel(self: Form) -> bool
        Set: TopLevel(self: Form) = value
        """
        ...

    @property
    def TopMost(self) -> bool:
        """
        Get: TopMost(self: Form) -> bool
        Set: TopMost(self: Form) = value
        """
        ...

    @property
    def TransparencyKey(self) -> Color:
        """
        Get: TransparencyKey(self: Form) -> Color
        Set: TransparencyKey(self: Form) = value
        """
        ...

    @property
    def WindowState(self): # -> FormWindowState
        """
        Get: WindowState(self: Form) -> FormWindowState
        Set: WindowState(self: Form) = value
        """
        ...


    def Activate(self): # -> 
        """ Activate(self: Form) """
        ...

    def ActivateMdiChild(self, *args): #cannot find CLR method
        """ ActivateMdiChild(self: Form, form: Form) """
        ...

    def AddOwnedForm(self, ownedForm:Form): # -> 
        """ AddOwnedForm(self: Form, ownedForm: Form) """
        ...

    def ApplyAutoScaling(self, *args): #cannot find CLR method
        """ ApplyAutoScaling(self: Form) """
        ...

    def CenterToParent(self, *args): #cannot find CLR method
        """ CenterToParent(self: Form) """
        ...

    def CenterToScreen(self, *args): #cannot find CLR method
        """ CenterToScreen(self: Form) """
        ...

    def Close(self): # -> 
        """ Close(self: Form) """
        ...

    def ControlCollection(self, *args): #cannot find CLR method
        """ ControlCollection(owner: Form) """
        ...

    @staticmethod
    def GetAutoScaleSize(font:Font) -> SizeF:
        """ GetAutoScaleSize(font: Font) -> SizeF """
        ...

    def LayoutMdi(self, value): # ->  # Not found arg types: {'value': 'MdiLayout'}
        """ LayoutMdi(self: Form, value: MdiLayout) """
        ...

    def OnActivated(self, *args): #cannot find CLR method
        """ OnActivated(self: Form, e: EventArgs) """
        ...

    def OnClosed(self, *args): #cannot find CLR method
        """ OnClosed(self: Form, e: EventArgs) """
        ...

    def OnClosing(self, *args): #cannot find CLR method
        """ OnClosing(self: Form, e: CancelEventArgs) """
        ...

    def OnDeactivate(self, *args): #cannot find CLR method
        """ OnDeactivate(self: Form, e: EventArgs) """
        ...

    def OnDpiChanged(self, *args): #cannot find CLR method
        """ OnDpiChanged(self: Form, e: DpiChangedEventArgs) """
        ...

    def OnFormClosed(self, *args): #cannot find CLR method
        """ OnFormClosed(self: Form, e: FormClosedEventArgs) """
        ...

    def OnFormClosing(self, *args): #cannot find CLR method
        """ OnFormClosing(self: Form, e: FormClosingEventArgs) """
        ...

    def OnGetDpiScaledSize(self, *args): #cannot find CLR method
        """ OnGetDpiScaledSize(self: Form, deviceDpiOld: int, deviceDpiNew: int, desiredSize: Size) -> (bool, Size) """
        ...

    def OnHelpButtonClicked(self, *args): #cannot find CLR method
        """ OnHelpButtonClicked(self: Form, e: CancelEventArgs) """
        ...

    def OnInputLanguageChanged(self, *args): #cannot find CLR method
        """ OnInputLanguageChanged(self: Form, e: InputLanguageChangedEventArgs) """
        ...

    def OnInputLanguageChanging(self, *args): #cannot find CLR method
        """ OnInputLanguageChanging(self: Form, e: InputLanguageChangingEventArgs) """
        ...

    def OnLoad(self, *args): #cannot find CLR method
        """ OnLoad(self: Form, e: EventArgs) """
        ...

    def OnMaximizedBoundsChanged(self, *args): #cannot find CLR method
        """ OnMaximizedBoundsChanged(self: Form, e: EventArgs) """
        ...

    def OnMaximumSizeChanged(self, *args): #cannot find CLR method
        """ OnMaximumSizeChanged(self: Form, e: EventArgs) """
        ...

    def OnMdiChildActivate(self, *args): #cannot find CLR method
        """ OnMdiChildActivate(self: Form, e: EventArgs) """
        ...

    def OnMenuComplete(self, *args): #cannot find CLR method
        """ OnMenuComplete(self: Form, e: EventArgs) """
        ...

    def OnMenuStart(self, *args): #cannot find CLR method
        """ OnMenuStart(self: Form, e: EventArgs) """
        ...

    def OnMinimumSizeChanged(self, *args): #cannot find CLR method
        """ OnMinimumSizeChanged(self: Form, e: EventArgs) """
        ...

    def OnResizeBegin(self, *args): #cannot find CLR method
        """ OnResizeBegin(self: Form, e: EventArgs) """
        ...

    def OnResizeEnd(self, *args): #cannot find CLR method
        """ OnResizeEnd(self: Form, e: EventArgs) """
        ...

    def OnRightToLeftLayoutChanged(self, *args): #cannot find CLR method
        """ OnRightToLeftLayoutChanged(self: Form, e: EventArgs) """
        ...

    def OnShown(self, *args): #cannot find CLR method
        """ OnShown(self: Form, e: EventArgs) """
        ...

    def RemoveOwnedForm(self, ownedForm:Form): # -> 
        """ RemoveOwnedForm(self: Form, ownedForm: Form) """
        ...

    def SetDesktopBounds(self, x:int, y:int, width:int, height:int): # -> 
        """ SetDesktopBounds(self: Form, x: int, y: int, width: int, height: int) """
        ...

    def SetDesktopLocation(self, x:int, y:int): # -> 
        """ SetDesktopLocation(self: Form, x: int, y: int) """
        ...

    def Show(self, owner:IWin32Window = ...): # -> 
        """ Show(self: Form, owner: IWin32Window) """
        ...

    def ShowDialog(self, owner:IWin32Window = ...) -> DialogResult:
        """
        ShowDialog(self: Form) -> DialogResult
        ShowDialog(self: Form, owner: IWin32Window) -> DialogResult
        """
        ...

    def ToString(self) -> str:
        """ ToString(self: Form) -> str """
        ...

    Activated = ...
    AutoSizeChanged = ...
    AutoValidateChanged = ...
    Closed = ...
    Closing = ...
    Deactivate = ...
    DpiChanged = ...
    FormClosed = ...
    FormClosing = ...
    HelpButtonClicked = ...
    InputLanguageChanged = ...
    InputLanguageChanging = ...
    Load = ...
    MarginChanged = ...
    MaximizedBoundsChanged = ...
    MaximumSizeChanged = ...
    MdiChildActivate = ...
    MenuComplete = ...
    MenuStart = ...
    MinimumSizeChanged = ...
    ResizeBegin = ...
    ResizeEnd = ...
    RightToLeftLayoutChanged = ...
    Shown = ...
    TabIndexChanged = ...
    TabStopChanged = ...


class FormBorderStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FormBorderStyle, values: Fixed3D (2), FixedDialog (3), FixedSingle (1), FixedToolWindow (5), None (0), Sizable (4), SizableToolWindow (6) """
    Fixed3D: FormBorderStyle = ...
    FixedDialog: FormBorderStyle = ...
    FixedSingle: FormBorderStyle = ...
    FixedToolWindow: FormBorderStyle = ...
    Sizable: FormBorderStyle = ...
    SizableToolWindow: FormBorderStyle = ...
    value__ = ...


class FormClosedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ FormClosedEventArgs(closeReason: CloseReason) """
    @property
    def CloseReason(self) -> CloseReason:
        """ Get: CloseReason(self: FormClosedEventArgs) -> CloseReason """
        ...


    def __new__(cls, closeReason:CloseReason) -> Self:
        """ __new__(cls: type, closeReason: CloseReason) """
        ...


class FormClosedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ FormClosedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:FormClosedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: FormClosedEventHandler, sender: object, e: FormClosedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: FormClosedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:FormClosedEventArgs): # -> 
        """ Invoke(self: FormClosedEventHandler, sender: object, e: FormClosedEventArgs) """
        ...


class FormClosingEventArgs(CancelEventArgs): # skipped bases: <type 'object'>
    """ FormClosingEventArgs(closeReason: CloseReason, cancel: bool) """
    @property
    def CloseReason(self) -> CloseReason:
        """ Get: CloseReason(self: FormClosingEventArgs) -> CloseReason """
        ...



class FormClosingEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ FormClosingEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:FormClosingEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: FormClosingEventHandler, sender: object, e: FormClosingEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: FormClosingEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:FormClosingEventArgs): # -> 
        """ Invoke(self: FormClosingEventHandler, sender: object, e: FormClosingEventArgs) """
        ...


class FormCollection(ReadOnlyCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ FormCollection() """
    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...


class FormStartPosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FormStartPosition, values: CenterParent (4), CenterScreen (1), Manual (0), WindowsDefaultBounds (3), WindowsDefaultLocation (2) """
    CenterParent: FormStartPosition = ...
    CenterScreen: FormStartPosition = ...
    Manual: FormStartPosition = ...
    value__ = ...
    WindowsDefaultBounds: FormStartPosition = ...
    WindowsDefaultLocation: FormStartPosition = ...


class FormWindowState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FormWindowState, values: Maximized (2), Minimized (1), Normal (0) """
    Maximized: FormWindowState = ...
    Minimized: FormWindowState = ...
    Normal: FormWindowState = ...
    value__ = ...


class FrameStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FrameStyle, values: Dashed (0), Thick (1) """
    Dashed: FrameStyle = ...
    Thick: FrameStyle = ...
    value__ = ...


class GetChildAtPointSkip(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) GetChildAtPointSkip, values: Disabled (2), Invisible (1), None (0), Transparent (4) """
    Disabled: GetChildAtPointSkip = ...
    Invisible: GetChildAtPointSkip = ...
    Transparent: GetChildAtPointSkip = ...
    value__ = ...


class GiveFeedbackEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ GiveFeedbackEventArgs(effect: DragDropEffects, useDefaultCursors: bool) """
    @property
    def Effect(self) -> DragDropEffects:
        """ Get: Effect(self: GiveFeedbackEventArgs) -> DragDropEffects """
        ...

    @property
    def UseDefaultCursors(self) -> bool:
        """
        Get: UseDefaultCursors(self: GiveFeedbackEventArgs) -> bool
        Set: UseDefaultCursors(self: GiveFeedbackEventArgs) = value
        """
        ...


    def __new__(cls, effect:DragDropEffects, useDefaultCursors:bool) -> Self:
        """ __new__(cls: type, effect: DragDropEffects, useDefaultCursors: bool) """
        ...


class GiveFeedbackEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ GiveFeedbackEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:GiveFeedbackEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: GiveFeedbackEventHandler, sender: object, e: GiveFeedbackEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: GiveFeedbackEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:GiveFeedbackEventArgs): # -> 
        """ Invoke(self: GiveFeedbackEventHandler, sender: object, e: GiveFeedbackEventArgs) """
        ...


class GridColumnStylesCollection(BaseCollection, IList): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def AddRange(self, columns:Array): # -> 
        """ AddRange(self: GridColumnStylesCollection, columns: Array[DataGridColumnStyle]) """
        ...

    def OnCollectionChanged(self, *args): #cannot find CLR method
        """ OnCollectionChanged(self: GridColumnStylesCollection, e: CollectionChangeEventArgs) """
        ...

    def ResetPropertyDescriptors(self): # -> 
        """ ResetPropertyDescriptors(self: GridColumnStylesCollection) """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ Contains(self: IList, value: object) -> bool """
        ...

    CollectionChanged = ...


class GridItem: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Expandable(self) -> bool:
        """ Get: Expandable(self: GridItem) -> bool """
        ...

    @property
    def Expanded(self) -> bool:
        """
        Get: Expanded(self: GridItem) -> bool
        Set: Expanded(self: GridItem) = value
        """
        ...

    @property
    def GridItems(self): # -> GridItemCollection
        """ Get: GridItems(self: GridItem) -> GridItemCollection """
        ...

    @property
    def GridItemType(self): # -> GridItemType
        """ Get: GridItemType(self: GridItem) -> GridItemType """
        ...

    @property
    def Label(self) -> str:
        """ Get: Label(self: GridItem) -> str """
        ...

    @property
    def Parent(self) -> GridItem:
        """ Get: Parent(self: GridItem) -> GridItem """
        ...

    @property
    def PropertyDescriptor(self) -> PropertyDescriptor:
        """ Get: PropertyDescriptor(self: GridItem) -> PropertyDescriptor """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: GridItem) -> object
        Set: Tag(self: GridItem) = value
        """
        ...

    @property
    def Value(self) -> object:
        """ Get: Value(self: GridItem) -> object """
        ...


    def Select(self) -> bool:
        """ Select(self: GridItem) -> bool """
        ...


class GridItemCollection(ICollection): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: GridItemCollection) -> IEnumerator """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        ...

    Empty: GridItemCollection = ...


class GridItemType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum GridItemType, values: ArrayValue (2), Category (1), Property (0), Root (3) """
    ArrayValue: GridItemType = ...
    Category: GridItemType = ...
    Property: GridItemType = ...
    Root: GridItemType = ...
    value__ = ...


class GridTablesFactory: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @staticmethod
    def CreateGridTables(gridTable:DataGridTableStyle, dataSource:object, dataMember:str, bindingManager:BindingContext) -> Array:
        """ CreateGridTables(gridTable: DataGridTableStyle, dataSource: object, dataMember: str, bindingManager: BindingContext) -> Array[DataGridTableStyle] """
        ...


class GridTableStylesCollection(BaseCollection, IList): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def AddRange(self, tables:Array): # -> 
        """ AddRange(self: GridTableStylesCollection, tables: Array[DataGridTableStyle]) """
        ...

    def OnCollectionChanged(self, *args): #cannot find CLR method
        """ OnCollectionChanged(self: GridTableStylesCollection, e: CollectionChangeEventArgs) """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ Contains(self: IList, value: object) -> bool """
        ...

    CollectionChanged = ...


class GroupBox(Control): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ GroupBox() """
    @property
    def AutoSizeMode(self) -> AutoSizeMode:
        """
        Get: AutoSizeMode(self: GroupBox) -> AutoSizeMode
        Set: AutoSizeMode(self: GroupBox) = value
        """
        ...

    @property
    def FlatStyle(self) -> FlatStyle:
        """
        Get: FlatStyle(self: GroupBox) -> FlatStyle
        Set: FlatStyle(self: GroupBox) = value
        """
        ...

    @property
    def UseCompatibleTextRendering(self) -> bool:
        """
        Get: UseCompatibleTextRendering(self: GroupBox) -> bool
        Set: UseCompatibleTextRendering(self: GroupBox) = value
        """
        ...


    def ToString(self) -> str:
        """ ToString(self: GroupBox) -> str """
        ...

    AutoSizeChanged = ...
    Click = ...
    DoubleClick = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    TabStopChanged = ...


class GroupBoxRenderer: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def RenderMatchingApplicationState(self) -> bool:
        """
        Get: RenderMatchingApplicationState() -> bool
        Set: RenderMatchingApplicationState() = value
        """
        ...


    @staticmethod
    def DrawGroupBox(g:Graphics, bounds:Rectangle, *__args:GroupBoxState): # -> 
        """ DrawGroupBox(g: Graphics, bounds: Rectangle, state: GroupBoxState)DrawGroupBox(g: Graphics, bounds: Rectangle, groupBoxText: str, font: Font, state: GroupBoxState)DrawGroupBox(g: Graphics, bounds: Rectangle, groupBoxText: str, font: Font, textColor: Color, state: GroupBoxState)DrawGroupBox(g: Graphics, bounds: Rectangle, groupBoxText: str, font: Font, flags: TextFormatFlags, state: GroupBoxState)DrawGroupBox(g: Graphics, bounds: Rectangle, groupBoxText: str, font: Font, textColor: Color, flags: TextFormatFlags, state: GroupBoxState) """
        ...

    @staticmethod
    def DrawParentBackground(g:Graphics, bounds:Rectangle, childControl:Control): # -> 
        """ DrawParentBackground(g: Graphics, bounds: Rectangle, childControl: Control) """
        ...

    @staticmethod
    def IsBackgroundPartiallyTransparent(state:GroupBoxState) -> bool:
        """ IsBackgroundPartiallyTransparent(state: GroupBoxState) -> bool """
        ...



class Help: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @staticmethod
    def ShowHelp(parent:Control, url:str, *__args): # ->  # Not found arg types: {'*__args': 'HelpNavigator'}
        """ ShowHelp(parent: Control, url: str)ShowHelp(parent: Control, url: str, navigator: HelpNavigator)ShowHelp(parent: Control, url: str, keyword: str)ShowHelp(parent: Control, url: str, command: HelpNavigator, parameter: object) """
        ...

    @staticmethod
    def ShowHelpIndex(parent:Control, url:str): # -> 
        """ ShowHelpIndex(parent: Control, url: str) """
        ...

    @staticmethod
    def ShowPopup(parent:Control, caption:str, location:Point): # -> 
        """ ShowPopup(parent: Control, caption: str, location: Point) """
        ...


class HelpEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ HelpEventArgs(mousePos: Point) """
    @property
    def Handled(self) -> bool:
        """
        Get: Handled(self: HelpEventArgs) -> bool
        Set: Handled(self: HelpEventArgs) = value
        """
        ...

    @property
    def MousePos(self) -> Point:
        """ Get: MousePos(self: HelpEventArgs) -> Point """
        ...


    def __new__(cls, mousePos:Point) -> Self:
        """ __new__(cls: type, mousePos: Point) """
        ...


class HelpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ HelpEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, hlpevent:HelpEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: HelpEventHandler, sender: object, hlpevent: HelpEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: HelpEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, hlpevent:HelpEventArgs): # -> 
        """ Invoke(self: HelpEventHandler, sender: object, hlpevent: HelpEventArgs) """
        ...


class HelpNavigator(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum HelpNavigator, values: AssociateIndex (-2147483643), Find (-2147483644), Index (-2147483645), KeywordIndex (-2147483642), TableOfContents (-2147483646), Topic (-2147483647), TopicId (-2147483641) """
    AssociateIndex: HelpNavigator = ...
    Find: HelpNavigator = ...
    Index: HelpNavigator = ...
    KeywordIndex: HelpNavigator = ...
    TableOfContents: HelpNavigator = ...
    Topic: HelpNavigator = ...
    TopicId: HelpNavigator = ...
    value__ = ...


class HelpProvider(IExtenderProvider, Component): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """ HelpProvider() """
    @property
    def HelpNamespace(self) -> str:
        """
        Get: HelpNamespace(self: HelpProvider) -> str
        Set: HelpNamespace(self: HelpProvider) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: HelpProvider) -> object
        Set: Tag(self: HelpProvider) = value
        """
        ...


    def GetHelpKeyword(self, ctl:Control) -> str:
        """ GetHelpKeyword(self: HelpProvider, ctl: Control) -> str """
        ...

    def GetHelpNavigator(self, ctl:Control) -> HelpNavigator:
        """ GetHelpNavigator(self: HelpProvider, ctl: Control) -> HelpNavigator """
        ...

    def GetHelpString(self, ctl:Control) -> str:
        """ GetHelpString(self: HelpProvider, ctl: Control) -> str """
        ...

    def GetShowHelp(self, ctl:Control) -> bool:
        """ GetShowHelp(self: HelpProvider, ctl: Control) -> bool """
        ...

    def ResetShowHelp(self, ctl:Control): # -> 
        """ ResetShowHelp(self: HelpProvider, ctl: Control) """
        ...

    def SetHelpKeyword(self, ctl:Control, keyword:str): # -> 
        """ SetHelpKeyword(self: HelpProvider, ctl: Control, keyword: str) """
        ...

    def SetHelpNavigator(self, ctl:Control, navigator:HelpNavigator): # -> 
        """ SetHelpNavigator(self: HelpProvider, ctl: Control, navigator: HelpNavigator) """
        ...

    def SetHelpString(self, ctl:Control, helpString:str): # -> 
        """ SetHelpString(self: HelpProvider, ctl: Control, helpString: str) """
        ...

    def SetShowHelp(self, ctl:Control, value:bool): # -> 
        """ SetShowHelp(self: HelpProvider, ctl: Control, value: bool) """
        ...


class HorizontalAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum HorizontalAlignment, values: Center (2), Left (0), Right (1) """
    Center: HorizontalAlignment = ...
    Left: HorizontalAlignment = ...
    Right: HorizontalAlignment = ...
    value__ = ...


class ScrollBar(Control): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ ScrollBar() """
    @property
    def LargeChange(self) -> int:
        """
        Get: LargeChange(self: ScrollBar) -> int
        Set: LargeChange(self: ScrollBar) = value
        """
        ...

    @property
    def Maximum(self) -> int:
        """
        Get: Maximum(self: ScrollBar) -> int
        Set: Maximum(self: ScrollBar) = value
        """
        ...

    @property
    def Minimum(self) -> int:
        """
        Get: Minimum(self: ScrollBar) -> int
        Set: Minimum(self: ScrollBar) = value
        """
        ...

    @property
    def ScaleScrollBarForDpiChange(self) -> bool:
        """
        Get: ScaleScrollBarForDpiChange(self: ScrollBar) -> bool
        Set: ScaleScrollBarForDpiChange(self: ScrollBar) = value
        """
        ...

    @property
    def SmallChange(self) -> int:
        """
        Get: SmallChange(self: ScrollBar) -> int
        Set: SmallChange(self: ScrollBar) = value
        """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: ScrollBar) -> int
        Set: Value(self: ScrollBar) = value
        """
        ...


    def OnScroll(self, *args): #cannot find CLR method
        """ OnScroll(self: ScrollBar, se: ScrollEventArgs) """
        ...

    def OnValueChanged(self, *args): #cannot find CLR method
        """ OnValueChanged(self: ScrollBar, e: EventArgs) """
        ...

    def ToString(self) -> str:
        """ ToString(self: ScrollBar) -> str """
        ...

    def UpdateScrollInfo(self, *args): #cannot find CLR method
        """ UpdateScrollInfo(self: ScrollBar) """
        ...

    AutoSizeChanged = ...
    BackColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    Click = ...
    DoubleClick = ...
    FontChanged = ...
    ForeColorChanged = ...
    ImeModeChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...
    Paint = ...
    Scroll = ...
    TextChanged = ...
    ValueChanged = ...


class HScrollBar(ScrollBar): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'object'>
    """ HScrollBar() """
    pass

class ScrollProperties: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ScrollProperties) -> bool
        Set: Enabled(self: ScrollProperties) = value
        """
        ...

    @property
    def LargeChange(self) -> int:
        """
        Get: LargeChange(self: ScrollProperties) -> int
        Set: LargeChange(self: ScrollProperties) = value
        """
        ...

    @property
    def Maximum(self) -> int:
        """
        Get: Maximum(self: ScrollProperties) -> int
        Set: Maximum(self: ScrollProperties) = value
        """
        ...

    @property
    def Minimum(self) -> int:
        """
        Get: Minimum(self: ScrollProperties) -> int
        Set: Minimum(self: ScrollProperties) = value
        """
        ...

    @property
    def ParentControl(self):
        ...

    @property
    def SmallChange(self) -> int:
        """
        Get: SmallChange(self: ScrollProperties) -> int
        Set: SmallChange(self: ScrollProperties) = value
        """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: ScrollProperties) -> int
        Set: Value(self: ScrollProperties) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ScrollProperties) -> bool
        Set: Visible(self: ScrollProperties) = value
        """
        ...



class HScrollProperties(ScrollProperties): # skipped bases: <type 'object'>
    """ HScrollProperties(container: ScrollableControl) """
    pass

class HtmlDocument: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def ActiveElement(self) -> HtmlElement:
        """ Get: ActiveElement(self: HtmlDocument) -> HtmlElement """
        ...

    @property
    def ActiveLinkColor(self) -> Color:
        """
        Get: ActiveLinkColor(self: HtmlDocument) -> Color
        Set: ActiveLinkColor(self: HtmlDocument) = value
        """
        ...

    @property
    def All(self): # -> HtmlElementCollection
        """ Get: All(self: HtmlDocument) -> HtmlElementCollection """
        ...

    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: HtmlDocument) -> Color
        Set: BackColor(self: HtmlDocument) = value
        """
        ...

    @property
    def Body(self) -> HtmlElement:
        """ Get: Body(self: HtmlDocument) -> HtmlElement """
        ...

    @property
    def Cookie(self) -> str:
        """
        Get: Cookie(self: HtmlDocument) -> str
        Set: Cookie(self: HtmlDocument) = value
        """
        ...

    @property
    def DefaultEncoding(self) -> str:
        """ Get: DefaultEncoding(self: HtmlDocument) -> str """
        ...

    @property
    def Domain(self) -> str:
        """
        Get: Domain(self: HtmlDocument) -> str
        Set: Domain(self: HtmlDocument) = value
        """
        ...

    @property
    def DomDocument(self) -> object:
        """ Get: DomDocument(self: HtmlDocument) -> object """
        ...

    @property
    def Encoding(self) -> str:
        """
        Get: Encoding(self: HtmlDocument) -> str
        Set: Encoding(self: HtmlDocument) = value
        """
        ...

    @property
    def Focused(self) -> bool:
        """ Get: Focused(self: HtmlDocument) -> bool """
        ...

    @property
    def ForeColor(self) -> Color:
        """
        Get: ForeColor(self: HtmlDocument) -> Color
        Set: ForeColor(self: HtmlDocument) = value
        """
        ...

    @property
    def Forms(self): # -> HtmlElementCollection
        """ Get: Forms(self: HtmlDocument) -> HtmlElementCollection """
        ...

    @property
    def Images(self): # -> HtmlElementCollection
        """ Get: Images(self: HtmlDocument) -> HtmlElementCollection """
        ...

    @property
    def LinkColor(self) -> Color:
        """
        Get: LinkColor(self: HtmlDocument) -> Color
        Set: LinkColor(self: HtmlDocument) = value
        """
        ...

    @property
    def Links(self): # -> HtmlElementCollection
        """ Get: Links(self: HtmlDocument) -> HtmlElementCollection """
        ...

    @property
    def RightToLeft(self) -> bool:
        """
        Get: RightToLeft(self: HtmlDocument) -> bool
        Set: RightToLeft(self: HtmlDocument) = value
        """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: HtmlDocument) -> str
        Set: Title(self: HtmlDocument) = value
        """
        ...

    @property
    def Url(self) -> Uri:
        """ Get: Url(self: HtmlDocument) -> Uri """
        ...

    @property
    def VisitedLinkColor(self) -> Color:
        """
        Get: VisitedLinkColor(self: HtmlDocument) -> Color
        Set: VisitedLinkColor(self: HtmlDocument) = value
        """
        ...

    @property
    def Window(self): # -> HtmlWindow
        """ Get: Window(self: HtmlDocument) -> HtmlWindow """
        ...


    def AttachEventHandler(self, eventName:str, eventHandler:EventHandler): # -> 
        """ AttachEventHandler(self: HtmlDocument, eventName: str, eventHandler: EventHandler) """
        ...

    def CreateElement(self, elementTag:str) -> HtmlElement:
        """ CreateElement(self: HtmlDocument, elementTag: str) -> HtmlElement """
        ...

    def DetachEventHandler(self, eventName:str, eventHandler:EventHandler): # -> 
        """ DetachEventHandler(self: HtmlDocument, eventName: str, eventHandler: EventHandler) """
        ...

    def Equals(self, obj:object) -> bool:
        """ Equals(self: HtmlDocument, obj: object) -> bool """
        ...

    def ExecCommand(self, command:str, showUI:bool, value:object): # -> 
        """ ExecCommand(self: HtmlDocument, command: str, showUI: bool, value: object) """
        ...

    def Focus(self): # -> 
        """ Focus(self: HtmlDocument) """
        ...

    def GetElementById(self, id:str) -> HtmlElement:
        """ GetElementById(self: HtmlDocument, id: str) -> HtmlElement """
        ...

    def GetElementFromPoint(self, point:Point) -> HtmlElement:
        """ GetElementFromPoint(self: HtmlDocument, point: Point) -> HtmlElement """
        ...

    def GetElementsByTagName(self, tagName:str): # -> HtmlElementCollection
        """ GetElementsByTagName(self: HtmlDocument, tagName: str) -> HtmlElementCollection """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: HtmlDocument) -> int """
        ...

    def InvokeScript(self, scriptName:str, args:Array = ...) -> object:
        """
        InvokeScript(self: HtmlDocument, scriptName: str) -> object
        InvokeScript(self: HtmlDocument, scriptName: str, args: Array[object]) -> object
        """
        ...

    def OpenNew(self, replaceInHistory:bool) -> HtmlDocument:
        """ OpenNew(self: HtmlDocument, replaceInHistory: bool) -> HtmlDocument """
        ...

    def Write(self, text:str): # -> 
        """ Write(self: HtmlDocument, text: str) """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    Click = ...
    ContextMenuShowing = ...
    Focusing = ...
    LosingFocus = ...
    MouseDown = ...
    MouseLeave = ...
    MouseMove = ...
    MouseOver = ...
    MouseUp = ...
    Stop = ...


class HtmlElement: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def All(self): # -> HtmlElementCollection
        """ Get: All(self: HtmlElement) -> HtmlElementCollection """
        ...

    @property
    def CanHaveChildren(self) -> bool:
        """ Get: CanHaveChildren(self: HtmlElement) -> bool """
        ...

    @property
    def Children(self): # -> HtmlElementCollection
        """ Get: Children(self: HtmlElement) -> HtmlElementCollection """
        ...

    @property
    def ClientRectangle(self) -> Rectangle:
        """ Get: ClientRectangle(self: HtmlElement) -> Rectangle """
        ...

    @property
    def Document(self) -> HtmlDocument:
        """ Get: Document(self: HtmlElement) -> HtmlDocument """
        ...

    @property
    def DomElement(self) -> object:
        """ Get: DomElement(self: HtmlElement) -> object """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: HtmlElement) -> bool
        Set: Enabled(self: HtmlElement) = value
        """
        ...

    @property
    def FirstChild(self) -> HtmlElement:
        """ Get: FirstChild(self: HtmlElement) -> HtmlElement """
        ...

    @property
    def Id(self) -> str:
        """
        Get: Id(self: HtmlElement) -> str
        Set: Id(self: HtmlElement) = value
        """
        ...

    @property
    def InnerHtml(self) -> str:
        """
        Get: InnerHtml(self: HtmlElement) -> str
        Set: InnerHtml(self: HtmlElement) = value
        """
        ...

    @property
    def InnerText(self) -> str:
        """
        Get: InnerText(self: HtmlElement) -> str
        Set: InnerText(self: HtmlElement) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: HtmlElement) -> str
        Set: Name(self: HtmlElement) = value
        """
        ...

    @property
    def NextSibling(self) -> HtmlElement:
        """ Get: NextSibling(self: HtmlElement) -> HtmlElement """
        ...

    @property
    def OffsetParent(self) -> HtmlElement:
        """ Get: OffsetParent(self: HtmlElement) -> HtmlElement """
        ...

    @property
    def OffsetRectangle(self) -> Rectangle:
        """ Get: OffsetRectangle(self: HtmlElement) -> Rectangle """
        ...

    @property
    def OuterHtml(self) -> str:
        """
        Get: OuterHtml(self: HtmlElement) -> str
        Set: OuterHtml(self: HtmlElement) = value
        """
        ...

    @property
    def OuterText(self) -> str:
        """
        Get: OuterText(self: HtmlElement) -> str
        Set: OuterText(self: HtmlElement) = value
        """
        ...

    @property
    def Parent(self) -> HtmlElement:
        """ Get: Parent(self: HtmlElement) -> HtmlElement """
        ...

    @property
    def ScrollLeft(self) -> int:
        """
        Get: ScrollLeft(self: HtmlElement) -> int
        Set: ScrollLeft(self: HtmlElement) = value
        """
        ...

    @property
    def ScrollRectangle(self) -> Rectangle:
        """ Get: ScrollRectangle(self: HtmlElement) -> Rectangle """
        ...

    @property
    def ScrollTop(self) -> int:
        """
        Get: ScrollTop(self: HtmlElement) -> int
        Set: ScrollTop(self: HtmlElement) = value
        """
        ...

    @property
    def Style(self) -> str:
        """
        Get: Style(self: HtmlElement) -> str
        Set: Style(self: HtmlElement) = value
        """
        ...

    @property
    def TabIndex(self) -> Int16:
        """
        Get: TabIndex(self: HtmlElement) -> Int16
        Set: TabIndex(self: HtmlElement) = value
        """
        ...

    @property
    def TagName(self) -> str:
        """ Get: TagName(self: HtmlElement) -> str """
        ...


    def AppendChild(self, newElement:HtmlElement) -> HtmlElement:
        """ AppendChild(self: HtmlElement, newElement: HtmlElement) -> HtmlElement """
        ...

    def AttachEventHandler(self, eventName:str, eventHandler:EventHandler): # -> 
        """ AttachEventHandler(self: HtmlElement, eventName: str, eventHandler: EventHandler) """
        ...

    def DetachEventHandler(self, eventName:str, eventHandler:EventHandler): # -> 
        """ DetachEventHandler(self: HtmlElement, eventName: str, eventHandler: EventHandler) """
        ...

    def Equals(self, obj:object) -> bool:
        """ Equals(self: HtmlElement, obj: object) -> bool """
        ...

    def Focus(self): # -> 
        """ Focus(self: HtmlElement) """
        ...

    def GetAttribute(self, attributeName:str) -> str:
        """ GetAttribute(self: HtmlElement, attributeName: str) -> str """
        ...

    def GetElementsByTagName(self, tagName:str): # -> HtmlElementCollection
        """ GetElementsByTagName(self: HtmlElement, tagName: str) -> HtmlElementCollection """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: HtmlElement) -> int """
        ...

    def InsertAdjacentElement(self, orient, newElement:HtmlElement) -> HtmlElement: # Not found arg types: {'orient': 'HtmlElementInsertionOrientation'}
        """ InsertAdjacentElement(self: HtmlElement, orient: HtmlElementInsertionOrientation, newElement: HtmlElement) -> HtmlElement """
        ...

    def InvokeMember(self, methodName:str, parameter:Array = ...) -> object:
        """
        InvokeMember(self: HtmlElement, methodName: str) -> object
        InvokeMember(self: HtmlElement, methodName: str, *parameter: Array[object]) -> object
        """
        ...

    def RaiseEvent(self, eventName:str): # -> 
        """ RaiseEvent(self: HtmlElement, eventName: str) """
        ...

    def RemoveFocus(self): # -> 
        """ RemoveFocus(self: HtmlElement) """
        ...

    def ScrollIntoView(self, alignWithTop:bool): # -> 
        """ ScrollIntoView(self: HtmlElement, alignWithTop: bool) """
        ...

    def SetAttribute(self, attributeName:str, value:str): # -> 
        """ SetAttribute(self: HtmlElement, attributeName: str, value: str) """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    Click = ...
    DoubleClick = ...
    Drag = ...
    DragEnd = ...
    DragLeave = ...
    DragOver = ...
    Focusing = ...
    GotFocus = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    LosingFocus = ...
    LostFocus = ...
    MouseDown = ...
    MouseEnter = ...
    MouseLeave = ...
    MouseMove = ...
    MouseOver = ...
    MouseUp = ...


class HtmlElementCollection(ICollection): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    def GetElementsByName(self, name:str) -> HtmlElementCollection:
        """ GetElementsByName(self: HtmlElementCollection, name: str) -> HtmlElementCollection """
        ...

    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: HtmlElementCollection) -> IEnumerator """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        ...


class HtmlElementErrorEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Description(self) -> str:
        """ Get: Description(self: HtmlElementErrorEventArgs) -> str """
        ...

    @property
    def Handled(self) -> bool:
        """
        Get: Handled(self: HtmlElementErrorEventArgs) -> bool
        Set: Handled(self: HtmlElementErrorEventArgs) = value
        """
        ...

    @property
    def LineNumber(self) -> int:
        """ Get: LineNumber(self: HtmlElementErrorEventArgs) -> int """
        ...

    @property
    def Url(self) -> Uri:
        """ Get: Url(self: HtmlElementErrorEventArgs) -> Uri """
        ...



class HtmlElementErrorEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ HtmlElementErrorEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:HtmlElementErrorEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: HtmlElementErrorEventHandler, sender: object, e: HtmlElementErrorEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: HtmlElementErrorEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:HtmlElementErrorEventArgs): # -> 
        """ Invoke(self: HtmlElementErrorEventHandler, sender: object, e: HtmlElementErrorEventArgs) """
        ...


class HtmlElementEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AltKeyPressed(self) -> bool:
        """ Get: AltKeyPressed(self: HtmlElementEventArgs) -> bool """
        ...

    @property
    def BubbleEvent(self) -> bool:
        """
        Get: BubbleEvent(self: HtmlElementEventArgs) -> bool
        Set: BubbleEvent(self: HtmlElementEventArgs) = value
        """
        ...

    @property
    def ClientMousePosition(self) -> Point:
        """ Get: ClientMousePosition(self: HtmlElementEventArgs) -> Point """
        ...

    @property
    def CtrlKeyPressed(self) -> bool:
        """ Get: CtrlKeyPressed(self: HtmlElementEventArgs) -> bool """
        ...

    @property
    def EventType(self) -> str:
        """ Get: EventType(self: HtmlElementEventArgs) -> str """
        ...

    @property
    def FromElement(self) -> HtmlElement:
        """ Get: FromElement(self: HtmlElementEventArgs) -> HtmlElement """
        ...

    @property
    def KeyPressedCode(self) -> int:
        """ Get: KeyPressedCode(self: HtmlElementEventArgs) -> int """
        ...

    @property
    def MouseButtonsPressed(self): # -> MouseButtons
        """ Get: MouseButtonsPressed(self: HtmlElementEventArgs) -> MouseButtons """
        ...

    @property
    def MousePosition(self) -> Point:
        """ Get: MousePosition(self: HtmlElementEventArgs) -> Point """
        ...

    @property
    def OffsetMousePosition(self) -> Point:
        """ Get: OffsetMousePosition(self: HtmlElementEventArgs) -> Point """
        ...

    @property
    def ReturnValue(self) -> bool:
        """
        Get: ReturnValue(self: HtmlElementEventArgs) -> bool
        Set: ReturnValue(self: HtmlElementEventArgs) = value
        """
        ...

    @property
    def ShiftKeyPressed(self) -> bool:
        """ Get: ShiftKeyPressed(self: HtmlElementEventArgs) -> bool """
        ...

    @property
    def ToElement(self) -> HtmlElement:
        """ Get: ToElement(self: HtmlElementEventArgs) -> HtmlElement """
        ...



class HtmlElementEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ HtmlElementEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:HtmlElementEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: HtmlElementEventHandler, sender: object, e: HtmlElementEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: HtmlElementEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:HtmlElementEventArgs): # -> 
        """ Invoke(self: HtmlElementEventHandler, sender: object, e: HtmlElementEventArgs) """
        ...


class HtmlElementInsertionOrientation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum HtmlElementInsertionOrientation, values: AfterBegin (1), AfterEnd (3), BeforeBegin (0), BeforeEnd (2) """
    AfterBegin: HtmlElementInsertionOrientation = ...
    AfterEnd: HtmlElementInsertionOrientation = ...
    BeforeBegin: HtmlElementInsertionOrientation = ...
    BeforeEnd: HtmlElementInsertionOrientation = ...
    value__ = ...


class HtmlHistory(IDisposable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def DomHistory(self) -> object:
        """ Get: DomHistory(self: HtmlHistory) -> object """
        ...

    @property
    def Length(self) -> int:
        """ Get: Length(self: HtmlHistory) -> int """
        ...


    def Back(self, numberBack:int): # -> 
        """ Back(self: HtmlHistory, numberBack: int) """
        ...

    def Forward(self, numberForward:int): # -> 
        """ Forward(self: HtmlHistory, numberForward: int) """
        ...

    def Go(self, *__args:Uri): # -> 
        """ Go(self: HtmlHistory, url: Uri)Go(self: HtmlHistory, urlString: str)Go(self: HtmlHistory, relativePosition: int) """
        ...


class HtmlWindow: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Document(self) -> HtmlDocument:
        """ Get: Document(self: HtmlWindow) -> HtmlDocument """
        ...

    @property
    def DomWindow(self) -> object:
        """ Get: DomWindow(self: HtmlWindow) -> object """
        ...

    @property
    def Frames(self): # -> HtmlWindowCollection
        """ Get: Frames(self: HtmlWindow) -> HtmlWindowCollection """
        ...

    @property
    def History(self) -> HtmlHistory:
        """ Get: History(self: HtmlWindow) -> HtmlHistory """
        ...

    @property
    def IsClosed(self) -> bool:
        """ Get: IsClosed(self: HtmlWindow) -> bool """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: HtmlWindow) -> str
        Set: Name(self: HtmlWindow) = value
        """
        ...

    @property
    def Opener(self) -> HtmlWindow:
        """ Get: Opener(self: HtmlWindow) -> HtmlWindow """
        ...

    @property
    def Parent(self) -> HtmlWindow:
        """ Get: Parent(self: HtmlWindow) -> HtmlWindow """
        ...

    @property
    def Position(self) -> Point:
        """ Get: Position(self: HtmlWindow) -> Point """
        ...

    @property
    def Size(self) -> Size:
        """
        Get: Size(self: HtmlWindow) -> Size
        Set: Size(self: HtmlWindow) = value
        """
        ...

    @property
    def StatusBarText(self) -> str:
        """
        Get: StatusBarText(self: HtmlWindow) -> str
        Set: StatusBarText(self: HtmlWindow) = value
        """
        ...

    @property
    def Url(self) -> Uri:
        """ Get: Url(self: HtmlWindow) -> Uri """
        ...

    @property
    def WindowFrameElement(self) -> HtmlElement:
        """ Get: WindowFrameElement(self: HtmlWindow) -> HtmlElement """
        ...


    def Alert(self, message:str): # -> 
        """ Alert(self: HtmlWindow, message: str) """
        ...

    def AttachEventHandler(self, eventName:str, eventHandler:EventHandler): # -> 
        """ AttachEventHandler(self: HtmlWindow, eventName: str, eventHandler: EventHandler) """
        ...

    def Close(self): # -> 
        """ Close(self: HtmlWindow) """
        ...

    def Confirm(self, message:str) -> bool:
        """ Confirm(self: HtmlWindow, message: str) -> bool """
        ...

    def DetachEventHandler(self, eventName:str, eventHandler:EventHandler): # -> 
        """ DetachEventHandler(self: HtmlWindow, eventName: str, eventHandler: EventHandler) """
        ...

    def Equals(self, obj:object) -> bool:
        """ Equals(self: HtmlWindow, obj: object) -> bool """
        ...

    def Focus(self): # -> 
        """ Focus(self: HtmlWindow) """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: HtmlWindow) -> int """
        ...

    def MoveTo(self, *__args:Point): # -> 
        """ MoveTo(self: HtmlWindow, x: int, y: int)MoveTo(self: HtmlWindow, point: Point) """
        ...

    def Navigate(self, *__args:Uri): # -> 
        """ Navigate(self: HtmlWindow, url: Uri)Navigate(self: HtmlWindow, urlString: str) """
        ...

    def Open(self, *__args) -> HtmlWindow:
        """
        Open(self: HtmlWindow, urlString: str, target: str, windowOptions: str, replaceEntry: bool) -> HtmlWindow
        Open(self: HtmlWindow, url: Uri, target: str, windowOptions: str, replaceEntry: bool) -> HtmlWindow
        """
        ...

    def OpenNew(self, *__args) -> HtmlWindow:
        """
        OpenNew(self: HtmlWindow, url: Uri, windowOptions: str) -> HtmlWindow
        OpenNew(self: HtmlWindow, urlString: str, windowOptions: str) -> HtmlWindow
        """
        ...

    def Prompt(self, message:str, defaultInputValue:str) -> str:
        """ Prompt(self: HtmlWindow, message: str, defaultInputValue: str) -> str """
        ...

    def RemoveFocus(self): # -> 
        """ RemoveFocus(self: HtmlWindow) """
        ...

    def ResizeTo(self, *__args:Size): # -> 
        """ ResizeTo(self: HtmlWindow, width: int, height: int)ResizeTo(self: HtmlWindow, size: Size) """
        ...

    def ScrollTo(self, *__args:Point): # -> 
        """ ScrollTo(self: HtmlWindow, x: int, y: int)ScrollTo(self: HtmlWindow, point: Point) """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    Error = ...
    GotFocus = ...
    Load = ...
    LostFocus = ...
    Resize = ...
    Scroll = ...
    Unload = ...


class HtmlWindowCollection(ICollection): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: HtmlWindowCollection) -> IEnumerator """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        ...


class ICommandExecutor: # skipped bases: <type 'object'>
    """ no doc """
    def Execute(self): # -> 
        """ Execute(self: ICommandExecutor) """
        ...


class IComponentEditorPageSite: # skipped bases: <type 'object'>
    """ no doc """
    def GetControl(self) -> Control:
        """ GetControl(self: IComponentEditorPageSite) -> Control """
        ...

    def SetDirty(self): # -> 
        """ SetDirty(self: IComponentEditorPageSite) """
        ...


class IDataGridViewEditingCell: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def EditingCellFormattedValue(self) -> object:
        """
        Get: EditingCellFormattedValue(self: IDataGridViewEditingCell) -> object
        Set: EditingCellFormattedValue(self: IDataGridViewEditingCell) = value
        """
        ...

    @property
    def EditingCellValueChanged(self) -> bool:
        """
        Get: EditingCellValueChanged(self: IDataGridViewEditingCell) -> bool
        Set: EditingCellValueChanged(self: IDataGridViewEditingCell) = value
        """
        ...


    def GetEditingCellFormattedValue(self, context:DataGridViewDataErrorContexts) -> object:
        """ GetEditingCellFormattedValue(self: IDataGridViewEditingCell, context: DataGridViewDataErrorContexts) -> object """
        ...

    def PrepareEditingCellForEdit(self, selectAll:bool): # -> 
        """ PrepareEditingCellForEdit(self: IDataGridViewEditingCell, selectAll: bool) """
        ...


class IFeatureSupport: # skipped bases: <type 'object'>
    """ no doc """
    def GetVersionPresent(self, feature:object) -> Version:
        """ GetVersionPresent(self: IFeatureSupport, feature: object) -> Version """
        ...

    def IsPresent(self, feature:object, minimumVersion:Version = ...) -> bool:
        """
        IsPresent(self: IFeatureSupport, feature: object) -> bool
        IsPresent(self: IFeatureSupport, feature: object, minimumVersion: Version) -> bool
        """
        ...


class IFileReaderService: # skipped bases: <type 'object'>
    """ no doc """
    def OpenFileFromSource(self, relativePath:str) -> Stream:
        """ OpenFileFromSource(self: IFileReaderService, relativePath: str) -> Stream """
        ...


class ImageIndexConverter(Int32Converter): # skipped bases: <type 'object'>
    """ ImageIndexConverter() """
    @property
    def IncludeNoneAsStandardValue(self):
        ...


    def ConvertFrom(self, *__args) -> object:
        """ ConvertFrom(self: ImageIndexConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object) -> object """
        ...

    def ConvertTo(self, *__args) -> object:
        """ ConvertTo(self: ImageIndexConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object """
        ...

    def GetStandardValues(self, context:ITypeDescriptorContext = ...): # -> StandardValuesCollection
        """ GetStandardValues(self: ImageIndexConverter, context: ITypeDescriptorContext) -> StandardValuesCollection """
        ...

    def GetStandardValuesExclusive(self, context:ITypeDescriptorContext = ...) -> bool:
        """ GetStandardValuesExclusive(self: ImageIndexConverter, context: ITypeDescriptorContext) -> bool """
        ...

    def GetStandardValuesSupported(self, context:ITypeDescriptorContext = ...) -> bool:
        """ GetStandardValuesSupported(self: ImageIndexConverter, context: ITypeDescriptorContext) -> bool """
        ...


class ImageKeyConverter(StringConverter): # skipped bases: <type 'object'>
    """ ImageKeyConverter() """
    @property
    def IncludeNoneAsStandardValue(self):
        ...


    def ConvertTo(self, *__args) -> object:
        """ ConvertTo(self: ImageKeyConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object """
        ...

    def GetStandardValues(self, context:ITypeDescriptorContext = ...): # -> StandardValuesCollection
        """ GetStandardValues(self: ImageKeyConverter, context: ITypeDescriptorContext) -> StandardValuesCollection """
        ...

    def GetStandardValuesExclusive(self, context:ITypeDescriptorContext = ...) -> bool:
        """ GetStandardValuesExclusive(self: ImageKeyConverter, context: ITypeDescriptorContext) -> bool """
        ...

    def GetStandardValuesSupported(self, context:ITypeDescriptorContext = ...) -> bool:
        """ GetStandardValuesSupported(self: ImageKeyConverter, context: ITypeDescriptorContext) -> bool """
        ...


class ImageLayout(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ImageLayout, values: Center (2), None (0), Stretch (3), Tile (1), Zoom (4) """
    Center: ImageLayout = ...
    Stretch: ImageLayout = ...
    Tile: ImageLayout = ...
    value__ = ...
    Zoom: ImageLayout = ...


class ImageList(Component): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """
    ImageList()
    ImageList(container: IContainer)
    """
    @property
    def ColorDepth(self) -> ColorDepth:
        """
        Get: ColorDepth(self: ImageList) -> ColorDepth
        Set: ColorDepth(self: ImageList) = value
        """
        ...

    @property
    def Handle(self) -> IntPtr:
        """ Get: Handle(self: ImageList) -> IntPtr """
        ...

    @property
    def HandleCreated(self) -> bool:
        """ Get: HandleCreated(self: ImageList) -> bool """
        ...

    @property
    def Images(self): # -> ImageCollection
        """ Get: Images(self: ImageList) -> ImageCollection """
        ...

    @property
    def ImageSize(self) -> Size:
        """
        Get: ImageSize(self: ImageList) -> Size
        Set: ImageSize(self: ImageList) = value
        """
        ...

    @property
    def ImageStream(self): # -> ImageListStreamer
        """
        Get: ImageStream(self: ImageList) -> ImageListStreamer
        Set: ImageStream(self: ImageList) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: ImageList) -> object
        Set: Tag(self: ImageList) = value
        """
        ...

    @property
    def TransparentColor(self) -> Color:
        """
        Get: TransparentColor(self: ImageList) -> Color
        Set: TransparentColor(self: ImageList) = value
        """
        ...


    def Draw(self, g, *__args): # -> 
        """ Draw(self: ImageList, g: Graphics, pt: Point, index: int)Draw(self: ImageList, g: Graphics, x: int, y: int, index: int)Draw(self: ImageList, g: Graphics, x: int, y: int, width: int, height: int, index: int) """
        ...

    def ImageCollection(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def __new__(cls, container:IContainer = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, container: IContainer)
        """
        ...

    RecreateHandle = ...


class ImageListStreamer(IDisposable, ISerializable): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ImeContext: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @staticmethod
    def Disable(handle:IntPtr): # -> 
        """ Disable(handle: IntPtr) """
        ...

    @staticmethod
    def Enable(handle:IntPtr): # -> 
        """ Enable(handle: IntPtr) """
        ...

    @staticmethod
    def GetImeMode(handle:IntPtr): # -> ImeMode
        """ GetImeMode(handle: IntPtr) -> ImeMode """
        ...

    @staticmethod
    def IsOpen(handle:IntPtr) -> bool:
        """ IsOpen(handle: IntPtr) -> bool """
        ...

    @staticmethod
    def SetImeStatus(imeMode, handle:IntPtr): # ->  # Not found arg types: {'imeMode': 'ImeMode'}
        """ SetImeStatus(imeMode: ImeMode, handle: IntPtr) """
        ...

    @staticmethod
    def SetOpenStatus(open:bool, handle:IntPtr): # -> 
        """ SetOpenStatus(open: bool, handle: IntPtr) """
        ...

    __all__: list = ...


class ImeMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ImeMode, values: Alpha (8), AlphaFull (7), Close (11), Disable (3), Hangul (10), HangulFull (9), Hiragana (4), Inherit (-1), Katakana (5), KatakanaHalf (6), NoControl (0), Off (2), On (1), OnHalf (12) """
    Alpha: ImeMode = ...
    AlphaFull: ImeMode = ...
    Close: ImeMode = ...
    Disable: ImeMode = ...
    Hangul: ImeMode = ...
    HangulFull: ImeMode = ...
    Hiragana: ImeMode = ...
    Inherit: ImeMode = ...
    Katakana: ImeMode = ...
    KatakanaHalf: ImeMode = ...
    NoControl: ImeMode = ...
    Off: ImeMode = ...
    On: ImeMode = ...
    OnHalf: ImeMode = ...
    value__ = ...


class ImeModeConversion: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def ImeModeConversionBits(self) -> Dictionary:
        """ Get: ImeModeConversionBits() -> Dictionary[ImeMode, ImeModeConversion] """
        ...

    @property
    def IsCurrentConversionTableSupported(self) -> bool:
        """ Get: IsCurrentConversionTableSupported() -> bool """
        ...




class IMessageFilter: # skipped bases: <type 'object'>
    """ no doc """
    def PreFilterMessage(self, m:Message) -> Tuple_[bool, Message]:
        """ PreFilterMessage(self: IMessageFilter, m: Message) -> (bool, Message) """
        ...


class InputLanguage: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Culture(self) -> CultureInfo:
        """ Get: Culture(self: InputLanguage) -> CultureInfo """
        ...

    @property
    def CurrentInputLanguage(self) -> InputLanguage:
        """
        Get: CurrentInputLanguage() -> InputLanguage
        Set: CurrentInputLanguage() = value
        """
        ...

    @property
    def DefaultInputLanguage(self) -> InputLanguage:
        """ Get: DefaultInputLanguage() -> InputLanguage """
        ...

    @property
    def Handle(self) -> IntPtr:
        """ Get: Handle(self: InputLanguage) -> IntPtr """
        ...

    @property
    def InstalledInputLanguages(self): # -> InputLanguageCollection
        """ Get: InstalledInputLanguages() -> InputLanguageCollection """
        ...

    @property
    def LayoutName(self) -> str:
        """ Get: LayoutName(self: InputLanguage) -> str """
        ...


    def Equals(self, value:object) -> bool:
        """ Equals(self: InputLanguage, value: object) -> bool """
        ...

    @staticmethod
    def FromCulture(culture:CultureInfo) -> InputLanguage:
        """ FromCulture(culture: CultureInfo) -> InputLanguage """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: InputLanguage) -> int """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...



class InputLanguageChangedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """
    InputLanguageChangedEventArgs(culture: CultureInfo, charSet: Byte)
    InputLanguageChangedEventArgs(inputLanguage: InputLanguage, charSet: Byte)
    """
    @property
    def CharSet(self) -> Byte:
        """ Get: CharSet(self: InputLanguageChangedEventArgs) -> Byte """
        ...

    @property
    def Culture(self) -> CultureInfo:
        """ Get: Culture(self: InputLanguageChangedEventArgs) -> CultureInfo """
        ...

    @property
    def InputLanguage(self) -> InputLanguage:
        """ Get: InputLanguage(self: InputLanguageChangedEventArgs) -> InputLanguage """
        ...


    def __new__(cls, *__args) -> Self:
        """
        __new__(cls: type, culture: CultureInfo, charSet: Byte)
        __new__(cls: type, inputLanguage: InputLanguage, charSet: Byte)
        """
        ...


class InputLanguageChangedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ InputLanguageChangedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:InputLanguageChangedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: InputLanguageChangedEventHandler, sender: object, e: InputLanguageChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: InputLanguageChangedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:InputLanguageChangedEventArgs): # -> 
        """ Invoke(self: InputLanguageChangedEventHandler, sender: object, e: InputLanguageChangedEventArgs) """
        ...


class InputLanguageChangingEventArgs(CancelEventArgs): # skipped bases: <type 'object'>
    """
    InputLanguageChangingEventArgs(culture: CultureInfo, sysCharSet: bool)
    InputLanguageChangingEventArgs(inputLanguage: InputLanguage, sysCharSet: bool)
    """
    @property
    def Culture(self) -> CultureInfo:
        """ Get: Culture(self: InputLanguageChangingEventArgs) -> CultureInfo """
        ...

    @property
    def InputLanguage(self) -> InputLanguage:
        """ Get: InputLanguage(self: InputLanguageChangingEventArgs) -> InputLanguage """
        ...

    @property
    def SysCharSet(self) -> bool:
        """ Get: SysCharSet(self: InputLanguageChangingEventArgs) -> bool """
        ...



class InputLanguageChangingEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ InputLanguageChangingEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:InputLanguageChangingEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: InputLanguageChangingEventHandler, sender: object, e: InputLanguageChangingEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: InputLanguageChangingEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:InputLanguageChangingEventArgs): # -> 
        """ Invoke(self: InputLanguageChangingEventHandler, sender: object, e: InputLanguageChangingEventArgs) """
        ...


class InputLanguageCollection(ReadOnlyCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def Contains(self, value:InputLanguage) -> bool:
        """ Contains(self: InputLanguageCollection, value: InputLanguage) -> bool """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: InputLanguageCollection, array: Array[InputLanguage], index: int) """
        ...

    def IndexOf(self, value:InputLanguage) -> int:
        """ IndexOf(self: InputLanguageCollection, value: InputLanguage) -> int """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class InsertKeyMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum InsertKeyMode, values: Default (0), Insert (1), Overwrite (2) """
    Default: InsertKeyMode = ...
    Insert: InsertKeyMode = ...
    Overwrite: InsertKeyMode = ...
    value__ = ...


class InvalidateEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ InvalidateEventArgs(invalidRect: Rectangle) """
    @property
    def InvalidRect(self) -> Rectangle:
        """ Get: InvalidRect(self: InvalidateEventArgs) -> Rectangle """
        ...


    def __new__(cls, invalidRect:Rectangle) -> Self:
        """ __new__(cls: type, invalidRect: Rectangle) """
        ...


class InvalidateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ InvalidateEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:InvalidateEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: InvalidateEventHandler, sender: object, e: InvalidateEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: InvalidateEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:InvalidateEventArgs): # -> 
        """ Invoke(self: InvalidateEventHandler, sender: object, e: InvalidateEventArgs) """
        ...


class ItemActivation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ItemActivation, values: OneClick (1), Standard (0), TwoClick (2) """
    OneClick: ItemActivation = ...
    Standard: ItemActivation = ...
    TwoClick: ItemActivation = ...
    value__ = ...


class ItemBoundsPortion(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ItemBoundsPortion, values: Entire (0), Icon (1), ItemOnly (3), Label (2) """
    Entire: ItemBoundsPortion = ...
    Icon: ItemBoundsPortion = ...
    ItemOnly: ItemBoundsPortion = ...
    Label: ItemBoundsPortion = ...
    value__ = ...


class ItemChangedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Index(self) -> int:
        """ Get: Index(self: ItemChangedEventArgs) -> int """
        ...



class ItemChangedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemChangedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ItemChangedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ItemChangedEventHandler, sender: object, e: ItemChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ItemChangedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ItemChangedEventArgs): # -> 
        """ Invoke(self: ItemChangedEventHandler, sender: object, e: ItemChangedEventArgs) """
        ...


class ItemCheckedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ ItemCheckedEventArgs(item: ListViewItem) """
    @property
    def Item(self) -> ListViewItem:
        """ Get: Item(self: ItemCheckedEventArgs) -> ListViewItem """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __new__(cls, item:ListViewItem) -> Self:
        """ __new__(cls: type, item: ListViewItem) """
        ...


class ItemCheckedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemCheckedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ItemCheckedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ItemCheckedEventHandler, sender: object, e: ItemCheckedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ItemCheckedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ItemCheckedEventArgs): # -> 
        """ Invoke(self: ItemCheckedEventHandler, sender: object, e: ItemCheckedEventArgs) """
        ...


class ItemCheckEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ ItemCheckEventArgs(index: int, newCheckValue: CheckState, currentValue: CheckState) """
    @property
    def CurrentValue(self) -> CheckState:
        """ Get: CurrentValue(self: ItemCheckEventArgs) -> CheckState """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ItemCheckEventArgs) -> int """
        ...

    @property
    def NewValue(self) -> CheckState:
        """
        Get: NewValue(self: ItemCheckEventArgs) -> CheckState
        Set: NewValue(self: ItemCheckEventArgs) = value
        """
        ...


    def __new__(cls, index:int, newCheckValue:CheckState, currentValue:CheckState) -> Self:
        """ __new__(cls: type, index: int, newCheckValue: CheckState, currentValue: CheckState) """
        ...


class ItemCheckEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemCheckEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ItemCheckEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ItemCheckEventHandler, sender: object, e: ItemCheckEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ItemCheckEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ItemCheckEventArgs): # -> 
        """ Invoke(self: ItemCheckEventHandler, sender: object, e: ItemCheckEventArgs) """
        ...


class ItemDragEventArgs(EventArgs): # skipped bases: <type 'object'>
    """
    ItemDragEventArgs(button: MouseButtons)
    ItemDragEventArgs(button: MouseButtons, item: object)
    """
    @property
    def Button(self): # -> MouseButtons
        """ Get: Button(self: ItemDragEventArgs) -> MouseButtons """
        ...

    @property
    def Item(self) -> object:
        """ Get: Item(self: ItemDragEventArgs) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __new__(cls, button, item:object = ...) -> Self: # Not found arg types: {'button': 'MouseButtons'}
        """
        __new__(cls: type, button: MouseButtons)
        __new__(cls: type, button: MouseButtons, item: object)
        """
        ...


class ItemDragEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemDragEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ItemDragEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ItemDragEventHandler, sender: object, e: ItemDragEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ItemDragEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ItemDragEventArgs): # -> 
        """ Invoke(self: ItemDragEventHandler, sender: object, e: ItemDragEventArgs) """
        ...


class IWindowTarget: # skipped bases: <type 'object'>
    """ no doc """
    def OnHandleChange(self, newHandle:IntPtr): # -> 
        """ OnHandleChange(self: IWindowTarget, newHandle: IntPtr) """
        ...

    def OnMessage(self, m:Message) -> Message:
        """ OnMessage(self: IWindowTarget, m: Message) -> Message """
        ...


class KeyEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ KeyEventArgs(keyData: Keys) """
    @property
    def Alt(self) -> bool:
        """ Get: Alt(self: KeyEventArgs) -> bool """
        ...

    @property
    def Control(self) -> bool:
        """ Get: Control(self: KeyEventArgs) -> bool """
        ...

    @property
    def Handled(self) -> bool:
        """
        Get: Handled(self: KeyEventArgs) -> bool
        Set: Handled(self: KeyEventArgs) = value
        """
        ...

    @property
    def KeyCode(self): # -> Keys
        """ Get: KeyCode(self: KeyEventArgs) -> Keys """
        ...

    @property
    def KeyData(self): # -> Keys
        """ Get: KeyData(self: KeyEventArgs) -> Keys """
        ...

    @property
    def KeyValue(self) -> int:
        """ Get: KeyValue(self: KeyEventArgs) -> int """
        ...

    @property
    def Modifiers(self): # -> Keys
        """ Get: Modifiers(self: KeyEventArgs) -> Keys """
        ...

    @property
    def Shift(self) -> bool:
        """ Get: Shift(self: KeyEventArgs) -> bool """
        ...

    @property
    def SuppressKeyPress(self) -> bool:
        """
        Get: SuppressKeyPress(self: KeyEventArgs) -> bool
        Set: SuppressKeyPress(self: KeyEventArgs) = value
        """
        ...


    def __new__(cls, keyData) -> Self: # Not found arg types: {'keyData': 'Keys'}
        """ __new__(cls: type, keyData: Keys) """
        ...


class KeyEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ KeyEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:KeyEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: KeyEventHandler, sender: object, e: KeyEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: KeyEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:KeyEventArgs): # -> 
        """ Invoke(self: KeyEventHandler, sender: object, e: KeyEventArgs) """
        ...


class KeyPressEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ KeyPressEventArgs(keyChar: Char) """
    @property
    def Handled(self) -> bool:
        """
        Get: Handled(self: KeyPressEventArgs) -> bool
        Set: Handled(self: KeyPressEventArgs) = value
        """
        ...

    @property
    def KeyChar(self) -> Char:
        """
        Get: KeyChar(self: KeyPressEventArgs) -> Char
        Set: KeyChar(self: KeyPressEventArgs) = value
        """
        ...


    def __new__(cls, keyChar:Char) -> Self:
        """ __new__(cls: type, keyChar: Char) """
        ...


class KeyPressEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ KeyPressEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:KeyPressEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: KeyPressEventHandler, sender: object, e: KeyPressEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: KeyPressEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:KeyPressEventArgs): # -> 
        """ Invoke(self: KeyPressEventHandler, sender: object, e: KeyPressEventArgs) """
        ...


class Keys(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) Keys, values: A (65), Add (107), Alt (262144), Apps (93), Attn (246), B (66), Back (8), BrowserBack (166), BrowserFavorites (171), BrowserForward (167), BrowserHome (172), BrowserRefresh (168), BrowserSearch (170), BrowserStop (169), C (67), Cancel (3), Capital (20), CapsLock (20), Clear (12), Control (131072), ControlKey (17), Crsel (247), D (68), D0 (48), D1 (49), D2 (50), D3 (51), D4 (52), D5 (53), D6 (54), D7 (55), D8 (56), D9 (57), Decimal (110), Delete (46), Divide (111), Down (40), E (69), End (35), Enter (13), EraseEof (249), Escape (27), Execute (43), Exsel (248), F (70), F1 (112), F10 (121), F11 (122), F12 (123), F13 (124), F14 (125), F15 (126), F16 (127), F17 (128), F18 (129), F19 (130), F2 (113), F20 (131), F21 (132), F22 (133), F23 (134), F24 (135), F3 (114), F4 (115), F5 (116), F6 (117), F7 (118), F8 (119), F9 (120), FinalMode (24), G (71), H (72), HanguelMode (21), HangulMode (21), HanjaMode (25), Help (47), Home (36), I (73), IMEAccept (30), IMEAceept (30), IMEConvert (28), IMEModeChange (31), IMENonconvert (29), Insert (45), J (74), JunjaMode (23), K (75), KanaMode (21), KanjiMode (25), KeyCode (65535), L (76), LaunchApplication1 (182), LaunchApplication2 (183), LaunchMail (180), LButton (1), LControlKey (162), Left (37), LineFeed (10), LMenu (164), LShiftKey (160), LWin (91), M (77), MButton (4), MediaNextTrack (176), MediaPlayPause (179), MediaPreviousTrack (177), MediaStop (178), Menu (18), Modifiers (-65536), Multiply (106), N (78), Next (34), NoName (252), None (0), NumLock (144), NumPad0 (96), NumPad1 (97), NumPad2 (98), NumPad3 (99), NumPad4 (100), NumPad5 (101), NumPad6 (102), NumPad7 (103), NumPad8 (104), NumPad9 (105), O (79), Oem1 (186), Oem102 (226), Oem2 (191), Oem3 (192), Oem4 (219), Oem5 (220), Oem6 (221), Oem7 (222), Oem8 (223), OemBackslash (226), OemClear (254), OemCloseBrackets (221), Oemcomma (188), OemMinus (189), OemOpenBrackets (219), OemPeriod (190), OemPipe (220), Oemplus (187), OemQuestion (191), OemQuotes (222), OemSemicolon (186), Oemtilde (192), P (80), Pa1 (253), Packet (231), PageDown (34), PageUp (33), Pause (19), Play (250), Print (42), PrintScreen (44), Prior (33), ProcessKey (229), Q (81), R (82), RButton (2), RControlKey (163), Return (13), Right (39), RMenu (165), RShiftKey (161), RWin (92), S (83), Scroll (145), Select (41), SelectMedia (181), Separator (108), Shift (65536), ShiftKey (16), Sleep (95), Snapshot (44), Space (32), Subtract (109), T (84), Tab (9), U (85), Up (38), V (86), VolumeDown (174), VolumeMute (173), VolumeUp (175), W (87), X (88), XButton1 (5), XButton2 (6), Y (89), Z (90), Zoom (251) """
    A: Keys = ...
    Add: Keys = ...
    Alt: Keys = ...
    Apps: Keys = ...
    Attn: Keys = ...
    B: Keys = ...
    Back: Keys = ...
    BrowserBack: Keys = ...
    BrowserFavorites: Keys = ...
    BrowserForward: Keys = ...
    BrowserHome: Keys = ...
    BrowserRefresh: Keys = ...
    BrowserSearch: Keys = ...
    BrowserStop: Keys = ...
    C: Keys = ...
    Cancel: Keys = ...
    Capital: Keys = ...
    CapsLock: Keys = ...
    Clear: Keys = ...
    Control: Keys = ...
    ControlKey: Keys = ...
    Crsel: Keys = ...
    D: Keys = ...
    D0: Keys = ...
    D1: Keys = ...
    D2: Keys = ...
    D3: Keys = ...
    D4: Keys = ...
    D5: Keys = ...
    D6: Keys = ...
    D7: Keys = ...
    D8: Keys = ...
    D9: Keys = ...
    Decimal: Keys = ...
    Delete: Keys = ...
    Divide: Keys = ...
    Down: Keys = ...
    E: Keys = ...
    End: Keys = ...
    Enter: Keys = ...
    EraseEof: Keys = ...
    Escape: Keys = ...
    Execute: Keys = ...
    Exsel: Keys = ...
    F: Keys = ...
    F1: Keys = ...
    F10: Keys = ...
    F11: Keys = ...
    F12: Keys = ...
    F13: Keys = ...
    F14: Keys = ...
    F15: Keys = ...
    F16: Keys = ...
    F17: Keys = ...
    F18: Keys = ...
    F19: Keys = ...
    F2: Keys = ...
    F20: Keys = ...
    F21: Keys = ...
    F22: Keys = ...
    F23: Keys = ...
    F24: Keys = ...
    F3: Keys = ...
    F4: Keys = ...
    F5: Keys = ...
    F6: Keys = ...
    F7: Keys = ...
    F8: Keys = ...
    F9: Keys = ...
    FinalMode: Keys = ...
    G: Keys = ...
    H: Keys = ...
    HanguelMode: Keys = ...
    HangulMode: Keys = ...
    HanjaMode: Keys = ...
    Help: Keys = ...
    Home: Keys = ...
    I: Keys = ...
    IMEAccept: Keys = ...
    IMEAceept: Keys = ...
    IMEConvert: Keys = ...
    IMEModeChange: Keys = ...
    IMENonconvert: Keys = ...
    Insert: Keys = ...
    J: Keys = ...
    JunjaMode: Keys = ...
    K: Keys = ...
    KanaMode: Keys = ...
    KanjiMode: Keys = ...
    KeyCode: Keys = ...
    L: Keys = ...
    LaunchApplication1: Keys = ...
    LaunchApplication2: Keys = ...
    LaunchMail: Keys = ...
    LButton: Keys = ...
    LControlKey: Keys = ...
    Left: Keys = ...
    LineFeed: Keys = ...
    LMenu: Keys = ...
    LShiftKey: Keys = ...
    LWin: Keys = ...
    M: Keys = ...
    MButton: Keys = ...
    MediaNextTrack: Keys = ...
    MediaPlayPause: Keys = ...
    MediaPreviousTrack: Keys = ...
    MediaStop: Keys = ...
    Menu: Keys = ...
    Modifiers: Keys = ...
    Multiply: Keys = ...
    N: Keys = ...
    Next: Keys = ...
    NoName: Keys = ...
    NumLock: Keys = ...
    NumPad0: Keys = ...
    NumPad1: Keys = ...
    NumPad2: Keys = ...
    NumPad3: Keys = ...
    NumPad4: Keys = ...
    NumPad5: Keys = ...
    NumPad6: Keys = ...
    NumPad7: Keys = ...
    NumPad8: Keys = ...
    NumPad9: Keys = ...
    O: Keys = ...
    Oem1: Keys = ...
    Oem102: Keys = ...
    Oem2: Keys = ...
    Oem3: Keys = ...
    Oem4: Keys = ...
    Oem5: Keys = ...
    Oem6: Keys = ...
    Oem7: Keys = ...
    Oem8: Keys = ...
    OemBackslash: Keys = ...
    OemClear: Keys = ...
    OemCloseBrackets: Keys = ...
    Oemcomma: Keys = ...
    OemMinus: Keys = ...
    OemOpenBrackets: Keys = ...
    OemPeriod: Keys = ...
    OemPipe: Keys = ...
    Oemplus: Keys = ...
    OemQuestion: Keys = ...
    OemQuotes: Keys = ...
    OemSemicolon: Keys = ...
    Oemtilde: Keys = ...
    P: Keys = ...
    Pa1: Keys = ...
    Packet: Keys = ...
    PageDown: Keys = ...
    PageUp: Keys = ...
    Pause: Keys = ...
    Play: Keys = ...
    Print: Keys = ...
    PrintScreen: Keys = ...
    Prior: Keys = ...
    ProcessKey: Keys = ...
    Q: Keys = ...
    R: Keys = ...
    RButton: Keys = ...
    RControlKey: Keys = ...
    Return: Keys = ...
    Right: Keys = ...
    RMenu: Keys = ...
    RShiftKey: Keys = ...
    RWin: Keys = ...
    S: Keys = ...
    Scroll: Keys = ...
    Select: Keys = ...
    SelectMedia: Keys = ...
    Separator: Keys = ...
    Shift: Keys = ...
    ShiftKey: Keys = ...
    Sleep: Keys = ...
    Snapshot: Keys = ...
    Space: Keys = ...
    Subtract: Keys = ...
    T: Keys = ...
    Tab: Keys = ...
    U: Keys = ...
    Up: Keys = ...
    V: Keys = ...
    value__ = ...
    VolumeDown: Keys = ...
    VolumeMute: Keys = ...
    VolumeUp: Keys = ...
    W: Keys = ...
    X: Keys = ...
    XButton1: Keys = ...
    XButton2: Keys = ...
    Y: Keys = ...
    Z: Keys = ...
    Zoom: Keys = ...


class KeysConverter(TypeConverter, IComparer): # skipped bases: <type 'object'>
    """ KeysConverter() """
    pass

class Label(Control, IAutomationLiveRegion): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ Label() """
    @property
    def AutoEllipsis(self) -> bool:
        """
        Get: AutoEllipsis(self: Label) -> bool
        Set: AutoEllipsis(self: Label) = value
        """
        ...

    @property
    def BorderStyle(self) -> BorderStyle:
        """
        Get: BorderStyle(self: Label) -> BorderStyle
        Set: BorderStyle(self: Label) = value
        """
        ...

    @property
    def FlatStyle(self) -> FlatStyle:
        """
        Get: FlatStyle(self: Label) -> FlatStyle
        Set: FlatStyle(self: Label) = value
        """
        ...

    @property
    def Image(self) -> Image:
        """
        Get: Image(self: Label) -> Image
        Set: Image(self: Label) = value
        """
        ...

    @property
    def ImageAlign(self) -> ContentAlignment:
        """
        Get: ImageAlign(self: Label) -> ContentAlignment
        Set: ImageAlign(self: Label) = value
        """
        ...

    @property
    def ImageIndex(self) -> int:
        """
        Get: ImageIndex(self: Label) -> int
        Set: ImageIndex(self: Label) = value
        """
        ...

    @property
    def ImageKey(self) -> str:
        """
        Get: ImageKey(self: Label) -> str
        Set: ImageKey(self: Label) = value
        """
        ...

    @property
    def ImageList(self) -> ImageList:
        """
        Get: ImageList(self: Label) -> ImageList
        Set: ImageList(self: Label) = value
        """
        ...

    @property
    def PreferredHeight(self) -> int:
        """ Get: PreferredHeight(self: Label) -> int """
        ...

    @property
    def PreferredWidth(self) -> int:
        """ Get: PreferredWidth(self: Label) -> int """
        ...

    @property
    def RenderTransparent(self):
        ...

    @property
    def TextAlign(self) -> ContentAlignment:
        """
        Get: TextAlign(self: Label) -> ContentAlignment
        Set: TextAlign(self: Label) = value
        """
        ...

    @property
    def UseCompatibleTextRendering(self) -> bool:
        """
        Get: UseCompatibleTextRendering(self: Label) -> bool
        Set: UseCompatibleTextRendering(self: Label) = value
        """
        ...

    @property
    def UseMnemonic(self) -> bool:
        """
        Get: UseMnemonic(self: Label) -> bool
        Set: UseMnemonic(self: Label) = value
        """
        ...


    def CalcImageRenderBounds(self, *args): #cannot find CLR method
        """ CalcImageRenderBounds(self: Label, image: Image, r: Rectangle, align: ContentAlignment) -> Rectangle """
        ...

    def DrawImage(self, *args): #cannot find CLR method
        """ DrawImage(self: Label, g: Graphics, image: Image, r: Rectangle, align: ContentAlignment) """
        ...

    def OnTextAlignChanged(self, *args): #cannot find CLR method
        """ OnTextAlignChanged(self: Label, e: EventArgs) """
        ...

    def ToString(self) -> str:
        """ ToString(self: Label) -> str """
        ...

    AutoSizeChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    ImeModeChanged = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    TabStopChanged = ...
    TextAlignChanged = ...


class LabelEditEventArgs(EventArgs): # skipped bases: <type 'object'>
    """
    LabelEditEventArgs(item: int)
    LabelEditEventArgs(item: int, label: str)
    """
    @property
    def CancelEdit(self) -> bool:
        """
        Get: CancelEdit(self: LabelEditEventArgs) -> bool
        Set: CancelEdit(self: LabelEditEventArgs) = value
        """
        ...

    @property
    def Item(self) -> int:
        """ Get: Item(self: LabelEditEventArgs) -> int """
        ...

    @property
    def Label(self) -> str:
        """ Get: Label(self: LabelEditEventArgs) -> str """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __new__(cls, item:int, label:str = ...) -> Self:
        """
        __new__(cls: type, item: int)
        __new__(cls: type, item: int, label: str)
        """
        ...


class LabelEditEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ LabelEditEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:LabelEditEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: LabelEditEventHandler, sender: object, e: LabelEditEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: LabelEditEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:LabelEditEventArgs): # -> 
        """ Invoke(self: LabelEditEventHandler, sender: object, e: LabelEditEventArgs) """
        ...


class LayoutEventArgs(EventArgs): # skipped bases: <type 'object'>
    """
    LayoutEventArgs(affectedComponent: IComponent, affectedProperty: str)
    LayoutEventArgs(affectedControl: Control, affectedProperty: str)
    """
    @property
    def AffectedComponent(self) -> IComponent:
        """ Get: AffectedComponent(self: LayoutEventArgs) -> IComponent """
        ...

    @property
    def AffectedControl(self) -> Control:
        """ Get: AffectedControl(self: LayoutEventArgs) -> Control """
        ...

    @property
    def AffectedProperty(self) -> str:
        """ Get: AffectedProperty(self: LayoutEventArgs) -> str """
        ...


    def __new__(cls, *__args) -> Self:
        """
        __new__(cls: type, affectedComponent: IComponent, affectedProperty: str)
        __new__(cls: type, affectedControl: Control, affectedProperty: str)
        """
        ...


class LayoutEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ LayoutEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:LayoutEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: LayoutEventHandler, sender: object, e: LayoutEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: LayoutEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:LayoutEventArgs): # -> 
        """ Invoke(self: LayoutEventHandler, sender: object, e: LayoutEventArgs) """
        ...


class LeftRightAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum LeftRightAlignment, values: Left (0), Right (1) """
    Left: LeftRightAlignment = ...
    Right: LeftRightAlignment = ...
    value__ = ...


class LinkArea: # skipped bases: <type 'object'>, <type 'object'>
    """ LinkArea(start: int, length: int) """
    @property
    def IsEmpty(self) -> bool:
        """ Get: IsEmpty(self: LinkArea) -> bool """
        ...

    @property
    def Length(self) -> int:
        """
        Get: Length(self: LinkArea) -> int
        Set: Length(self: LinkArea) = value
        """
        ...

    @property
    def Start(self) -> int:
        """
        Get: Start(self: LinkArea) -> int
        Set: Start(self: LinkArea) = value
        """
        ...


    def Equals(self, o:object) -> bool:
        """ Equals(self: LinkArea, o: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: LinkArea) -> int """
        ...

    def LinkAreaConverter(self, *args): #cannot find CLR method
        """ LinkAreaConverter() """
        ...

    def ToString(self) -> str:
        """ ToString(self: LinkArea) -> str """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...



class LinkBehavior(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum LinkBehavior, values: AlwaysUnderline (1), HoverUnderline (2), NeverUnderline (3), SystemDefault (0) """
    AlwaysUnderline: LinkBehavior = ...
    HoverUnderline: LinkBehavior = ...
    NeverUnderline: LinkBehavior = ...
    SystemDefault: LinkBehavior = ...
    value__ = ...


class LinkClickedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ LinkClickedEventArgs(linkText: str) """
    @property
    def LinkText(self) -> str:
        """ Get: LinkText(self: LinkClickedEventArgs) -> str """
        ...


    def __new__(cls, linkText:str) -> Self:
        """ __new__(cls: type, linkText: str) """
        ...


class LinkClickedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ LinkClickedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:LinkClickedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: LinkClickedEventHandler, sender: object, e: LinkClickedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: LinkClickedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:LinkClickedEventArgs): # -> 
        """ Invoke(self: LinkClickedEventHandler, sender: object, e: LinkClickedEventArgs) """
        ...


class LinkConverter(TypeConverter): # skipped bases: <type 'object'>
    """ LinkConverter() """
    pass

class LinkLabel(IButtonControl, Label): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IAutomationLiveRegion'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'object'>
    """ LinkLabel() """
    @property
    def ActiveLinkColor(self) -> Color:
        """
        Get: ActiveLinkColor(self: LinkLabel) -> Color
        Set: ActiveLinkColor(self: LinkLabel) = value
        """
        ...

    @property
    def DisabledLinkColor(self) -> Color:
        """
        Get: DisabledLinkColor(self: LinkLabel) -> Color
        Set: DisabledLinkColor(self: LinkLabel) = value
        """
        ...

    @property
    def LinkArea(self) -> LinkArea:
        """
        Get: LinkArea(self: LinkLabel) -> LinkArea
        Set: LinkArea(self: LinkLabel) = value
        """
        ...

    @property
    def LinkBehavior(self) -> LinkBehavior:
        """
        Get: LinkBehavior(self: LinkLabel) -> LinkBehavior
        Set: LinkBehavior(self: LinkLabel) = value
        """
        ...

    @property
    def LinkColor(self) -> Color:
        """
        Get: LinkColor(self: LinkLabel) -> Color
        Set: LinkColor(self: LinkLabel) = value
        """
        ...

    @property
    def Links(self): # -> LinkCollection
        """ Get: Links(self: LinkLabel) -> LinkCollection """
        ...

    @property
    def LinkVisited(self) -> bool:
        """
        Get: LinkVisited(self: LinkLabel) -> bool
        Set: LinkVisited(self: LinkLabel) = value
        """
        ...

    @property
    def OverrideCursor(self):
        ...

    @property
    def Padding(self): # -> Padding
        """
        Get: Padding(self: LinkLabel) -> Padding
        Set: Padding(self: LinkLabel) = value
        """
        ...

    @property
    def VisitedLinkColor(self) -> Color:
        """
        Get: VisitedLinkColor(self: LinkLabel) -> Color
        Set: VisitedLinkColor(self: LinkLabel) = value
        """
        ...


    def Link(self, *args): #cannot find CLR method
        """
        Link()
        Link(start: int, length: int)
        Link(start: int, length: int, linkData: object)
        """
        ...

    def LinkCollection(self, *args): #cannot find CLR method
        """ LinkCollection(owner: LinkLabel) """
        ...

    def OnLinkClicked(self, *args): #cannot find CLR method
        """ OnLinkClicked(self: LinkLabel, e: LinkLabelLinkClickedEventArgs) """
        ...

    def PointInLink(self, *args): #cannot find CLR method
        """ PointInLink(self: LinkLabel, x: int, y: int) -> Link """
        ...

    LinkClicked = ...
    TabStopChanged = ...


class LinkLabelLinkClickedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """
    LinkLabelLinkClickedEventArgs(link: Link)
    LinkLabelLinkClickedEventArgs(link: Link, button: MouseButtons)
    """
    @property
    def Button(self): # -> MouseButtons
        """ Get: Button(self: LinkLabelLinkClickedEventArgs) -> MouseButtons """
        ...

    @property
    def Link(self) -> Link:
        """ Get: Link(self: LinkLabelLinkClickedEventArgs) -> Link """
        ...


    def __new__(cls, link:Link, button = ...) -> Self: # Not found arg types: {'button': 'MouseButtons'}
        """
        __new__(cls: type, link: Link)
        __new__(cls: type, link: Link, button: MouseButtons)
        """
        ...


class LinkLabelLinkClickedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ LinkLabelLinkClickedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:LinkLabelLinkClickedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: LinkLabelLinkClickedEventHandler, sender: object, e: LinkLabelLinkClickedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: LinkLabelLinkClickedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:LinkLabelLinkClickedEventArgs): # -> 
        """ Invoke(self: LinkLabelLinkClickedEventHandler, sender: object, e: LinkLabelLinkClickedEventArgs) """
        ...


class LinkState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum LinkState, values: Active (2), Hover (1), Normal (0), Visited (4) """
    Active: LinkState = ...
    Hover: LinkState = ...
    Normal: LinkState = ...
    value__ = ...
    Visited: LinkState = ...


class ListBindingConverter(TypeConverter): # skipped bases: <type 'object'>
    """ ListBindingConverter() """
    pass

class ListBindingHelper: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @staticmethod
    def GetList(*__args:object) -> object:
        """
        GetList(list: object) -> object
        GetList(dataSource: object, dataMember: str) -> object
        """
        ...

    @staticmethod
    def GetListItemProperties(*__args:object) -> PropertyDescriptorCollection:
        """
        GetListItemProperties(list: object, listAccessors: Array[PropertyDescriptor]) -> PropertyDescriptorCollection
        GetListItemProperties(list: object) -> PropertyDescriptorCollection
        GetListItemProperties(dataSource: object, dataMember: str, listAccessors: Array[PropertyDescriptor]) -> PropertyDescriptorCollection
        """
        ...

    @staticmethod
    def GetListItemType(*__args:object) -> Type:
        """
        GetListItemType(list: object) -> Type
        GetListItemType(dataSource: object, dataMember: str) -> Type
        """
        ...

    @staticmethod
    def GetListName(list:object, listAccessors:Array) -> str:
        """ GetListName(list: object, listAccessors: Array[PropertyDescriptor]) -> str """
        ...

    __all__: list = ...


class ListControlConvertEventArgs(ConvertEventArgs): # skipped bases: <type 'object'>
    """ ListControlConvertEventArgs(value: object, desiredType: Type, listItem: object) """
    @property
    def ListItem(self) -> object:
        """ Get: ListItem(self: ListControlConvertEventArgs) -> object """
        ...



class ListControlConvertEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ListControlConvertEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ListControlConvertEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ListControlConvertEventHandler, sender: object, e: ListControlConvertEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ListControlConvertEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ListControlConvertEventArgs): # -> 
        """ Invoke(self: ListControlConvertEventHandler, sender: object, e: ListControlConvertEventArgs) """
        ...


class ListView(Control): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ ListView() """
    @property
    def Activation(self) -> ItemActivation:
        """
        Get: Activation(self: ListView) -> ItemActivation
        Set: Activation(self: ListView) = value
        """
        ...

    @property
    def Alignment(self): # -> ListViewAlignment
        """
        Get: Alignment(self: ListView) -> ListViewAlignment
        Set: Alignment(self: ListView) = value
        """
        ...

    @property
    def AllowColumnReorder(self) -> bool:
        """
        Get: AllowColumnReorder(self: ListView) -> bool
        Set: AllowColumnReorder(self: ListView) = value
        """
        ...

    @property
    def AutoArrange(self) -> bool:
        """
        Get: AutoArrange(self: ListView) -> bool
        Set: AutoArrange(self: ListView) = value
        """
        ...

    @property
    def BackgroundImageTiled(self) -> bool:
        """
        Get: BackgroundImageTiled(self: ListView) -> bool
        Set: BackgroundImageTiled(self: ListView) = value
        """
        ...

    @property
    def BorderStyle(self) -> BorderStyle:
        """
        Get: BorderStyle(self: ListView) -> BorderStyle
        Set: BorderStyle(self: ListView) = value
        """
        ...

    @property
    def CheckBoxes(self) -> bool:
        """
        Get: CheckBoxes(self: ListView) -> bool
        Set: CheckBoxes(self: ListView) = value
        """
        ...

    @property
    def CheckedIndices(self): # -> CheckedIndexCollection
        """ Get: CheckedIndices(self: ListView) -> CheckedIndexCollection """
        ...

    @property
    def CheckedItems(self): # -> CheckedListViewItemCollection
        """ Get: CheckedItems(self: ListView) -> CheckedListViewItemCollection """
        ...

    @property
    def Columns(self): # -> ColumnHeaderCollection
        """ Get: Columns(self: ListView) -> ColumnHeaderCollection """
        ...

    @property
    def FocusedItem(self) -> ListViewItem:
        """
        Get: FocusedItem(self: ListView) -> ListViewItem
        Set: FocusedItem(self: ListView) = value
        """
        ...

    @property
    def FullRowSelect(self) -> bool:
        """
        Get: FullRowSelect(self: ListView) -> bool
        Set: FullRowSelect(self: ListView) = value
        """
        ...

    @property
    def GridLines(self) -> bool:
        """
        Get: GridLines(self: ListView) -> bool
        Set: GridLines(self: ListView) = value
        """
        ...

    @property
    def Groups(self): # -> ListViewGroupCollection
        """ Get: Groups(self: ListView) -> ListViewGroupCollection """
        ...

    @property
    def HeaderStyle(self) -> ColumnHeaderStyle:
        """
        Get: HeaderStyle(self: ListView) -> ColumnHeaderStyle
        Set: HeaderStyle(self: ListView) = value
        """
        ...

    @property
    def HideSelection(self) -> bool:
        """
        Get: HideSelection(self: ListView) -> bool
        Set: HideSelection(self: ListView) = value
        """
        ...

    @property
    def HotTracking(self) -> bool:
        """
        Get: HotTracking(self: ListView) -> bool
        Set: HotTracking(self: ListView) = value
        """
        ...

    @property
    def HoverSelection(self) -> bool:
        """
        Get: HoverSelection(self: ListView) -> bool
        Set: HoverSelection(self: ListView) = value
        """
        ...

    @property
    def InsertionMark(self): # -> ListViewInsertionMark
        """ Get: InsertionMark(self: ListView) -> ListViewInsertionMark """
        ...

    @property
    def Items(self): # -> ListViewItemCollection
        """ Get: Items(self: ListView) -> ListViewItemCollection """
        ...

    @property
    def LabelEdit(self) -> bool:
        """
        Get: LabelEdit(self: ListView) -> bool
        Set: LabelEdit(self: ListView) = value
        """
        ...

    @property
    def LabelWrap(self) -> bool:
        """
        Get: LabelWrap(self: ListView) -> bool
        Set: LabelWrap(self: ListView) = value
        """
        ...

    @property
    def LargeImageList(self) -> ImageList:
        """
        Get: LargeImageList(self: ListView) -> ImageList
        Set: LargeImageList(self: ListView) = value
        """
        ...

    @property
    def ListViewItemSorter(self) -> IComparer:
        """
        Get: ListViewItemSorter(self: ListView) -> IComparer
        Set: ListViewItemSorter(self: ListView) = value
        """
        ...

    @property
    def MultiSelect(self) -> bool:
        """
        Get: MultiSelect(self: ListView) -> bool
        Set: MultiSelect(self: ListView) = value
        """
        ...

    @property
    def OwnerDraw(self) -> bool:
        """
        Get: OwnerDraw(self: ListView) -> bool
        Set: OwnerDraw(self: ListView) = value
        """
        ...

    @property
    def RightToLeftLayout(self) -> bool:
        """
        Get: RightToLeftLayout(self: ListView) -> bool
        Set: RightToLeftLayout(self: ListView) = value
        """
        ...

    @property
    def Scrollable(self) -> bool:
        """
        Get: Scrollable(self: ListView) -> bool
        Set: Scrollable(self: ListView) = value
        """
        ...

    @property
    def SelectedIndices(self): # -> SelectedIndexCollection
        """ Get: SelectedIndices(self: ListView) -> SelectedIndexCollection """
        ...

    @property
    def SelectedItems(self): # -> SelectedListViewItemCollection
        """ Get: SelectedItems(self: ListView) -> SelectedListViewItemCollection """
        ...

    @property
    def ShowGroups(self) -> bool:
        """
        Get: ShowGroups(self: ListView) -> bool
        Set: ShowGroups(self: ListView) = value
        """
        ...

    @property
    def ShowItemToolTips(self) -> bool:
        """
        Get: ShowItemToolTips(self: ListView) -> bool
        Set: ShowItemToolTips(self: ListView) = value
        """
        ...

    @property
    def SmallImageList(self) -> ImageList:
        """
        Get: SmallImageList(self: ListView) -> ImageList
        Set: SmallImageList(self: ListView) = value
        """
        ...

    @property
    def Sorting(self) -> SortOrder:
        """
        Get: Sorting(self: ListView) -> SortOrder
        Set: Sorting(self: ListView) = value
        """
        ...

    @property
    def StateImageList(self) -> ImageList:
        """
        Get: StateImageList(self: ListView) -> ImageList
        Set: StateImageList(self: ListView) = value
        """
        ...

    @property
    def TileSize(self) -> Size:
        """
        Get: TileSize(self: ListView) -> Size
        Set: TileSize(self: ListView) = value
        """
        ...

    @property
    def TopItem(self) -> ListViewItem:
        """
        Get: TopItem(self: ListView) -> ListViewItem
        Set: TopItem(self: ListView) = value
        """
        ...

    @property
    def UseCompatibleStateImageBehavior(self) -> bool:
        """
        Get: UseCompatibleStateImageBehavior(self: ListView) -> bool
        Set: UseCompatibleStateImageBehavior(self: ListView) = value
        """
        ...

    @property
    def View(self) -> View:
        """
        Get: View(self: ListView) -> View
        Set: View(self: ListView) = value
        """
        ...

    @property
    def VirtualListSize(self) -> int:
        """
        Get: VirtualListSize(self: ListView) -> int
        Set: VirtualListSize(self: ListView) = value
        """
        ...

    @property
    def VirtualMode(self) -> bool:
        """
        Get: VirtualMode(self: ListView) -> bool
        Set: VirtualMode(self: ListView) = value
        """
        ...


    def ArrangeIcons(self, value = ...): # ->  # Not found arg types: {'value': 'ListViewAlignment'}
        """ ArrangeIcons(self: ListView, value: ListViewAlignment)ArrangeIcons(self: ListView) """
        ...

    def AutoResizeColumn(self, columnIndex:int, headerAutoResize:ColumnHeaderAutoResizeStyle): # -> 
        """ AutoResizeColumn(self: ListView, columnIndex: int, headerAutoResize: ColumnHeaderAutoResizeStyle) """
        ...

    def AutoResizeColumns(self, headerAutoResize:ColumnHeaderAutoResizeStyle): # -> 
        """ AutoResizeColumns(self: ListView, headerAutoResize: ColumnHeaderAutoResizeStyle) """
        ...

    def BeginUpdate(self): # -> 
        """ BeginUpdate(self: ListView) """
        ...

    def CheckedIndexCollection(self, *args): #cannot find CLR method
        """ CheckedIndexCollection(owner: ListView) """
        ...

    def CheckedListViewItemCollection(self, *args): #cannot find CLR method
        """ CheckedListViewItemCollection(owner: ListView) """
        ...

    def Clear(self): # -> 
        """ Clear(self: ListView) """
        ...

    def ColumnHeaderCollection(self, *args): #cannot find CLR method
        """ ColumnHeaderCollection(owner: ListView) """
        ...

    def EndUpdate(self): # -> 
        """ EndUpdate(self: ListView) """
        ...

    def EnsureVisible(self, index:int): # -> 
        """ EnsureVisible(self: ListView, index: int) """
        ...

    def FindItemWithText(self, text:str, includeSubItemsInSearch:bool = ..., startIndex:int = ..., isPrefixSearch:bool = ...) -> ListViewItem:
        """
        FindItemWithText(self: ListView, text: str) -> ListViewItem
        FindItemWithText(self: ListView, text: str, includeSubItemsInSearch: bool, startIndex: int) -> ListViewItem
        FindItemWithText(self: ListView, text: str, includeSubItemsInSearch: bool, startIndex: int, isPrefixSearch: bool) -> ListViewItem
        """
        ...

    def FindNearestItem(self, *__args) -> ListViewItem:
        """
        FindNearestItem(self: ListView, dir: SearchDirectionHint, point: Point) -> ListViewItem
        FindNearestItem(self: ListView, searchDirection: SearchDirectionHint, x: int, y: int) -> ListViewItem
        """
        ...

    def GetItemAt(self, x:int, y:int) -> ListViewItem:
        """ GetItemAt(self: ListView, x: int, y: int) -> ListViewItem """
        ...

    def GetItemRect(self, index:int, portion:ItemBoundsPortion = ...) -> Rectangle:
        """
        GetItemRect(self: ListView, index: int) -> Rectangle
        GetItemRect(self: ListView, index: int, portion: ItemBoundsPortion) -> Rectangle
        """
        ...

    def HitTest(self, *__args:Point): # -> ListViewHitTestInfo
        """
        HitTest(self: ListView, point: Point) -> ListViewHitTestInfo
        HitTest(self: ListView, x: int, y: int) -> ListViewHitTestInfo
        """
        ...

    def ListViewItemCollection(self, *args): #cannot find CLR method
        """ ListViewItemCollection(owner: ListView) """
        ...

    def OnAfterLabelEdit(self, *args): #cannot find CLR method
        """ OnAfterLabelEdit(self: ListView, e: LabelEditEventArgs) """
        ...

    def OnBeforeLabelEdit(self, *args): #cannot find CLR method
        """ OnBeforeLabelEdit(self: ListView, e: LabelEditEventArgs) """
        ...

    def OnCacheVirtualItems(self, *args): #cannot find CLR method
        """ OnCacheVirtualItems(self: ListView, e: CacheVirtualItemsEventArgs) """
        ...

    def OnColumnClick(self, *args): #cannot find CLR method
        """ OnColumnClick(self: ListView, e: ColumnClickEventArgs) """
        ...

    def OnColumnReordered(self, *args): #cannot find CLR method
        """ OnColumnReordered(self: ListView, e: ColumnReorderedEventArgs) """
        ...

    def OnColumnWidthChanged(self, *args): #cannot find CLR method
        """ OnColumnWidthChanged(self: ListView, e: ColumnWidthChangedEventArgs) """
        ...

    def OnColumnWidthChanging(self, *args): #cannot find CLR method
        """ OnColumnWidthChanging(self: ListView, e: ColumnWidthChangingEventArgs) """
        ...

    def OnDrawColumnHeader(self, *args): #cannot find CLR method
        """ OnDrawColumnHeader(self: ListView, e: DrawListViewColumnHeaderEventArgs) """
        ...

    def OnDrawItem(self, *args): #cannot find CLR method
        """ OnDrawItem(self: ListView, e: DrawListViewItemEventArgs) """
        ...

    def OnDrawSubItem(self, *args): #cannot find CLR method
        """ OnDrawSubItem(self: ListView, e: DrawListViewSubItemEventArgs) """
        ...

    def OnItemActivate(self, *args): #cannot find CLR method
        """ OnItemActivate(self: ListView, e: EventArgs) """
        ...

    def OnItemCheck(self, *args): #cannot find CLR method
        """ OnItemCheck(self: ListView, ice: ItemCheckEventArgs) """
        ...

    def OnItemChecked(self, *args): #cannot find CLR method
        """ OnItemChecked(self: ListView, e: ItemCheckedEventArgs) """
        ...

    def OnItemDrag(self, *args): #cannot find CLR method
        """ OnItemDrag(self: ListView, e: ItemDragEventArgs) """
        ...

    def OnItemMouseHover(self, *args): #cannot find CLR method
        """ OnItemMouseHover(self: ListView, e: ListViewItemMouseHoverEventArgs) """
        ...

    def OnItemSelectionChanged(self, *args): #cannot find CLR method
        """ OnItemSelectionChanged(self: ListView, e: ListViewItemSelectionChangedEventArgs) """
        ...

    def OnRetrieveVirtualItem(self, *args): #cannot find CLR method
        """ OnRetrieveVirtualItem(self: ListView, e: RetrieveVirtualItemEventArgs) """
        ...

    def OnRightToLeftLayoutChanged(self, *args): #cannot find CLR method
        """ OnRightToLeftLayoutChanged(self: ListView, e: EventArgs) """
        ...

    def OnSearchForVirtualItem(self, *args): #cannot find CLR method
        """ OnSearchForVirtualItem(self: ListView, e: SearchForVirtualItemEventArgs) """
        ...

    def OnSelectedIndexChanged(self, *args): #cannot find CLR method
        """ OnSelectedIndexChanged(self: ListView, e: EventArgs) """
        ...

    def OnVirtualItemsSelectionRangeChanged(self, *args): #cannot find CLR method
        """ OnVirtualItemsSelectionRangeChanged(self: ListView, e: ListViewVirtualItemsSelectionRangeChangedEventArgs) """
        ...

    def RealizeProperties(self, *args): #cannot find CLR method
        """ RealizeProperties(self: ListView) """
        ...

    def RedrawItems(self, startIndex:int, endIndex:int, invalidateOnly:bool): # -> 
        """ RedrawItems(self: ListView, startIndex: int, endIndex: int, invalidateOnly: bool) """
        ...

    def SelectedIndexCollection(self, *args): #cannot find CLR method
        """ SelectedIndexCollection(owner: ListView) """
        ...

    def SelectedListViewItemCollection(self, *args): #cannot find CLR method
        """ SelectedListViewItemCollection(owner: ListView) """
        ...

    def Sort(self): # -> 
        """ Sort(self: ListView) """
        ...

    def ToString(self) -> str:
        """ ToString(self: ListView) -> str """
        ...

    def UpdateExtendedStyles(self, *args): #cannot find CLR method
        """ UpdateExtendedStyles(self: ListView) """
        ...

    AfterLabelEdit = ...
    BackgroundImageLayoutChanged = ...
    BeforeLabelEdit = ...
    CacheVirtualItems = ...
    ColumnClick = ...
    ColumnReordered = ...
    ColumnWidthChanged = ...
    ColumnWidthChanging = ...
    DrawColumnHeader = ...
    DrawItem = ...
    DrawSubItem = ...
    ItemActivate = ...
    ItemCheck = ...
    ItemChecked = ...
    ItemDrag = ...
    ItemMouseHover = ...
    ItemSelectionChanged = ...
    PaddingChanged = ...
    Paint = ...
    RetrieveVirtualItem = ...
    RightToLeftLayoutChanged = ...
    SearchForVirtualItem = ...
    SelectedIndexChanged = ...
    TextChanged = ...
    VirtualItemsSelectionRangeChanged = ...


class ListViewAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ListViewAlignment, values: Default (0), Left (1), SnapToGrid (5), Top (2) """
    Default: ListViewAlignment = ...
    Left: ListViewAlignment = ...
    SnapToGrid: ListViewAlignment = ...
    Top: ListViewAlignment = ...
    value__ = ...


class ListViewGroup(ISerializable): # skipped bases: <type 'object'>
    """
    ListViewGroup()
    ListViewGroup(key: str, headerText: str)
    ListViewGroup(header: str)
    ListViewGroup(header: str, headerAlignment: HorizontalAlignment)
    """
    @property
    def Header(self) -> str:
        """
        Get: Header(self: ListViewGroup) -> str
        Set: Header(self: ListViewGroup) = value
        """
        ...

    @property
    def HeaderAlignment(self) -> HorizontalAlignment:
        """
        Get: HeaderAlignment(self: ListViewGroup) -> HorizontalAlignment
        Set: HeaderAlignment(self: ListViewGroup) = value
        """
        ...

    @property
    def Items(self): # -> ListViewItemCollection
        """ Get: Items(self: ListViewGroup) -> ListViewItemCollection """
        ...

    @property
    def ListView(self) -> ListView:
        """ Get: ListView(self: ListViewGroup) -> ListView """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ListViewGroup) -> str
        Set: Name(self: ListViewGroup) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: ListViewGroup) -> object
        Set: Tag(self: ListViewGroup) = value
        """
        ...


    def ToString(self) -> str:
        """ ToString(self: ListViewGroup) -> str """
        ...


class ListViewGroupCollection(IList): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Count(self) -> int:
        """ Get: Count(self: ListViewGroupCollection) -> int """
        ...


    def AddRange(self, groups:Array): # -> 
        """ AddRange(self: ListViewGroupCollection, groups: Array[ListViewGroup])AddRange(self: ListViewGroupCollection, groups: ListViewGroupCollection) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: ListViewGroupCollection, array: Array, index: int) """
        ...

    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: ListViewGroupCollection) -> IEnumerator """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ Contains(self: IList, value: object) -> bool """
        ...


class ListViewHitTestInfo: # skipped bases: <type 'object'>, <type 'object'>
    """ ListViewHitTestInfo(hitItem: ListViewItem, hitSubItem: ListViewSubItem, hitLocation: ListViewHitTestLocations) """
    @property
    def Item(self) -> ListViewItem:
        """ Get: Item(self: ListViewHitTestInfo) -> ListViewItem """
        ...

    @property
    def Location(self): # -> ListViewHitTestLocations
        """ Get: Location(self: ListViewHitTestInfo) -> ListViewHitTestLocations """
        ...

    @property
    def SubItem(self): # -> ListViewSubItem
        """ Get: SubItem(self: ListViewHitTestInfo) -> ListViewSubItem """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ListViewHitTestLocations(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) ListViewHitTestLocations, values: AboveClientArea (256), BelowClientArea (16), Image (2), Label (4), LeftOfClientArea (64), None (1), RightOfClientArea (32), StateImage (512) """
    AboveClientArea: ListViewHitTestLocations = ...
    BelowClientArea: ListViewHitTestLocations = ...
    Image: ListViewHitTestLocations = ...
    Label: ListViewHitTestLocations = ...
    LeftOfClientArea: ListViewHitTestLocations = ...
    RightOfClientArea: ListViewHitTestLocations = ...
    StateImage: ListViewHitTestLocations = ...
    value__ = ...


class ListViewInsertionMark: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AppearsAfterItem(self) -> bool:
        """
        Get: AppearsAfterItem(self: ListViewInsertionMark) -> bool
        Set: AppearsAfterItem(self: ListViewInsertionMark) = value
        """
        ...

    @property
    def Bounds(self) -> Rectangle:
        """ Get: Bounds(self: ListViewInsertionMark) -> Rectangle """
        ...

    @property
    def Color(self) -> Color:
        """
        Get: Color(self: ListViewInsertionMark) -> Color
        Set: Color(self: ListViewInsertionMark) = value
        """
        ...

    @property
    def Index(self) -> int:
        """
        Get: Index(self: ListViewInsertionMark) -> int
        Set: Index(self: ListViewInsertionMark) = value
        """
        ...


    def NearestIndex(self, pt:Point) -> int:
        """ NearestIndex(self: ListViewInsertionMark, pt: Point) -> int """
        ...


class ListViewItem(ICloneable, ISerializable): # skipped bases: <type 'object'>
    """
    ListViewItem()
    ListViewItem(text: str)
    ListViewItem(text: str, imageIndex: int)
    ListViewItem(items: Array[str])
    ListViewItem(items: Array[str], imageIndex: int)
    ListViewItem(items: Array[str], imageIndex: int, foreColor: Color, backColor: Color, font: Font)
    ListViewItem(subItems: Array[ListViewSubItem], imageIndex: int)
    ListViewItem(group: ListViewGroup)
    ListViewItem(text: str, group: ListViewGroup)
    ListViewItem(text: str, imageIndex: int, group: ListViewGroup)
    ListViewItem(items: Array[str], group: ListViewGroup)
    ListViewItem(items: Array[str], imageIndex: int, group: ListViewGroup)
    ListViewItem(items: Array[str], imageIndex: int, foreColor: Color, backColor: Color, font: Font, group: ListViewGroup)
    ListViewItem(subItems: Array[ListViewSubItem], imageIndex: int, group: ListViewGroup)
    ListViewItem(text: str, imageKey: str)
    ListViewItem(items: Array[str], imageKey: str)
    ListViewItem(items: Array[str], imageKey: str, foreColor: Color, backColor: Color, font: Font)
    ListViewItem(subItems: Array[ListViewSubItem], imageKey: str)
    ListViewItem(text: str, imageKey: str, group: ListViewGroup)
    ListViewItem(items: Array[str], imageKey: str, group: ListViewGroup)
    ListViewItem(items: Array[str], imageKey: str, foreColor: Color, backColor: Color, font: Font, group: ListViewGroup)
    ListViewItem(subItems: Array[ListViewSubItem], imageKey: str, group: ListViewGroup)
    """
    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: ListViewItem) -> Color
        Set: BackColor(self: ListViewItem) = value
        """
        ...

    @property
    def Bounds(self) -> Rectangle:
        """ Get: Bounds(self: ListViewItem) -> Rectangle """
        ...

    @property
    def Checked(self) -> bool:
        """
        Get: Checked(self: ListViewItem) -> bool
        Set: Checked(self: ListViewItem) = value
        """
        ...

    @property
    def Focused(self) -> bool:
        """
        Get: Focused(self: ListViewItem) -> bool
        Set: Focused(self: ListViewItem) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: ListViewItem) -> Font
        Set: Font(self: ListViewItem) = value
        """
        ...

    @property
    def ForeColor(self) -> Color:
        """
        Get: ForeColor(self: ListViewItem) -> Color
        Set: ForeColor(self: ListViewItem) = value
        """
        ...

    @property
    def Group(self) -> ListViewGroup:
        """
        Get: Group(self: ListViewItem) -> ListViewGroup
        Set: Group(self: ListViewItem) = value
        """
        ...

    @property
    def ImageIndex(self) -> int:
        """
        Get: ImageIndex(self: ListViewItem) -> int
        Set: ImageIndex(self: ListViewItem) = value
        """
        ...

    @property
    def ImageKey(self) -> str:
        """
        Get: ImageKey(self: ListViewItem) -> str
        Set: ImageKey(self: ListViewItem) = value
        """
        ...

    @property
    def ImageList(self) -> ImageList:
        """ Get: ImageList(self: ListViewItem) -> ImageList """
        ...

    @property
    def IndentCount(self) -> int:
        """
        Get: IndentCount(self: ListViewItem) -> int
        Set: IndentCount(self: ListViewItem) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ListViewItem) -> int """
        ...

    @property
    def ListView(self) -> ListView:
        """ Get: ListView(self: ListViewItem) -> ListView """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ListViewItem) -> str
        Set: Name(self: ListViewItem) = value
        """
        ...

    @property
    def Position(self) -> Point:
        """
        Get: Position(self: ListViewItem) -> Point
        Set: Position(self: ListViewItem) = value
        """
        ...

    @property
    def Selected(self) -> bool:
        """
        Get: Selected(self: ListViewItem) -> bool
        Set: Selected(self: ListViewItem) = value
        """
        ...

    @property
    def StateImageIndex(self) -> int:
        """
        Get: StateImageIndex(self: ListViewItem) -> int
        Set: StateImageIndex(self: ListViewItem) = value
        """
        ...

    @property
    def SubItems(self): # -> ListViewSubItemCollection
        """ Get: SubItems(self: ListViewItem) -> ListViewSubItemCollection """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: ListViewItem) -> object
        Set: Tag(self: ListViewItem) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: ListViewItem) -> str
        Set: Text(self: ListViewItem) = value
        """
        ...

    @property
    def ToolTipText(self) -> str:
        """
        Get: ToolTipText(self: ListViewItem) -> str
        Set: ToolTipText(self: ListViewItem) = value
        """
        ...

    @property
    def UseItemStyleForSubItems(self) -> bool:
        """
        Get: UseItemStyleForSubItems(self: ListViewItem) -> bool
        Set: UseItemStyleForSubItems(self: ListViewItem) = value
        """
        ...


    def BeginEdit(self): # -> 
        """ BeginEdit(self: ListViewItem) """
        ...

    def Deserialize(self, *args): #cannot find CLR method
        """ Deserialize(self: ListViewItem, info: SerializationInfo, context: StreamingContext) """
        ...

    def EnsureVisible(self): # -> 
        """ EnsureVisible(self: ListViewItem) """
        ...

    def FindNearestItem(self, searchDirection) -> ListViewItem: # Not found arg types: {'searchDirection': 'SearchDirectionHint'}
        """ FindNearestItem(self: ListViewItem, searchDirection: SearchDirectionHint) -> ListViewItem """
        ...

    def GetBounds(self, portion:ItemBoundsPortion) -> Rectangle:
        """ GetBounds(self: ListViewItem, portion: ItemBoundsPortion) -> Rectangle """
        ...

    def GetSubItemAt(self, x:int, y:int): # -> ListViewSubItem
        """ GetSubItemAt(self: ListViewItem, x: int, y: int) -> ListViewSubItem """
        ...

    def ListViewSubItem(self, *args): #cannot find CLR method
        """
        ListViewSubItem()
        ListViewSubItem(owner: ListViewItem, text: str)
        ListViewSubItem(owner: ListViewItem, text: str, foreColor: Color, backColor: Color, font: Font)
        """
        ...

    def ListViewSubItemCollection(self, *args): #cannot find CLR method
        """ ListViewSubItemCollection(owner: ListViewItem) """
        ...

    def Remove(self): # -> 
        """ Remove(self: ListViewItem) """
        ...

    def Serialize(self, *args): #cannot find CLR method
        """ Serialize(self: ListViewItem, info: SerializationInfo, context: StreamingContext) """
        ...

    def ToString(self) -> str:
        """ ToString(self: ListViewItem) -> str """
        ...



class ListViewItemConverter(ExpandableObjectConverter): # skipped bases: <type 'object'>
    """ ListViewItemConverter() """
    def CanConvertTo(self, *__args) -> bool:
        """ CanConvertTo(self: ListViewItemConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool """
        ...

    def ConvertTo(self, *__args) -> object:
        """ ConvertTo(self: ListViewItemConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object """
        ...


class ListViewItemMouseHoverEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ ListViewItemMouseHoverEventArgs(item: ListViewItem) """
    @property
    def Item(self) -> ListViewItem:
        """ Get: Item(self: ListViewItemMouseHoverEventArgs) -> ListViewItem """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __new__(cls, item:ListViewItem) -> Self:
        """ __new__(cls: type, item: ListViewItem) """
        ...


class ListViewItemMouseHoverEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ListViewItemMouseHoverEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ListViewItemMouseHoverEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ListViewItemMouseHoverEventHandler, sender: object, e: ListViewItemMouseHoverEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ListViewItemMouseHoverEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ListViewItemMouseHoverEventArgs): # -> 
        """ Invoke(self: ListViewItemMouseHoverEventHandler, sender: object, e: ListViewItemMouseHoverEventArgs) """
        ...


class ListViewItemSelectionChangedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ ListViewItemSelectionChangedEventArgs(item: ListViewItem, itemIndex: int, isSelected: bool) """
    @property
    def IsSelected(self) -> bool:
        """ Get: IsSelected(self: ListViewItemSelectionChangedEventArgs) -> bool """
        ...

    @property
    def Item(self) -> ListViewItem:
        """ Get: Item(self: ListViewItemSelectionChangedEventArgs) -> ListViewItem """
        ...

    @property
    def ItemIndex(self) -> int:
        """ Get: ItemIndex(self: ListViewItemSelectionChangedEventArgs) -> int """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __new__(cls, item:ListViewItem, itemIndex:int, isSelected:bool) -> Self:
        """ __new__(cls: type, item: ListViewItem, itemIndex: int, isSelected: bool) """
        ...


class ListViewItemSelectionChangedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ListViewItemSelectionChangedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ListViewItemSelectionChangedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ListViewItemSelectionChangedEventHandler, sender: object, e: ListViewItemSelectionChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ListViewItemSelectionChangedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ListViewItemSelectionChangedEventArgs): # -> 
        """ Invoke(self: ListViewItemSelectionChangedEventHandler, sender: object, e: ListViewItemSelectionChangedEventArgs) """
        ...


class ListViewItemStates(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) ListViewItemStates, values: Checked (8), Default (32), Focused (16), Grayed (2), Hot (64), Indeterminate (256), Marked (128), Selected (1), ShowKeyboardCues (512) """
    Checked: ListViewItemStates = ...
    Default: ListViewItemStates = ...
    Focused: ListViewItemStates = ...
    Grayed: ListViewItemStates = ...
    Hot: ListViewItemStates = ...
    Indeterminate: ListViewItemStates = ...
    Marked: ListViewItemStates = ...
    Selected: ListViewItemStates = ...
    ShowKeyboardCues: ListViewItemStates = ...
    value__ = ...


class ListViewVirtualItemsSelectionRangeChangedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ ListViewVirtualItemsSelectionRangeChangedEventArgs(startIndex: int, endIndex: int, isSelected: bool) """
    @property
    def EndIndex(self) -> int:
        """ Get: EndIndex(self: ListViewVirtualItemsSelectionRangeChangedEventArgs) -> int """
        ...

    @property
    def IsSelected(self) -> bool:
        """ Get: IsSelected(self: ListViewVirtualItemsSelectionRangeChangedEventArgs) -> bool """
        ...

    @property
    def StartIndex(self) -> int:
        """ Get: StartIndex(self: ListViewVirtualItemsSelectionRangeChangedEventArgs) -> int """
        ...


    def __new__(cls, startIndex:int, endIndex:int, isSelected:bool) -> Self:
        """ __new__(cls: type, startIndex: int, endIndex: int, isSelected: bool) """
        ...


class ListViewVirtualItemsSelectionRangeChangedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ListViewVirtualItemsSelectionRangeChangedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ListViewVirtualItemsSelectionRangeChangedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ListViewVirtualItemsSelectionRangeChangedEventHandler, sender: object, e: ListViewVirtualItemsSelectionRangeChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ListViewVirtualItemsSelectionRangeChangedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ListViewVirtualItemsSelectionRangeChangedEventArgs): # -> 
        """ Invoke(self: ListViewVirtualItemsSelectionRangeChangedEventHandler, sender: object, e: ListViewVirtualItemsSelectionRangeChangedEventArgs) """
        ...


class MainMenu(Menu): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """
    MainMenu()
    MainMenu(container: IContainer)
    MainMenu(items: Array[MenuItem])
    """
    @property
    def RightToLeft(self): # -> RightToLeft
        """
        Get: RightToLeft(self: MainMenu) -> RightToLeft
        Set: RightToLeft(self: MainMenu) = value
        """
        ...


    def GetForm(self) -> Form:
        """ GetForm(self: MainMenu) -> Form """
        ...

    def OnCollapse(self, *args): #cannot find CLR method
        """ OnCollapse(self: MainMenu, e: EventArgs) """
        ...

    Collapse = ...


class MaskedTextBox(TextBoxBase): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'object'>
    """
    MaskedTextBox()
    MaskedTextBox(mask: str)
    MaskedTextBox(maskedTextProvider: MaskedTextProvider)
    """
    @property
    def AllowPromptAsInput(self) -> bool:
        """
        Get: AllowPromptAsInput(self: MaskedTextBox) -> bool
        Set: AllowPromptAsInput(self: MaskedTextBox) = value
        """
        ...

    @property
    def AsciiOnly(self) -> bool:
        """
        Get: AsciiOnly(self: MaskedTextBox) -> bool
        Set: AsciiOnly(self: MaskedTextBox) = value
        """
        ...

    @property
    def BeepOnError(self) -> bool:
        """
        Get: BeepOnError(self: MaskedTextBox) -> bool
        Set: BeepOnError(self: MaskedTextBox) = value
        """
        ...

    @property
    def Culture(self) -> CultureInfo:
        """
        Get: Culture(self: MaskedTextBox) -> CultureInfo
        Set: Culture(self: MaskedTextBox) = value
        """
        ...

    @property
    def CutCopyMaskFormat(self): # -> MaskFormat
        """
        Get: CutCopyMaskFormat(self: MaskedTextBox) -> MaskFormat
        Set: CutCopyMaskFormat(self: MaskedTextBox) = value
        """
        ...

    @property
    def FormatProvider(self) -> IFormatProvider:
        """
        Get: FormatProvider(self: MaskedTextBox) -> IFormatProvider
        Set: FormatProvider(self: MaskedTextBox) = value
        """
        ...

    @property
    def HidePromptOnLeave(self) -> bool:
        """
        Get: HidePromptOnLeave(self: MaskedTextBox) -> bool
        Set: HidePromptOnLeave(self: MaskedTextBox) = value
        """
        ...

    @property
    def InsertKeyMode(self) -> InsertKeyMode:
        """
        Get: InsertKeyMode(self: MaskedTextBox) -> InsertKeyMode
        Set: InsertKeyMode(self: MaskedTextBox) = value
        """
        ...

    @property
    def IsOverwriteMode(self) -> bool:
        """ Get: IsOverwriteMode(self: MaskedTextBox) -> bool """
        ...

    @property
    def Mask(self) -> str:
        """
        Get: Mask(self: MaskedTextBox) -> str
        Set: Mask(self: MaskedTextBox) = value
        """
        ...

    @property
    def MaskCompleted(self) -> bool:
        """ Get: MaskCompleted(self: MaskedTextBox) -> bool """
        ...

    @property
    def MaskedTextProvider(self) -> MaskedTextProvider:
        """ Get: MaskedTextProvider(self: MaskedTextBox) -> MaskedTextProvider """
        ...

    @property
    def MaskFull(self) -> bool:
        """ Get: MaskFull(self: MaskedTextBox) -> bool """
        ...

    @property
    def PasswordChar(self) -> Char:
        """
        Get: PasswordChar(self: MaskedTextBox) -> Char
        Set: PasswordChar(self: MaskedTextBox) = value
        """
        ...

    @property
    def PromptChar(self) -> Char:
        """
        Get: PromptChar(self: MaskedTextBox) -> Char
        Set: PromptChar(self: MaskedTextBox) = value
        """
        ...

    @property
    def RejectInputOnFirstFailure(self) -> bool:
        """
        Get: RejectInputOnFirstFailure(self: MaskedTextBox) -> bool
        Set: RejectInputOnFirstFailure(self: MaskedTextBox) = value
        """
        ...

    @property
    def ResetOnPrompt(self) -> bool:
        """
        Get: ResetOnPrompt(self: MaskedTextBox) -> bool
        Set: ResetOnPrompt(self: MaskedTextBox) = value
        """
        ...

    @property
    def ResetOnSpace(self) -> bool:
        """
        Get: ResetOnSpace(self: MaskedTextBox) -> bool
        Set: ResetOnSpace(self: MaskedTextBox) = value
        """
        ...

    @property
    def SkipLiterals(self) -> bool:
        """
        Get: SkipLiterals(self: MaskedTextBox) -> bool
        Set: SkipLiterals(self: MaskedTextBox) = value
        """
        ...

    @property
    def TextAlign(self) -> HorizontalAlignment:
        """
        Get: TextAlign(self: MaskedTextBox) -> HorizontalAlignment
        Set: TextAlign(self: MaskedTextBox) = value
        """
        ...

    @property
    def TextMaskFormat(self): # -> MaskFormat
        """
        Get: TextMaskFormat(self: MaskedTextBox) -> MaskFormat
        Set: TextMaskFormat(self: MaskedTextBox) = value
        """
        ...

    @property
    def UseSystemPasswordChar(self) -> bool:
        """
        Get: UseSystemPasswordChar(self: MaskedTextBox) -> bool
        Set: UseSystemPasswordChar(self: MaskedTextBox) = value
        """
        ...

    @property
    def ValidatingType(self) -> Type:
        """
        Get: ValidatingType(self: MaskedTextBox) -> Type
        Set: ValidatingType(self: MaskedTextBox) = value
        """
        ...


    def OnIsOverwriteModeChanged(self, *args): #cannot find CLR method
        """ OnIsOverwriteModeChanged(self: MaskedTextBox, e: EventArgs) """
        ...

    def OnMaskChanged(self, *args): #cannot find CLR method
        """ OnMaskChanged(self: MaskedTextBox, e: EventArgs) """
        ...

    def OnTextAlignChanged(self, *args): #cannot find CLR method
        """ OnTextAlignChanged(self: MaskedTextBox, e: EventArgs) """
        ...

    def ValidateText(self) -> object:
        """ ValidateText(self: MaskedTextBox) -> object """
        ...

    def __new__(cls, *__args:str) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, mask: str)
        __new__(cls: type, maskedTextProvider: MaskedTextProvider)
        """
        ...

    AcceptsTabChanged = ...
    IsOverwriteModeChanged = ...
    MaskChanged = ...
    MaskInputRejected = ...
    MultilineChanged = ...
    TextAlignChanged = ...
    TypeValidationCompleted = ...


class MaskFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MaskFormat, values: ExcludePromptAndLiterals (0), IncludeLiterals (2), IncludePrompt (1), IncludePromptAndLiterals (3) """
    ExcludePromptAndLiterals: MaskFormat = ...
    IncludeLiterals: MaskFormat = ...
    IncludePrompt: MaskFormat = ...
    IncludePromptAndLiterals: MaskFormat = ...
    value__ = ...


class MaskInputRejectedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ MaskInputRejectedEventArgs(position: int, rejectionHint: MaskedTextResultHint) """
    @property
    def Position(self) -> int:
        """ Get: Position(self: MaskInputRejectedEventArgs) -> int """
        ...

    @property
    def RejectionHint(self) -> MaskedTextResultHint:
        """ Get: RejectionHint(self: MaskInputRejectedEventArgs) -> MaskedTextResultHint """
        ...


    def __new__(cls, position:int, rejectionHint:MaskedTextResultHint) -> Self:
        """ __new__(cls: type, position: int, rejectionHint: MaskedTextResultHint) """
        ...


class MaskInputRejectedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ MaskInputRejectedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:MaskInputRejectedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: MaskInputRejectedEventHandler, sender: object, e: MaskInputRejectedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: MaskInputRejectedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:MaskInputRejectedEventArgs): # -> 
        """ Invoke(self: MaskInputRejectedEventHandler, sender: object, e: MaskInputRejectedEventArgs) """
        ...


class MdiClient(Control): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ MdiClient() """
    @property
    def MdiChildren(self) -> Array:
        """ Get: MdiChildren(self: MdiClient) -> Array[Form] """
        ...


    def LayoutMdi(self, value): # ->  # Not found arg types: {'value': 'MdiLayout'}
        """ LayoutMdi(self: MdiClient, value: MdiLayout) """
        ...

    ControlCollection = ...


class MdiLayout(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MdiLayout, values: ArrangeIcons (3), Cascade (0), TileHorizontal (1), TileVertical (2) """
    ArrangeIcons: MdiLayout = ...
    Cascade: MdiLayout = ...
    TileHorizontal: MdiLayout = ...
    TileVertical: MdiLayout = ...
    value__ = ...


class MeasureItemEventArgs(EventArgs): # skipped bases: <type 'object'>
    """
    MeasureItemEventArgs(graphics: Graphics, index: int, itemHeight: int)
    MeasureItemEventArgs(graphics: Graphics, index: int)
    """
    @property
    def Graphics(self) -> Graphics:
        """ Get: Graphics(self: MeasureItemEventArgs) -> Graphics """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: MeasureItemEventArgs) -> int """
        ...

    @property
    def ItemHeight(self) -> int:
        """
        Get: ItemHeight(self: MeasureItemEventArgs) -> int
        Set: ItemHeight(self: MeasureItemEventArgs) = value
        """
        ...

    @property
    def ItemWidth(self) -> int:
        """
        Get: ItemWidth(self: MeasureItemEventArgs) -> int
        Set: ItemWidth(self: MeasureItemEventArgs) = value
        """
        ...


    def __new__(cls, graphics:Graphics, index:int, itemHeight:int = ...) -> Self:
        """
        __new__(cls: type, graphics: Graphics, index: int, itemHeight: int)
        __new__(cls: type, graphics: Graphics, index: int)
        """
        ...


class MeasureItemEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ MeasureItemEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:MeasureItemEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: MeasureItemEventHandler, sender: object, e: MeasureItemEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: MeasureItemEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:MeasureItemEventArgs): # -> 
        """ Invoke(self: MeasureItemEventHandler, sender: object, e: MeasureItemEventArgs) """
        ...


class MenuGlyph(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MenuGlyph, values: Arrow (0), Bullet (2), Checkmark (1), Max (2), Min (0) """
    Arrow: MenuGlyph = ...
    Bullet: MenuGlyph = ...
    Checkmark: MenuGlyph = ...
    Max: MenuGlyph = ...
    Min: MenuGlyph = ...
    value__ = ...


class MenuItem(Menu): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """
    MenuItem()
    MenuItem(text: str)
    MenuItem(text: str, onClick: EventHandler)
    MenuItem(text: str, onClick: EventHandler, shortcut: Shortcut)
    MenuItem(text: str, items: Array[MenuItem])
    MenuItem(mergeType: MenuMerge, mergeOrder: int, shortcut: Shortcut, text: str, onClick: EventHandler, onPopup: EventHandler, onSelect: EventHandler, items: Array[MenuItem])
    """
    @property
    def BarBreak(self) -> bool:
        """
        Get: BarBreak(self: MenuItem) -> bool
        Set: BarBreak(self: MenuItem) = value
        """
        ...

    @property
    def Break(self) -> bool:
        """
        Get: Break(self: MenuItem) -> bool
        Set: Break(self: MenuItem) = value
        """
        ...

    @property
    def Checked(self) -> bool:
        """
        Get: Checked(self: MenuItem) -> bool
        Set: Checked(self: MenuItem) = value
        """
        ...

    @property
    def DefaultItem(self) -> bool:
        """
        Get: DefaultItem(self: MenuItem) -> bool
        Set: DefaultItem(self: MenuItem) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: MenuItem) -> bool
        Set: Enabled(self: MenuItem) = value
        """
        ...

    @property
    def Index(self) -> int:
        """
        Get: Index(self: MenuItem) -> int
        Set: Index(self: MenuItem) = value
        """
        ...

    @property
    def MdiList(self) -> bool:
        """
        Get: MdiList(self: MenuItem) -> bool
        Set: MdiList(self: MenuItem) = value
        """
        ...

    @property
    def MenuID(self):
        ...

    @property
    def MergeOrder(self) -> int:
        """
        Get: MergeOrder(self: MenuItem) -> int
        Set: MergeOrder(self: MenuItem) = value
        """
        ...

    @property
    def MergeType(self): # -> MenuMerge
        """
        Get: MergeType(self: MenuItem) -> MenuMerge
        Set: MergeType(self: MenuItem) = value
        """
        ...

    @property
    def Mnemonic(self) -> Char:
        """ Get: Mnemonic(self: MenuItem) -> Char """
        ...

    @property
    def OwnerDraw(self) -> bool:
        """
        Get: OwnerDraw(self: MenuItem) -> bool
        Set: OwnerDraw(self: MenuItem) = value
        """
        ...

    @property
    def Parent(self) -> Menu:
        """ Get: Parent(self: MenuItem) -> Menu """
        ...

    @property
    def RadioCheck(self) -> bool:
        """
        Get: RadioCheck(self: MenuItem) -> bool
        Set: RadioCheck(self: MenuItem) = value
        """
        ...

    @property
    def Shortcut(self): # -> Shortcut
        """
        Get: Shortcut(self: MenuItem) -> Shortcut
        Set: Shortcut(self: MenuItem) = value
        """
        ...

    @property
    def ShowShortcut(self) -> bool:
        """
        Get: ShowShortcut(self: MenuItem) -> bool
        Set: ShowShortcut(self: MenuItem) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: MenuItem) -> str
        Set: Text(self: MenuItem) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: MenuItem) -> bool
        Set: Visible(self: MenuItem) = value
        """
        ...


    def OnClick(self, *args): #cannot find CLR method
        """ OnClick(self: MenuItem, e: EventArgs) """
        ...

    def OnDrawItem(self, *args): #cannot find CLR method
        """ OnDrawItem(self: MenuItem, e: DrawItemEventArgs) """
        ...

    def OnInitMenuPopup(self, *args): #cannot find CLR method
        """ OnInitMenuPopup(self: MenuItem, e: EventArgs) """
        ...

    def OnMeasureItem(self, *args): #cannot find CLR method
        """ OnMeasureItem(self: MenuItem, e: MeasureItemEventArgs) """
        ...

    def OnPopup(self, *args): #cannot find CLR method
        """ OnPopup(self: MenuItem, e: EventArgs) """
        ...

    def OnSelect(self, *args): #cannot find CLR method
        """ OnSelect(self: MenuItem, e: EventArgs) """
        ...

    def PerformClick(self): # -> 
        """ PerformClick(self: MenuItem) """
        ...

    def PerformSelect(self): # -> 
        """ PerformSelect(self: MenuItem) """
        ...

    Click = ...
    DrawItem = ...
    MeasureItem = ...
    Popup = ...
    Select = ...


class MenuMerge(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MenuMerge, values: Add (0), MergeItems (2), Remove (3), Replace (1) """
    Add: MenuMerge = ...
    MergeItems: MenuMerge = ...
    Remove: MenuMerge = ...
    Replace: MenuMerge = ...
    value__ = ...


class MenuStrip(ToolStrip): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'ISupportToolStripPanel'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ MenuStrip() """
    @property
    def MdiWindowListItem(self): # -> ToolStripMenuItem
        """
        Get: MdiWindowListItem(self: MenuStrip) -> ToolStripMenuItem
        Set: MdiWindowListItem(self: MenuStrip) = value
        """
        ...


    def OnMenuActivate(self, *args): #cannot find CLR method
        """ OnMenuActivate(self: MenuStrip, e: EventArgs) """
        ...

    def OnMenuDeactivate(self, *args): #cannot find CLR method
        """ OnMenuDeactivate(self: MenuStrip, e: EventArgs) """
        ...

    MenuActivate = ...
    MenuDeactivate = ...


class MergeAction(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MergeAction, values: Append (0), Insert (1), MatchOnly (4), Remove (3), Replace (2) """
    Append: MergeAction = ...
    Insert: MergeAction = ...
    MatchOnly: MergeAction = ...
    Remove: MergeAction = ...
    Replace: MergeAction = ...
    value__ = ...


class Message: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def HWnd(self) -> IntPtr:
        """
        Get: HWnd(self: Message) -> IntPtr
        Set: HWnd(self: Message) = value
        """
        ...

    @property
    def LParam(self) -> IntPtr:
        """
        Get: LParam(self: Message) -> IntPtr
        Set: LParam(self: Message) = value
        """
        ...

    @property
    def Msg(self) -> int:
        """
        Get: Msg(self: Message) -> int
        Set: Msg(self: Message) = value
        """
        ...

    @property
    def Result(self) -> IntPtr:
        """
        Get: Result(self: Message) -> IntPtr
        Set: Result(self: Message) = value
        """
        ...

    @property
    def WParam(self) -> IntPtr:
        """
        Get: WParam(self: Message) -> IntPtr
        Set: WParam(self: Message) = value
        """
        ...


    @staticmethod
    def Create(hWnd:IntPtr, msg:int, wparam:IntPtr, lparam:IntPtr) -> Message:
        """ Create(hWnd: IntPtr, msg: int, wparam: IntPtr, lparam: IntPtr) -> Message """
        ...

    def Equals(self, o:object) -> bool:
        """ Equals(self: Message, o: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: Message) -> int """
        ...

    def GetLParam(self, cls) -> object:
        """ GetLParam(self: Message, cls: Type) -> object """
        ...

    def ToString(self) -> str:
        """ ToString(self: Message) -> str """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class MessageBox: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @staticmethod
    def Show(*__args:str) -> DialogResult:
        """
        Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, displayHelpButton: bool) -> DialogResult
        Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons) -> DialogResult
        Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon) -> DialogResult
        Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton) -> DialogResult
        Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions) -> DialogResult
        Show(text: str) -> DialogResult
        Show(text: str, caption: str) -> DialogResult
        Show(text: str, caption: str, buttons: MessageBoxButtons) -> DialogResult
        Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon) -> DialogResult
        Show(owner: IWin32Window, text: str, caption: str) -> DialogResult
        Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton) -> DialogResult
        Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str, navigator: HelpNavigator, param: object) -> DialogResult
        Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str, navigator: HelpNavigator, param: object) -> DialogResult
        Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str, navigator: HelpNavigator) -> DialogResult
        Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str, navigator: HelpNavigator) -> DialogResult
        Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str, keyword: str) -> DialogResult
        Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str, keyword: str) -> DialogResult
        Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str) -> DialogResult
        Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str) -> DialogResult
        Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions) -> DialogResult
        Show(owner: IWin32Window, text: str) -> DialogResult
        """
        ...


class MessageBoxButtons(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MessageBoxButtons, values: AbortRetryIgnore (2), OK (0), OKCancel (1), RetryCancel (5), YesNo (4), YesNoCancel (3) """
    AbortRetryIgnore: MessageBoxButtons = ...
    OK: MessageBoxButtons = ...
    OKCancel: MessageBoxButtons = ...
    RetryCancel: MessageBoxButtons = ...
    value__ = ...
    YesNo: MessageBoxButtons = ...
    YesNoCancel: MessageBoxButtons = ...


class MessageBoxDefaultButton(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MessageBoxDefaultButton, values: Button1 (0), Button2 (256), Button3 (512) """
    Button1: MessageBoxDefaultButton = ...
    Button2: MessageBoxDefaultButton = ...
    Button3: MessageBoxDefaultButton = ...
    value__ = ...


class MessageBoxIcon(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MessageBoxIcon, values: Asterisk (64), Error (16), Exclamation (48), Hand (16), Information (64), None (0), Question (32), Stop (16), Warning (48) """
    Asterisk: MessageBoxIcon = ...
    Error: MessageBoxIcon = ...
    Exclamation: MessageBoxIcon = ...
    Hand: MessageBoxIcon = ...
    Information: MessageBoxIcon = ...
    Question: MessageBoxIcon = ...
    Stop: MessageBoxIcon = ...
    value__ = ...
    Warning: MessageBoxIcon = ...


class MessageBoxOptions(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) MessageBoxOptions, values: DefaultDesktopOnly (131072), RightAlign (524288), RtlReading (1048576), ServiceNotification (2097152) """
    DefaultDesktopOnly: MessageBoxOptions = ...
    RightAlign: MessageBoxOptions = ...
    RtlReading: MessageBoxOptions = ...
    ServiceNotification: MessageBoxOptions = ...
    value__ = ...


class MethodInvoker(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ MethodInvoker(object: object, method: IntPtr) """
    def BeginInvoke(self, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: MethodInvoker, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: MethodInvoker, result: IAsyncResult) """
        ...

    def Invoke(self): # -> 
        """ Invoke(self: MethodInvoker) """
        ...


class MonthCalendar(Control): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ MonthCalendar() """
    @property
    def AnnuallyBoldedDates(self) -> Array:
        """
        Get: AnnuallyBoldedDates(self: MonthCalendar) -> Array[DateTime]
        Set: AnnuallyBoldedDates(self: MonthCalendar) = value
        """
        ...

    @property
    def BoldedDates(self) -> Array:
        """
        Get: BoldedDates(self: MonthCalendar) -> Array[DateTime]
        Set: BoldedDates(self: MonthCalendar) = value
        """
        ...

    @property
    def CalendarDimensions(self) -> Size:
        """
        Get: CalendarDimensions(self: MonthCalendar) -> Size
        Set: CalendarDimensions(self: MonthCalendar) = value
        """
        ...

    @property
    def FirstDayOfWeek(self) -> Day:
        """
        Get: FirstDayOfWeek(self: MonthCalendar) -> Day
        Set: FirstDayOfWeek(self: MonthCalendar) = value
        """
        ...

    @property
    def MaxDate(self) -> DateTime:
        """
        Get: MaxDate(self: MonthCalendar) -> DateTime
        Set: MaxDate(self: MonthCalendar) = value
        """
        ...

    @property
    def MaxSelectionCount(self) -> int:
        """
        Get: MaxSelectionCount(self: MonthCalendar) -> int
        Set: MaxSelectionCount(self: MonthCalendar) = value
        """
        ...

    @property
    def MinDate(self) -> DateTime:
        """
        Get: MinDate(self: MonthCalendar) -> DateTime
        Set: MinDate(self: MonthCalendar) = value
        """
        ...

    @property
    def MonthlyBoldedDates(self) -> Array:
        """
        Get: MonthlyBoldedDates(self: MonthCalendar) -> Array[DateTime]
        Set: MonthlyBoldedDates(self: MonthCalendar) = value
        """
        ...

    @property
    def RightToLeftLayout(self) -> bool:
        """
        Get: RightToLeftLayout(self: MonthCalendar) -> bool
        Set: RightToLeftLayout(self: MonthCalendar) = value
        """
        ...

    @property
    def ScrollChange(self) -> int:
        """
        Get: ScrollChange(self: MonthCalendar) -> int
        Set: ScrollChange(self: MonthCalendar) = value
        """
        ...

    @property
    def SelectionEnd(self) -> DateTime:
        """
        Get: SelectionEnd(self: MonthCalendar) -> DateTime
        Set: SelectionEnd(self: MonthCalendar) = value
        """
        ...

    @property
    def SelectionRange(self): # -> SelectionRange
        """
        Get: SelectionRange(self: MonthCalendar) -> SelectionRange
        Set: SelectionRange(self: MonthCalendar) = value
        """
        ...

    @property
    def SelectionStart(self) -> DateTime:
        """
        Get: SelectionStart(self: MonthCalendar) -> DateTime
        Set: SelectionStart(self: MonthCalendar) = value
        """
        ...

    @property
    def ShowToday(self) -> bool:
        """
        Get: ShowToday(self: MonthCalendar) -> bool
        Set: ShowToday(self: MonthCalendar) = value
        """
        ...

    @property
    def ShowTodayCircle(self) -> bool:
        """
        Get: ShowTodayCircle(self: MonthCalendar) -> bool
        Set: ShowTodayCircle(self: MonthCalendar) = value
        """
        ...

    @property
    def ShowWeekNumbers(self) -> bool:
        """
        Get: ShowWeekNumbers(self: MonthCalendar) -> bool
        Set: ShowWeekNumbers(self: MonthCalendar) = value
        """
        ...

    @property
    def SingleMonthSize(self) -> Size:
        """ Get: SingleMonthSize(self: MonthCalendar) -> Size """
        ...

    @property
    def TitleBackColor(self) -> Color:
        """
        Get: TitleBackColor(self: MonthCalendar) -> Color
        Set: TitleBackColor(self: MonthCalendar) = value
        """
        ...

    @property
    def TitleForeColor(self) -> Color:
        """
        Get: TitleForeColor(self: MonthCalendar) -> Color
        Set: TitleForeColor(self: MonthCalendar) = value
        """
        ...

    @property
    def TodayDate(self) -> DateTime:
        """
        Get: TodayDate(self: MonthCalendar) -> DateTime
        Set: TodayDate(self: MonthCalendar) = value
        """
        ...

    @property
    def TodayDateSet(self) -> bool:
        """ Get: TodayDateSet(self: MonthCalendar) -> bool """
        ...

    @property
    def TrailingForeColor(self) -> Color:
        """
        Get: TrailingForeColor(self: MonthCalendar) -> Color
        Set: TrailingForeColor(self: MonthCalendar) = value
        """
        ...


    def AddAnnuallyBoldedDate(self, date:DateTime): # -> 
        """ AddAnnuallyBoldedDate(self: MonthCalendar, date: DateTime) """
        ...

    def AddBoldedDate(self, date:DateTime): # -> 
        """ AddBoldedDate(self: MonthCalendar, date: DateTime) """
        ...

    def AddMonthlyBoldedDate(self, date:DateTime): # -> 
        """ AddMonthlyBoldedDate(self: MonthCalendar, date: DateTime) """
        ...

    def GetDisplayRange(self, visible:bool): # -> SelectionRange
        """ GetDisplayRange(self: MonthCalendar, visible: bool) -> SelectionRange """
        ...

    def HitArea(self, *args): #cannot find CLR method
        """ enum HitArea, values: CalendarBackground (6), Date (7), DayOfWeek (10), NextMonthButton (4), NextMonthDate (8), Nowhere (0), PrevMonthButton (5), PrevMonthDate (9), TitleBackground (1), TitleMonth (2), TitleYear (3), TodayLink (12), WeekNumbers (11) """
        ...

    def HitTest(self, *__args:Point) -> HitTestInfo:
        """
        HitTest(self: MonthCalendar, x: int, y: int) -> HitTestInfo
        HitTest(self: MonthCalendar, point: Point) -> HitTestInfo
        """
        ...

    def HitTestInfo(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def OnDateChanged(self, *args): #cannot find CLR method
        """ OnDateChanged(self: MonthCalendar, drevent: DateRangeEventArgs) """
        ...

    def OnDateSelected(self, *args): #cannot find CLR method
        """ OnDateSelected(self: MonthCalendar, drevent: DateRangeEventArgs) """
        ...

    def OnRightToLeftLayoutChanged(self, *args): #cannot find CLR method
        """ OnRightToLeftLayoutChanged(self: MonthCalendar, e: EventArgs) """
        ...

    def RemoveAllAnnuallyBoldedDates(self): # -> 
        """ RemoveAllAnnuallyBoldedDates(self: MonthCalendar) """
        ...

    def RemoveAllBoldedDates(self): # -> 
        """ RemoveAllBoldedDates(self: MonthCalendar) """
        ...

    def RemoveAllMonthlyBoldedDates(self): # -> 
        """ RemoveAllMonthlyBoldedDates(self: MonthCalendar) """
        ...

    def RemoveAnnuallyBoldedDate(self, date:DateTime): # -> 
        """ RemoveAnnuallyBoldedDate(self: MonthCalendar, date: DateTime) """
        ...

    def RemoveBoldedDate(self, date:DateTime): # -> 
        """ RemoveBoldedDate(self: MonthCalendar, date: DateTime) """
        ...

    def RemoveMonthlyBoldedDate(self, date:DateTime): # -> 
        """ RemoveMonthlyBoldedDate(self: MonthCalendar, date: DateTime) """
        ...

    def SetCalendarDimensions(self, x:int, y:int): # -> 
        """ SetCalendarDimensions(self: MonthCalendar, x: int, y: int) """
        ...

    def SetDate(self, date:DateTime): # -> 
        """ SetDate(self: MonthCalendar, date: DateTime) """
        ...

    def SetSelectionRange(self, date1:DateTime, date2:DateTime): # -> 
        """ SetSelectionRange(self: MonthCalendar, date1: DateTime, date2: DateTime) """
        ...

    def ToString(self) -> str:
        """ ToString(self: MonthCalendar) -> str """
        ...

    def UpdateBoldedDates(self): # -> 
        """ UpdateBoldedDates(self: MonthCalendar) """
        ...

    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    Click = ...
    DateChanged = ...
    DateSelected = ...
    DoubleClick = ...
    ImeModeChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    PaddingChanged = ...
    Paint = ...
    RightToLeftLayoutChanged = ...
    TextChanged = ...


class MouseButtons(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) MouseButtons, values: Left (1048576), Middle (4194304), None (0), Right (2097152), XButton1 (8388608), XButton2 (16777216) """
    Left: MouseButtons = ...
    Middle: MouseButtons = ...
    Right: MouseButtons = ...
    value__ = ...
    XButton1: MouseButtons = ...
    XButton2: MouseButtons = ...


class MouseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ MouseEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:MouseEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: MouseEventHandler, sender: object, e: MouseEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: MouseEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:MouseEventArgs): # -> 
        """ Invoke(self: MouseEventHandler, sender: object, e: MouseEventArgs) """
        ...


class NativeWindow(MarshalByRefObject, IWin32Window): # skipped bases: <type 'object'>
    """ NativeWindow() """
    def AssignHandle(self, handle:IntPtr): # -> 
        """ AssignHandle(self: NativeWindow, handle: IntPtr) """
        ...

    def CreateHandle(self, cp:CreateParams): # -> 
        """ CreateHandle(self: NativeWindow, cp: CreateParams) """
        ...

    def DefWndProc(self, m:Message) -> Message:
        """ DefWndProc(self: NativeWindow, m: Message) -> Message """
        ...

    def DestroyHandle(self): # -> 
        """ DestroyHandle(self: NativeWindow) """
        ...

    @staticmethod
    def FromHandle(handle:IntPtr) -> NativeWindow:
        """ FromHandle(handle: IntPtr) -> NativeWindow """
        ...

    def OnHandleChange(self, *args): #cannot find CLR method
        """ OnHandleChange(self: NativeWindow) """
        ...

    def OnThreadException(self, *args): #cannot find CLR method
        """ OnThreadException(self: NativeWindow, e: Exception) """
        ...

    def ReleaseHandle(self): # -> 
        """ ReleaseHandle(self: NativeWindow) """
        ...

    def WndProc(self, *args): #cannot find CLR method
        """ WndProc(self: NativeWindow, m: Message) -> Message """
        ...


class NavigateEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ NavigateEventArgs(isForward: bool) """
    @property
    def Forward(self) -> bool:
        """ Get: Forward(self: NavigateEventArgs) -> bool """
        ...


    def __new__(cls, isForward:bool) -> Self:
        """ __new__(cls: type, isForward: bool) """
        ...


class NavigateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ NavigateEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, ne:NavigateEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: NavigateEventHandler, sender: object, ne: NavigateEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: NavigateEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, ne:NavigateEventArgs): # -> 
        """ Invoke(self: NavigateEventHandler, sender: object, ne: NavigateEventArgs) """
        ...


class NodeLabelEditEventArgs(EventArgs): # skipped bases: <type 'object'>
    """
    NodeLabelEditEventArgs(node: TreeNode)
    NodeLabelEditEventArgs(node: TreeNode, label: str)
    """
    @property
    def CancelEdit(self) -> bool:
        """
        Get: CancelEdit(self: NodeLabelEditEventArgs) -> bool
        Set: CancelEdit(self: NodeLabelEditEventArgs) = value
        """
        ...

    @property
    def Label(self) -> str:
        """ Get: Label(self: NodeLabelEditEventArgs) -> str """
        ...

    @property
    def Node(self): # -> TreeNode
        """ Get: Node(self: NodeLabelEditEventArgs) -> TreeNode """
        ...


    def __new__(cls, node, label:str = ...) -> Self: # Not found arg types: {'node': 'TreeNode'}
        """
        __new__(cls: type, node: TreeNode)
        __new__(cls: type, node: TreeNode, label: str)
        """
        ...


class NodeLabelEditEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ NodeLabelEditEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:NodeLabelEditEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: NodeLabelEditEventHandler, sender: object, e: NodeLabelEditEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: NodeLabelEditEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:NodeLabelEditEventArgs): # -> 
        """ Invoke(self: NodeLabelEditEventHandler, sender: object, e: NodeLabelEditEventArgs) """
        ...


class NotifyIcon(Component): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """
    NotifyIcon()
    NotifyIcon(container: IContainer)
    """
    @property
    def BalloonTipIcon(self): # -> ToolTipIcon
        """
        Get: BalloonTipIcon(self: NotifyIcon) -> ToolTipIcon
        Set: BalloonTipIcon(self: NotifyIcon) = value
        """
        ...

    @property
    def BalloonTipText(self) -> str:
        """
        Get: BalloonTipText(self: NotifyIcon) -> str
        Set: BalloonTipText(self: NotifyIcon) = value
        """
        ...

    @property
    def BalloonTipTitle(self) -> str:
        """
        Get: BalloonTipTitle(self: NotifyIcon) -> str
        Set: BalloonTipTitle(self: NotifyIcon) = value
        """
        ...

    @property
    def ContextMenu(self) -> ContextMenu:
        """
        Get: ContextMenu(self: NotifyIcon) -> ContextMenu
        Set: ContextMenu(self: NotifyIcon) = value
        """
        ...

    @property
    def ContextMenuStrip(self) -> ContextMenuStrip:
        """
        Get: ContextMenuStrip(self: NotifyIcon) -> ContextMenuStrip
        Set: ContextMenuStrip(self: NotifyIcon) = value
        """
        ...

    @property
    def Icon(self) -> Icon:
        """
        Get: Icon(self: NotifyIcon) -> Icon
        Set: Icon(self: NotifyIcon) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: NotifyIcon) -> object
        Set: Tag(self: NotifyIcon) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: NotifyIcon) -> str
        Set: Text(self: NotifyIcon) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: NotifyIcon) -> bool
        Set: Visible(self: NotifyIcon) = value
        """
        ...


    def ShowBalloonTip(self, timeout:int, tipTitle:str = ..., tipText:str = ..., tipIcon = ...): # ->  # Not found arg types: {'tipIcon': 'ToolTipIcon'}
        """ ShowBalloonTip(self: NotifyIcon, timeout: int)ShowBalloonTip(self: NotifyIcon, timeout: int, tipTitle: str, tipText: str, tipIcon: ToolTipIcon) """
        ...

    def __new__(cls, container:IContainer = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, container: IContainer)
        """
        ...

    BalloonTipClicked = ...
    BalloonTipClosed = ...
    BalloonTipShown = ...
    Click = ...
    DoubleClick = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class NumericUpDown(UpDownBase, ISupportInitialize): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IViewObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'IContainerControl'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IOleObject'>, <type 'object'>
    """ NumericUpDown() """
    @property
    def Accelerations(self): # -> NumericUpDownAccelerationCollection
        """ Get: Accelerations(self: NumericUpDown) -> NumericUpDownAccelerationCollection """
        ...

    @property
    def DecimalPlaces(self) -> int:
        """
        Get: DecimalPlaces(self: NumericUpDown) -> int
        Set: DecimalPlaces(self: NumericUpDown) = value
        """
        ...

    @property
    def Hexadecimal(self) -> bool:
        """
        Get: Hexadecimal(self: NumericUpDown) -> bool
        Set: Hexadecimal(self: NumericUpDown) = value
        """
        ...

    @property
    def Increment(self) -> Decimal:
        """
        Get: Increment(self: NumericUpDown) -> Decimal
        Set: Increment(self: NumericUpDown) = value
        """
        ...

    @property
    def Maximum(self) -> Decimal:
        """
        Get: Maximum(self: NumericUpDown) -> Decimal
        Set: Maximum(self: NumericUpDown) = value
        """
        ...

    @property
    def Minimum(self) -> Decimal:
        """
        Get: Minimum(self: NumericUpDown) -> Decimal
        Set: Minimum(self: NumericUpDown) = value
        """
        ...

    @property
    def Padding(self): # -> Padding
        """
        Get: Padding(self: NumericUpDown) -> Padding
        Set: Padding(self: NumericUpDown) = value
        """
        ...

    @property
    def ThousandsSeparator(self) -> bool:
        """
        Get: ThousandsSeparator(self: NumericUpDown) -> bool
        Set: ThousandsSeparator(self: NumericUpDown) = value
        """
        ...

    @property
    def Value(self) -> Decimal:
        """
        Get: Value(self: NumericUpDown) -> Decimal
        Set: Value(self: NumericUpDown) = value
        """
        ...


    def OnValueChanged(self, *args): #cannot find CLR method
        """ OnValueChanged(self: NumericUpDown, e: EventArgs) """
        ...

    def ParseEditText(self, *args): #cannot find CLR method
        """ ParseEditText(self: NumericUpDown) """
        ...

    def ToString(self) -> str:
        """ ToString(self: NumericUpDown) -> str """
        ...

    PaddingChanged = ...
    TextChanged = ...
    ValueChanged = ...


class NumericUpDownAcceleration: # skipped bases: <type 'object'>, <type 'object'>
    """ NumericUpDownAcceleration(seconds: int, increment: Decimal) """
    @property
    def Increment(self) -> Decimal:
        """
        Get: Increment(self: NumericUpDownAcceleration) -> Decimal
        Set: Increment(self: NumericUpDownAcceleration) = value
        """
        ...

    @property
    def Seconds(self) -> int:
        """
        Get: Seconds(self: NumericUpDownAcceleration) -> int
        Set: Seconds(self: NumericUpDownAcceleration) = value
        """
        ...



class NumericUpDownAccelerationCollection(MarshalByRefObject, ICollection): # skipped bases: <type 'IEnumerable'>, <type 'IEnumerable[NumericUpDownAcceleration]'>, <type 'object'>
    """ NumericUpDownAccelerationCollection() """
    def AddRange(self, accelerations:Array): # -> 
        """ AddRange(self: NumericUpDownAccelerationCollection, *accelerations: Array[NumericUpDownAcceleration]) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        ...


class OpacityConverter(TypeConverter): # skipped bases: <type 'object'>
    """ OpacityConverter() """
    pass

class OpenFileDialog(FileDialog): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """ OpenFileDialog() """
    @property
    def Multiselect(self) -> bool:
        """
        Get: Multiselect(self: OpenFileDialog) -> bool
        Set: Multiselect(self: OpenFileDialog) = value
        """
        ...

    @property
    def ReadOnlyChecked(self) -> bool:
        """
        Get: ReadOnlyChecked(self: OpenFileDialog) -> bool
        Set: ReadOnlyChecked(self: OpenFileDialog) = value
        """
        ...

    @property
    def SafeFileName(self) -> str:
        """ Get: SafeFileName(self: OpenFileDialog) -> str """
        ...

    @property
    def SafeFileNames(self) -> Array:
        """ Get: SafeFileNames(self: OpenFileDialog) -> Array[str] """
        ...

    @property
    def ShowReadOnly(self) -> bool:
        """
        Get: ShowReadOnly(self: OpenFileDialog) -> bool
        Set: ShowReadOnly(self: OpenFileDialog) = value
        """
        ...


    def OpenFile(self) -> Stream:
        """ OpenFile(self: OpenFileDialog) -> Stream """
        ...


class Orientation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum Orientation, values: Horizontal (0), Vertical (1) """
    Horizontal: Orientation = ...
    value__ = ...
    Vertical: Orientation = ...


class OSFeature(FeatureSupport): # skipped bases: <type 'IFeatureSupport'>, <type 'object'>
    """ no doc """
    @property
    def Feature(self) -> OSFeature:
        """ Get: Feature() -> OSFeature """
        ...


    LayeredWindows: object = ...
    Themes: object = ...


class OwnerDrawPropertyBag(MarshalByRefObject, ISerializable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: OwnerDrawPropertyBag) -> Color
        Set: BackColor(self: OwnerDrawPropertyBag) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: OwnerDrawPropertyBag) -> Font
        Set: Font(self: OwnerDrawPropertyBag) = value
        """
        ...

    @property
    def ForeColor(self) -> Color:
        """
        Get: ForeColor(self: OwnerDrawPropertyBag) -> Color
        Set: ForeColor(self: OwnerDrawPropertyBag) = value
        """
        ...


    @staticmethod
    def Copy(value:OwnerDrawPropertyBag) -> OwnerDrawPropertyBag:
        """ Copy(value: OwnerDrawPropertyBag) -> OwnerDrawPropertyBag """
        ...

    def IsEmpty(self) -> bool:
        """ IsEmpty(self: OwnerDrawPropertyBag) -> bool """
        ...

    def __new__(cls, *args): #cannot find CLR constructor
        """ __new__(cls: type, info: SerializationInfo, context: StreamingContext) """
        ...


class Padding: # skipped bases: <type 'object'>, <type 'object'>
    """
    Padding(all: int)
    Padding(left: int, top: int, right: int, bottom: int)
    """
    @property
    def All(self) -> int:
        """
        Get: All(self: Padding) -> int
        Set: All(self: Padding) = value
        """
        ...

    @property
    def Bottom(self) -> int:
        """
        Get: Bottom(self: Padding) -> int
        Set: Bottom(self: Padding) = value
        """
        ...

    @property
    def Horizontal(self) -> int:
        """ Get: Horizontal(self: Padding) -> int """
        ...

    @property
    def Left(self) -> int:
        """
        Get: Left(self: Padding) -> int
        Set: Left(self: Padding) = value
        """
        ...

    @property
    def Right(self) -> int:
        """
        Get: Right(self: Padding) -> int
        Set: Right(self: Padding) = value
        """
        ...

    @property
    def Size(self) -> Size:
        """ Get: Size(self: Padding) -> Size """
        ...

    @property
    def Top(self) -> int:
        """
        Get: Top(self: Padding) -> int
        Set: Top(self: Padding) = value
        """
        ...

    @property
    def Vertical(self) -> int:
        """ Get: Vertical(self: Padding) -> int """
        ...


    @staticmethod
    def Add(p1:Padding, p2:Padding) -> Padding:
        """ Add(p1: Padding, p2: Padding) -> Padding """
        ...

    def Equals(self, other:object) -> bool:
        """ Equals(self: Padding, other: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: Padding) -> int """
        ...

    @staticmethod
    def Subtract(p1:Padding, p2:Padding) -> Padding:
        """ Subtract(p1: Padding, p2: Padding) -> Padding """
        ...

    def ToString(self) -> str:
        """ ToString(self: Padding) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    def __radd__(self, *args): #cannot find CLR method
        """ __radd__(p1: Padding, p2: Padding) -> Padding """
        ...

    def __rsub__(self, *args): #cannot find CLR method
        """ __rsub__(p1: Padding, p2: Padding) -> Padding """
        ...

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        ...

    Empty: Padding = ...


class PaddingConverter(TypeConverter): # skipped bases: <type 'object'>
    """ PaddingConverter() """
    pass

class PageSetupDialog(CommonDialog): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """ PageSetupDialog() """
    @property
    def AllowMargins(self) -> bool:
        """
        Get: AllowMargins(self: PageSetupDialog) -> bool
        Set: AllowMargins(self: PageSetupDialog) = value
        """
        ...

    @property
    def AllowOrientation(self) -> bool:
        """
        Get: AllowOrientation(self: PageSetupDialog) -> bool
        Set: AllowOrientation(self: PageSetupDialog) = value
        """
        ...

    @property
    def AllowPaper(self) -> bool:
        """
        Get: AllowPaper(self: PageSetupDialog) -> bool
        Set: AllowPaper(self: PageSetupDialog) = value
        """
        ...

    @property
    def AllowPrinter(self) -> bool:
        """
        Get: AllowPrinter(self: PageSetupDialog) -> bool
        Set: AllowPrinter(self: PageSetupDialog) = value
        """
        ...

    @property
    def Document(self) -> PrintDocument:
        """
        Get: Document(self: PageSetupDialog) -> PrintDocument
        Set: Document(self: PageSetupDialog) = value
        """
        ...

    @property
    def EnableMetric(self) -> bool:
        """
        Get: EnableMetric(self: PageSetupDialog) -> bool
        Set: EnableMetric(self: PageSetupDialog) = value
        """
        ...

    @property
    def MinMargins(self) -> Margins:
        """
        Get: MinMargins(self: PageSetupDialog) -> Margins
        Set: MinMargins(self: PageSetupDialog) = value
        """
        ...

    @property
    def PageSettings(self) -> PageSettings:
        """
        Get: PageSettings(self: PageSetupDialog) -> PageSettings
        Set: PageSettings(self: PageSetupDialog) = value
        """
        ...

    @property
    def PrinterSettings(self) -> PrinterSettings:
        """
        Get: PrinterSettings(self: PageSetupDialog) -> PrinterSettings
        Set: PrinterSettings(self: PageSetupDialog) = value
        """
        ...

    @property
    def ShowHelp(self) -> bool:
        """
        Get: ShowHelp(self: PageSetupDialog) -> bool
        Set: ShowHelp(self: PageSetupDialog) = value
        """
        ...

    @property
    def ShowNetwork(self) -> bool:
        """
        Get: ShowNetwork(self: PageSetupDialog) -> bool
        Set: ShowNetwork(self: PageSetupDialog) = value
        """
        ...



class PaintEventArgs(IDisposable, EventArgs): # skipped bases: <type 'object'>
    """ PaintEventArgs(graphics: Graphics, clipRect: Rectangle) """
    @property
    def ClipRectangle(self) -> Rectangle:
        """ Get: ClipRectangle(self: PaintEventArgs) -> Rectangle """
        ...

    @property
    def Graphics(self) -> Graphics:
        """ Get: Graphics(self: PaintEventArgs) -> Graphics """
        ...


    def __new__(cls, graphics:Graphics, clipRect:Rectangle) -> Self:
        """ __new__(cls: type, graphics: Graphics, clipRect: Rectangle) """
        ...


class PaintEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ PaintEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:PaintEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: PaintEventHandler, sender: object, e: PaintEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: PaintEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:PaintEventArgs): # -> 
        """ Invoke(self: PaintEventHandler, sender: object, e: PaintEventArgs) """
        ...


class PictureBox(Control, ISupportInitialize): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ PictureBox() """
    @property
    def BorderStyle(self) -> BorderStyle:
        """
        Get: BorderStyle(self: PictureBox) -> BorderStyle
        Set: BorderStyle(self: PictureBox) = value
        """
        ...

    @property
    def ErrorImage(self) -> Image:
        """
        Get: ErrorImage(self: PictureBox) -> Image
        Set: ErrorImage(self: PictureBox) = value
        """
        ...

    @property
    def Image(self) -> Image:
        """
        Get: Image(self: PictureBox) -> Image
        Set: Image(self: PictureBox) = value
        """
        ...

    @property
    def ImageLocation(self) -> str:
        """
        Get: ImageLocation(self: PictureBox) -> str
        Set: ImageLocation(self: PictureBox) = value
        """
        ...

    @property
    def InitialImage(self) -> Image:
        """
        Get: InitialImage(self: PictureBox) -> Image
        Set: InitialImage(self: PictureBox) = value
        """
        ...

    @property
    def SizeMode(self): # -> PictureBoxSizeMode
        """
        Get: SizeMode(self: PictureBox) -> PictureBoxSizeMode
        Set: SizeMode(self: PictureBox) = value
        """
        ...

    @property
    def WaitOnLoad(self) -> bool:
        """
        Get: WaitOnLoad(self: PictureBox) -> bool
        Set: WaitOnLoad(self: PictureBox) = value
        """
        ...


    def CancelAsync(self): # -> 
        """ CancelAsync(self: PictureBox) """
        ...

    def Load(self, url:str = ...): # -> 
        """ Load(self: PictureBox)Load(self: PictureBox, url: str) """
        ...

    def LoadAsync(self, url:str = ...): # -> 
        """ LoadAsync(self: PictureBox)LoadAsync(self: PictureBox, url: str) """
        ...

    def OnLoadCompleted(self, *args): #cannot find CLR method
        """ OnLoadCompleted(self: PictureBox, e: AsyncCompletedEventArgs) """
        ...

    def OnLoadProgressChanged(self, *args): #cannot find CLR method
        """ OnLoadProgressChanged(self: PictureBox, e: ProgressChangedEventArgs) """
        ...

    def OnSizeModeChanged(self, *args): #cannot find CLR method
        """ OnSizeModeChanged(self: PictureBox, e: EventArgs) """
        ...

    def ToString(self) -> str:
        """ ToString(self: PictureBox) -> str """
        ...

    CausesValidationChanged = ...
    Enter = ...
    FontChanged = ...
    ForeColorChanged = ...
    ImeModeChanged = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Leave = ...
    LoadCompleted = ...
    LoadProgressChanged = ...
    RightToLeftChanged = ...
    SizeModeChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    TextChanged = ...


class PictureBoxSizeMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum PictureBoxSizeMode, values: AutoSize (2), CenterImage (3), Normal (0), StretchImage (1), Zoom (4) """
    AutoSize: PictureBoxSizeMode = ...
    CenterImage: PictureBoxSizeMode = ...
    Normal: PictureBoxSizeMode = ...
    StretchImage: PictureBoxSizeMode = ...
    value__ = ...
    Zoom: PictureBoxSizeMode = ...


class PopupEventArgs(CancelEventArgs): # skipped bases: <type 'object'>
    """ PopupEventArgs(associatedWindow: IWin32Window, associatedControl: Control, isBalloon: bool, size: Size) """
    @property
    def AssociatedControl(self) -> Control:
        """ Get: AssociatedControl(self: PopupEventArgs) -> Control """
        ...

    @property
    def AssociatedWindow(self) -> IWin32Window:
        """ Get: AssociatedWindow(self: PopupEventArgs) -> IWin32Window """
        ...

    @property
    def IsBalloon(self) -> bool:
        """ Get: IsBalloon(self: PopupEventArgs) -> bool """
        ...

    @property
    def ToolTipSize(self) -> Size:
        """
        Get: ToolTipSize(self: PopupEventArgs) -> Size
        Set: ToolTipSize(self: PopupEventArgs) = value
        """
        ...



class PopupEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ PopupEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:PopupEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: PopupEventHandler, sender: object, e: PopupEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: PopupEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:PopupEventArgs): # -> 
        """ Invoke(self: PopupEventHandler, sender: object, e: PopupEventArgs) """
        ...


class PowerLineStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum PowerLineStatus, values: Offline (0), Online (1), Unknown (255) """
    Offline: PowerLineStatus = ...
    Online: PowerLineStatus = ...
    Unknown: PowerLineStatus = ...
    value__ = ...


class PowerState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum PowerState, values: Hibernate (1), Suspend (0) """
    Hibernate: PowerState = ...
    Suspend: PowerState = ...
    value__ = ...


class PowerStatus: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def BatteryChargeStatus(self) -> BatteryChargeStatus:
        """ Get: BatteryChargeStatus(self: PowerStatus) -> BatteryChargeStatus """
        ...

    @property
    def BatteryFullLifetime(self) -> int:
        """ Get: BatteryFullLifetime(self: PowerStatus) -> int """
        ...

    @property
    def BatteryLifePercent(self) -> Single:
        """ Get: BatteryLifePercent(self: PowerStatus) -> Single """
        ...

    @property
    def BatteryLifeRemaining(self) -> int:
        """ Get: BatteryLifeRemaining(self: PowerStatus) -> int """
        ...

    @property
    def PowerLineStatus(self) -> PowerLineStatus:
        """ Get: PowerLineStatus(self: PowerStatus) -> PowerLineStatus """
        ...



class PreProcessControlState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum PreProcessControlState, values: MessageNeeded (1), MessageNotNeeded (2), MessageProcessed (0) """
    MessageNeeded: PreProcessControlState = ...
    MessageNotNeeded: PreProcessControlState = ...
    MessageProcessed: PreProcessControlState = ...
    value__ = ...


class PreviewKeyDownEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ PreviewKeyDownEventArgs(keyData: Keys) """
    @property
    def Alt(self) -> bool:
        """ Get: Alt(self: PreviewKeyDownEventArgs) -> bool """
        ...

    @property
    def Control(self) -> bool:
        """ Get: Control(self: PreviewKeyDownEventArgs) -> bool """
        ...

    @property
    def IsInputKey(self) -> bool:
        """
        Get: IsInputKey(self: PreviewKeyDownEventArgs) -> bool
        Set: IsInputKey(self: PreviewKeyDownEventArgs) = value
        """
        ...

    @property
    def KeyCode(self) -> Keys:
        """ Get: KeyCode(self: PreviewKeyDownEventArgs) -> Keys """
        ...

    @property
    def KeyData(self) -> Keys:
        """ Get: KeyData(self: PreviewKeyDownEventArgs) -> Keys """
        ...

    @property
    def KeyValue(self) -> int:
        """ Get: KeyValue(self: PreviewKeyDownEventArgs) -> int """
        ...

    @property
    def Modifiers(self) -> Keys:
        """ Get: Modifiers(self: PreviewKeyDownEventArgs) -> Keys """
        ...

    @property
    def Shift(self) -> bool:
        """ Get: Shift(self: PreviewKeyDownEventArgs) -> bool """
        ...


    def __new__(cls, keyData:Keys) -> Self:
        """ __new__(cls: type, keyData: Keys) """
        ...


class PreviewKeyDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ PreviewKeyDownEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:PreviewKeyDownEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: PreviewKeyDownEventHandler, sender: object, e: PreviewKeyDownEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: PreviewKeyDownEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:PreviewKeyDownEventArgs): # -> 
        """ Invoke(self: PreviewKeyDownEventHandler, sender: object, e: PreviewKeyDownEventArgs) """
        ...


class PrintControllerWithStatusDialog(PrintController): # skipped bases: <type 'object'>
    """
    PrintControllerWithStatusDialog(underlyingController: PrintController)
    PrintControllerWithStatusDialog(underlyingController: PrintController, dialogTitle: str)
    """
    def __new__(cls, underlyingController:PrintController, dialogTitle:str = ...) -> Self:
        """
        __new__(cls: type, underlyingController: PrintController)
        __new__(cls: type, underlyingController: PrintController, dialogTitle: str)
        """
        ...


class PrintDialog(CommonDialog): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """ PrintDialog() """
    @property
    def AllowCurrentPage(self) -> bool:
        """
        Get: AllowCurrentPage(self: PrintDialog) -> bool
        Set: AllowCurrentPage(self: PrintDialog) = value
        """
        ...

    @property
    def AllowPrintToFile(self) -> bool:
        """
        Get: AllowPrintToFile(self: PrintDialog) -> bool
        Set: AllowPrintToFile(self: PrintDialog) = value
        """
        ...

    @property
    def AllowSelection(self) -> bool:
        """
        Get: AllowSelection(self: PrintDialog) -> bool
        Set: AllowSelection(self: PrintDialog) = value
        """
        ...

    @property
    def AllowSomePages(self) -> bool:
        """
        Get: AllowSomePages(self: PrintDialog) -> bool
        Set: AllowSomePages(self: PrintDialog) = value
        """
        ...

    @property
    def Document(self) -> PrintDocument:
        """
        Get: Document(self: PrintDialog) -> PrintDocument
        Set: Document(self: PrintDialog) = value
        """
        ...

    @property
    def PrinterSettings(self) -> PrinterSettings:
        """
        Get: PrinterSettings(self: PrintDialog) -> PrinterSettings
        Set: PrinterSettings(self: PrintDialog) = value
        """
        ...

    @property
    def PrintToFile(self) -> bool:
        """
        Get: PrintToFile(self: PrintDialog) -> bool
        Set: PrintToFile(self: PrintDialog) = value
        """
        ...

    @property
    def ShowHelp(self) -> bool:
        """
        Get: ShowHelp(self: PrintDialog) -> bool
        Set: ShowHelp(self: PrintDialog) = value
        """
        ...

    @property
    def ShowNetwork(self) -> bool:
        """
        Get: ShowNetwork(self: PrintDialog) -> bool
        Set: ShowNetwork(self: PrintDialog) = value
        """
        ...

    @property
    def UseEXDialog(self) -> bool:
        """
        Get: UseEXDialog(self: PrintDialog) -> bool
        Set: UseEXDialog(self: PrintDialog) = value
        """
        ...



class PrintPreviewControl(Control): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ PrintPreviewControl() """
    @property
    def AutoZoom(self) -> bool:
        """
        Get: AutoZoom(self: PrintPreviewControl) -> bool
        Set: AutoZoom(self: PrintPreviewControl) = value
        """
        ...

    @property
    def Columns(self) -> int:
        """
        Get: Columns(self: PrintPreviewControl) -> int
        Set: Columns(self: PrintPreviewControl) = value
        """
        ...

    @property
    def Document(self) -> PrintDocument:
        """
        Get: Document(self: PrintPreviewControl) -> PrintDocument
        Set: Document(self: PrintPreviewControl) = value
        """
        ...

    @property
    def Rows(self) -> int:
        """
        Get: Rows(self: PrintPreviewControl) -> int
        Set: Rows(self: PrintPreviewControl) = value
        """
        ...

    @property
    def StartPage(self) -> int:
        """
        Get: StartPage(self: PrintPreviewControl) -> int
        Set: StartPage(self: PrintPreviewControl) = value
        """
        ...

    @property
    def UseAntiAlias(self) -> bool:
        """
        Get: UseAntiAlias(self: PrintPreviewControl) -> bool
        Set: UseAntiAlias(self: PrintPreviewControl) = value
        """
        ...

    @property
    def Zoom(self) -> float:
        """
        Get: Zoom(self: PrintPreviewControl) -> float
        Set: Zoom(self: PrintPreviewControl) = value
        """
        ...


    def InvalidatePreview(self): # -> 
        """ InvalidatePreview(self: PrintPreviewControl) """
        ...

    def OnStartPageChanged(self, *args): #cannot find CLR method
        """ OnStartPageChanged(self: PrintPreviewControl, e: EventArgs) """
        ...

    StartPageChanged = ...
    TextChanged = ...


class PrintPreviewDialog(Form): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IViewObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'IContainerControl'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IOleObject'>, <type 'object'>
    """ PrintPreviewDialog() """
    @property
    def AccessibleDescription(self) -> str:
        """
        Get: AccessibleDescription(self: PrintPreviewDialog) -> str
        Set: AccessibleDescription(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def AccessibleName(self) -> str:
        """
        Get: AccessibleName(self: PrintPreviewDialog) -> str
        Set: AccessibleName(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def AccessibleRole(self) -> AccessibleRole:
        """
        Get: AccessibleRole(self: PrintPreviewDialog) -> AccessibleRole
        Set: AccessibleRole(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def AllowDrop(self) -> bool:
        """
        Get: AllowDrop(self: PrintPreviewDialog) -> bool
        Set: AllowDrop(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def Anchor(self) -> AnchorStyles:
        """
        Get: Anchor(self: PrintPreviewDialog) -> AnchorStyles
        Set: Anchor(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def AutoScrollMargin(self) -> Size:
        """
        Get: AutoScrollMargin(self: PrintPreviewDialog) -> Size
        Set: AutoScrollMargin(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def AutoScrollMinSize(self) -> Size:
        """
        Get: AutoScrollMinSize(self: PrintPreviewDialog) -> Size
        Set: AutoScrollMinSize(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def BackgroundImage(self) -> Image:
        """
        Get: BackgroundImage(self: PrintPreviewDialog) -> Image
        Set: BackgroundImage(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def BackgroundImageLayout(self) -> ImageLayout:
        """
        Get: BackgroundImageLayout(self: PrintPreviewDialog) -> ImageLayout
        Set: BackgroundImageLayout(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def CausesValidation(self) -> bool:
        """
        Get: CausesValidation(self: PrintPreviewDialog) -> bool
        Set: CausesValidation(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def ContextMenu(self) -> ContextMenu:
        """
        Get: ContextMenu(self: PrintPreviewDialog) -> ContextMenu
        Set: ContextMenu(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def ContextMenuStrip(self) -> ContextMenuStrip:
        """
        Get: ContextMenuStrip(self: PrintPreviewDialog) -> ContextMenuStrip
        Set: ContextMenuStrip(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def Cursor(self) -> Cursor:
        """
        Get: Cursor(self: PrintPreviewDialog) -> Cursor
        Set: Cursor(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def Dock(self) -> DockStyle:
        """
        Get: Dock(self: PrintPreviewDialog) -> DockStyle
        Set: Dock(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def DockPadding(self): # -> DockPaddingEdges
        """ Get: DockPadding(self: PrintPreviewDialog) -> DockPaddingEdges """
        ...

    @property
    def Document(self) -> PrintDocument:
        """
        Get: Document(self: PrintPreviewDialog) -> PrintDocument
        Set: Document(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: PrintPreviewDialog) -> bool
        Set: Enabled(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: PrintPreviewDialog) -> Font
        Set: Font(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def ForeColor(self) -> Color:
        """
        Get: ForeColor(self: PrintPreviewDialog) -> Color
        Set: ForeColor(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def ImeMode(self) -> ImeMode:
        """
        Get: ImeMode(self: PrintPreviewDialog) -> ImeMode
        Set: ImeMode(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def Padding(self) -> Padding:
        """
        Get: Padding(self: PrintPreviewDialog) -> Padding
        Set: Padding(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def PrintPreviewControl(self) -> PrintPreviewControl:
        """ Get: PrintPreviewControl(self: PrintPreviewDialog) -> PrintPreviewControl """
        ...

    @property
    def RightToLeft(self): # -> RightToLeft
        """
        Get: RightToLeft(self: PrintPreviewDialog) -> RightToLeft
        Set: RightToLeft(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: PrintPreviewDialog) -> object
        Set: Tag(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def UseAntiAlias(self) -> bool:
        """
        Get: UseAntiAlias(self: PrintPreviewDialog) -> bool
        Set: UseAntiAlias(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def UseWaitCursor(self) -> bool:
        """
        Get: UseWaitCursor(self: PrintPreviewDialog) -> bool
        Set: UseWaitCursor(self: PrintPreviewDialog) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: PrintPreviewDialog) -> bool
        Set: Visible(self: PrintPreviewDialog) = value
        """
        ...


    AutoSizeChanged = ...
    AutoValidateChanged = ...
    BackColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    CausesValidationChanged = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    CursorChanged = ...
    DockChanged = ...
    EnabledChanged = ...
    FontChanged = ...
    ForeColorChanged = ...
    ImeModeChanged = ...
    LocationChanged = ...
    MarginChanged = ...
    MaximumSizeChanged = ...
    MinimumSizeChanged = ...
    PaddingChanged = ...
    RightToLeftChanged = ...
    RightToLeftLayoutChanged = ...
    SizeChanged = ...
    TabStopChanged = ...
    TextChanged = ...
    VisibleChanged = ...


class ProfessionalColors: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def ButtonCheckedGradientBegin(self) -> Color:
        """ Get: ButtonCheckedGradientBegin() -> Color """
        ...

    @property
    def ButtonCheckedGradientEnd(self) -> Color:
        """ Get: ButtonCheckedGradientEnd() -> Color """
        ...

    @property
    def ButtonCheckedGradientMiddle(self) -> Color:
        """ Get: ButtonCheckedGradientMiddle() -> Color """
        ...

    @property
    def ButtonCheckedHighlight(self) -> Color:
        """ Get: ButtonCheckedHighlight() -> Color """
        ...

    @property
    def ButtonCheckedHighlightBorder(self) -> Color:
        """ Get: ButtonCheckedHighlightBorder() -> Color """
        ...

    @property
    def ButtonPressedBorder(self) -> Color:
        """ Get: ButtonPressedBorder() -> Color """
        ...

    @property
    def ButtonPressedGradientBegin(self) -> Color:
        """ Get: ButtonPressedGradientBegin() -> Color """
        ...

    @property
    def ButtonPressedGradientEnd(self) -> Color:
        """ Get: ButtonPressedGradientEnd() -> Color """
        ...

    @property
    def ButtonPressedGradientMiddle(self) -> Color:
        """ Get: ButtonPressedGradientMiddle() -> Color """
        ...

    @property
    def ButtonPressedHighlight(self) -> Color:
        """ Get: ButtonPressedHighlight() -> Color """
        ...

    @property
    def ButtonPressedHighlightBorder(self) -> Color:
        """ Get: ButtonPressedHighlightBorder() -> Color """
        ...

    @property
    def ButtonSelectedBorder(self) -> Color:
        """ Get: ButtonSelectedBorder() -> Color """
        ...

    @property
    def ButtonSelectedGradientBegin(self) -> Color:
        """ Get: ButtonSelectedGradientBegin() -> Color """
        ...

    @property
    def ButtonSelectedGradientEnd(self) -> Color:
        """ Get: ButtonSelectedGradientEnd() -> Color """
        ...

    @property
    def ButtonSelectedGradientMiddle(self) -> Color:
        """ Get: ButtonSelectedGradientMiddle() -> Color """
        ...

    @property
    def ButtonSelectedHighlight(self) -> Color:
        """ Get: ButtonSelectedHighlight() -> Color """
        ...

    @property
    def ButtonSelectedHighlightBorder(self) -> Color:
        """ Get: ButtonSelectedHighlightBorder() -> Color """
        ...

    @property
    def CheckBackground(self) -> Color:
        """ Get: CheckBackground() -> Color """
        ...

    @property
    def CheckPressedBackground(self) -> Color:
        """ Get: CheckPressedBackground() -> Color """
        ...

    @property
    def CheckSelectedBackground(self) -> Color:
        """ Get: CheckSelectedBackground() -> Color """
        ...

    @property
    def GripDark(self) -> Color:
        """ Get: GripDark() -> Color """
        ...

    @property
    def GripLight(self) -> Color:
        """ Get: GripLight() -> Color """
        ...

    @property
    def ImageMarginGradientBegin(self) -> Color:
        """ Get: ImageMarginGradientBegin() -> Color """
        ...

    @property
    def ImageMarginGradientEnd(self) -> Color:
        """ Get: ImageMarginGradientEnd() -> Color """
        ...

    @property
    def ImageMarginGradientMiddle(self) -> Color:
        """ Get: ImageMarginGradientMiddle() -> Color """
        ...

    @property
    def ImageMarginRevealedGradientBegin(self) -> Color:
        """ Get: ImageMarginRevealedGradientBegin() -> Color """
        ...

    @property
    def ImageMarginRevealedGradientEnd(self) -> Color:
        """ Get: ImageMarginRevealedGradientEnd() -> Color """
        ...

    @property
    def ImageMarginRevealedGradientMiddle(self) -> Color:
        """ Get: ImageMarginRevealedGradientMiddle() -> Color """
        ...

    @property
    def MenuBorder(self) -> Color:
        """ Get: MenuBorder() -> Color """
        ...

    @property
    def MenuItemBorder(self) -> Color:
        """ Get: MenuItemBorder() -> Color """
        ...

    @property
    def MenuItemPressedGradientBegin(self) -> Color:
        """ Get: MenuItemPressedGradientBegin() -> Color """
        ...

    @property
    def MenuItemPressedGradientEnd(self) -> Color:
        """ Get: MenuItemPressedGradientEnd() -> Color """
        ...

    @property
    def MenuItemPressedGradientMiddle(self) -> Color:
        """ Get: MenuItemPressedGradientMiddle() -> Color """
        ...

    @property
    def MenuItemSelected(self) -> Color:
        """ Get: MenuItemSelected() -> Color """
        ...

    @property
    def MenuItemSelectedGradientBegin(self) -> Color:
        """ Get: MenuItemSelectedGradientBegin() -> Color """
        ...

    @property
    def MenuItemSelectedGradientEnd(self) -> Color:
        """ Get: MenuItemSelectedGradientEnd() -> Color """
        ...

    @property
    def MenuStripGradientBegin(self) -> Color:
        """ Get: MenuStripGradientBegin() -> Color """
        ...

    @property
    def MenuStripGradientEnd(self) -> Color:
        """ Get: MenuStripGradientEnd() -> Color """
        ...

    @property
    def OverflowButtonGradientBegin(self) -> Color:
        """ Get: OverflowButtonGradientBegin() -> Color """
        ...

    @property
    def OverflowButtonGradientEnd(self) -> Color:
        """ Get: OverflowButtonGradientEnd() -> Color """
        ...

    @property
    def OverflowButtonGradientMiddle(self) -> Color:
        """ Get: OverflowButtonGradientMiddle() -> Color """
        ...

    @property
    def RaftingContainerGradientBegin(self) -> Color:
        """ Get: RaftingContainerGradientBegin() -> Color """
        ...

    @property
    def RaftingContainerGradientEnd(self) -> Color:
        """ Get: RaftingContainerGradientEnd() -> Color """
        ...

    @property
    def SeparatorDark(self) -> Color:
        """ Get: SeparatorDark() -> Color """
        ...

    @property
    def SeparatorLight(self) -> Color:
        """ Get: SeparatorLight() -> Color """
        ...

    @property
    def StatusStripGradientBegin(self) -> Color:
        """ Get: StatusStripGradientBegin() -> Color """
        ...

    @property
    def StatusStripGradientEnd(self) -> Color:
        """ Get: StatusStripGradientEnd() -> Color """
        ...

    @property
    def ToolStripBorder(self) -> Color:
        """ Get: ToolStripBorder() -> Color """
        ...

    @property
    def ToolStripContentPanelGradientBegin(self) -> Color:
        """ Get: ToolStripContentPanelGradientBegin() -> Color """
        ...

    @property
    def ToolStripContentPanelGradientEnd(self) -> Color:
        """ Get: ToolStripContentPanelGradientEnd() -> Color """
        ...

    @property
    def ToolStripDropDownBackground(self) -> Color:
        """ Get: ToolStripDropDownBackground() -> Color """
        ...

    @property
    def ToolStripGradientBegin(self) -> Color:
        """ Get: ToolStripGradientBegin() -> Color """
        ...

    @property
    def ToolStripGradientEnd(self) -> Color:
        """ Get: ToolStripGradientEnd() -> Color """
        ...

    @property
    def ToolStripGradientMiddle(self) -> Color:
        """ Get: ToolStripGradientMiddle() -> Color """
        ...

    @property
    def ToolStripPanelGradientBegin(self) -> Color:
        """ Get: ToolStripPanelGradientBegin() -> Color """
        ...

    @property
    def ToolStripPanelGradientEnd(self) -> Color:
        """ Get: ToolStripPanelGradientEnd() -> Color """
        ...




class ProfessionalColorTable: # skipped bases: <type 'object'>, <type 'object'>
    """ ProfessionalColorTable() """
    @property
    def ButtonCheckedGradientBegin(self) -> Color:
        """ Get: ButtonCheckedGradientBegin(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ButtonCheckedGradientEnd(self) -> Color:
        """ Get: ButtonCheckedGradientEnd(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ButtonCheckedGradientMiddle(self) -> Color:
        """ Get: ButtonCheckedGradientMiddle(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ButtonCheckedHighlight(self) -> Color:
        """ Get: ButtonCheckedHighlight(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ButtonCheckedHighlightBorder(self) -> Color:
        """ Get: ButtonCheckedHighlightBorder(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ButtonPressedBorder(self) -> Color:
        """ Get: ButtonPressedBorder(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ButtonPressedGradientBegin(self) -> Color:
        """ Get: ButtonPressedGradientBegin(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ButtonPressedGradientEnd(self) -> Color:
        """ Get: ButtonPressedGradientEnd(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ButtonPressedGradientMiddle(self) -> Color:
        """ Get: ButtonPressedGradientMiddle(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ButtonPressedHighlight(self) -> Color:
        """ Get: ButtonPressedHighlight(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ButtonPressedHighlightBorder(self) -> Color:
        """ Get: ButtonPressedHighlightBorder(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ButtonSelectedBorder(self) -> Color:
        """ Get: ButtonSelectedBorder(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ButtonSelectedGradientBegin(self) -> Color:
        """ Get: ButtonSelectedGradientBegin(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ButtonSelectedGradientEnd(self) -> Color:
        """ Get: ButtonSelectedGradientEnd(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ButtonSelectedGradientMiddle(self) -> Color:
        """ Get: ButtonSelectedGradientMiddle(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ButtonSelectedHighlight(self) -> Color:
        """ Get: ButtonSelectedHighlight(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ButtonSelectedHighlightBorder(self) -> Color:
        """ Get: ButtonSelectedHighlightBorder(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def CheckBackground(self) -> Color:
        """ Get: CheckBackground(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def CheckPressedBackground(self) -> Color:
        """ Get: CheckPressedBackground(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def CheckSelectedBackground(self) -> Color:
        """ Get: CheckSelectedBackground(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def GripDark(self) -> Color:
        """ Get: GripDark(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def GripLight(self) -> Color:
        """ Get: GripLight(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ImageMarginGradientBegin(self) -> Color:
        """ Get: ImageMarginGradientBegin(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ImageMarginGradientEnd(self) -> Color:
        """ Get: ImageMarginGradientEnd(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ImageMarginGradientMiddle(self) -> Color:
        """ Get: ImageMarginGradientMiddle(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ImageMarginRevealedGradientBegin(self) -> Color:
        """ Get: ImageMarginRevealedGradientBegin(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ImageMarginRevealedGradientEnd(self) -> Color:
        """ Get: ImageMarginRevealedGradientEnd(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ImageMarginRevealedGradientMiddle(self) -> Color:
        """ Get: ImageMarginRevealedGradientMiddle(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def MenuBorder(self) -> Color:
        """ Get: MenuBorder(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def MenuItemBorder(self) -> Color:
        """ Get: MenuItemBorder(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def MenuItemPressedGradientBegin(self) -> Color:
        """ Get: MenuItemPressedGradientBegin(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def MenuItemPressedGradientEnd(self) -> Color:
        """ Get: MenuItemPressedGradientEnd(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def MenuItemPressedGradientMiddle(self) -> Color:
        """ Get: MenuItemPressedGradientMiddle(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def MenuItemSelected(self) -> Color:
        """ Get: MenuItemSelected(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def MenuItemSelectedGradientBegin(self) -> Color:
        """ Get: MenuItemSelectedGradientBegin(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def MenuItemSelectedGradientEnd(self) -> Color:
        """ Get: MenuItemSelectedGradientEnd(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def MenuStripGradientBegin(self) -> Color:
        """ Get: MenuStripGradientBegin(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def MenuStripGradientEnd(self) -> Color:
        """ Get: MenuStripGradientEnd(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def OverflowButtonGradientBegin(self) -> Color:
        """ Get: OverflowButtonGradientBegin(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def OverflowButtonGradientEnd(self) -> Color:
        """ Get: OverflowButtonGradientEnd(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def OverflowButtonGradientMiddle(self) -> Color:
        """ Get: OverflowButtonGradientMiddle(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def RaftingContainerGradientBegin(self) -> Color:
        """ Get: RaftingContainerGradientBegin(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def RaftingContainerGradientEnd(self) -> Color:
        """ Get: RaftingContainerGradientEnd(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def SeparatorDark(self) -> Color:
        """ Get: SeparatorDark(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def SeparatorLight(self) -> Color:
        """ Get: SeparatorLight(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def StatusStripGradientBegin(self) -> Color:
        """ Get: StatusStripGradientBegin(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def StatusStripGradientEnd(self) -> Color:
        """ Get: StatusStripGradientEnd(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ToolStripBorder(self) -> Color:
        """ Get: ToolStripBorder(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ToolStripContentPanelGradientBegin(self) -> Color:
        """ Get: ToolStripContentPanelGradientBegin(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ToolStripContentPanelGradientEnd(self) -> Color:
        """ Get: ToolStripContentPanelGradientEnd(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ToolStripDropDownBackground(self) -> Color:
        """ Get: ToolStripDropDownBackground(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ToolStripGradientBegin(self) -> Color:
        """ Get: ToolStripGradientBegin(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ToolStripGradientEnd(self) -> Color:
        """ Get: ToolStripGradientEnd(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ToolStripGradientMiddle(self) -> Color:
        """ Get: ToolStripGradientMiddle(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ToolStripPanelGradientBegin(self) -> Color:
        """ Get: ToolStripPanelGradientBegin(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def ToolStripPanelGradientEnd(self) -> Color:
        """ Get: ToolStripPanelGradientEnd(self: ProfessionalColorTable) -> Color """
        ...

    @property
    def UseSystemColors(self) -> bool:
        """
        Get: UseSystemColors(self: ProfessionalColorTable) -> bool
        Set: UseSystemColors(self: ProfessionalColorTable) = value
        """
        ...



class ProgressBar(Control): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ ProgressBar() """
    @property
    def MarqueeAnimationSpeed(self) -> int:
        """
        Get: MarqueeAnimationSpeed(self: ProgressBar) -> int
        Set: MarqueeAnimationSpeed(self: ProgressBar) = value
        """
        ...

    @property
    def Maximum(self) -> int:
        """
        Get: Maximum(self: ProgressBar) -> int
        Set: Maximum(self: ProgressBar) = value
        """
        ...

    @property
    def Minimum(self) -> int:
        """
        Get: Minimum(self: ProgressBar) -> int
        Set: Minimum(self: ProgressBar) = value
        """
        ...

    @property
    def RightToLeftLayout(self) -> bool:
        """
        Get: RightToLeftLayout(self: ProgressBar) -> bool
        Set: RightToLeftLayout(self: ProgressBar) = value
        """
        ...

    @property
    def Step(self) -> int:
        """
        Get: Step(self: ProgressBar) -> int
        Set: Step(self: ProgressBar) = value
        """
        ...

    @property
    def Style(self): # -> ProgressBarStyle
        """
        Get: Style(self: ProgressBar) -> ProgressBarStyle
        Set: Style(self: ProgressBar) = value
        """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: ProgressBar) -> int
        Set: Value(self: ProgressBar) = value
        """
        ...


    def Increment(self, value:int): # -> 
        """ Increment(self: ProgressBar, value: int) """
        ...

    def OnRightToLeftLayoutChanged(self, *args): #cannot find CLR method
        """ OnRightToLeftLayoutChanged(self: ProgressBar, e: EventArgs) """
        ...

    def PerformStep(self): # -> 
        """ PerformStep(self: ProgressBar) """
        ...

    def ToString(self) -> str:
        """ ToString(self: ProgressBar) -> str """
        ...

    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    CausesValidationChanged = ...
    DoubleClick = ...
    Enter = ...
    FontChanged = ...
    ImeModeChanged = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Leave = ...
    MouseDoubleClick = ...
    PaddingChanged = ...
    Paint = ...
    RightToLeftLayoutChanged = ...
    TabStopChanged = ...
    TextChanged = ...


class ProgressBarRenderer: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def ChunkSpaceThickness(self) -> int:
        """ Get: ChunkSpaceThickness() -> int """
        ...

    @property
    def ChunkThickness(self) -> int:
        """ Get: ChunkThickness() -> int """
        ...

    @property
    def IsSupported(self) -> bool:
        """ Get: IsSupported() -> bool """
        ...


    @staticmethod
    def DrawHorizontalBar(g:Graphics, bounds:Rectangle): # -> 
        """ DrawHorizontalBar(g: Graphics, bounds: Rectangle) """
        ...

    @staticmethod
    def DrawHorizontalChunks(g:Graphics, bounds:Rectangle): # -> 
        """ DrawHorizontalChunks(g: Graphics, bounds: Rectangle) """
        ...

    @staticmethod
    def DrawVerticalBar(g:Graphics, bounds:Rectangle): # -> 
        """ DrawVerticalBar(g: Graphics, bounds: Rectangle) """
        ...

    @staticmethod
    def DrawVerticalChunks(g:Graphics, bounds:Rectangle): # -> 
        """ DrawVerticalChunks(g: Graphics, bounds: Rectangle) """
        ...



class ProgressBarStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ProgressBarStyle, values: Blocks (0), Continuous (1), Marquee (2) """
    Blocks: ProgressBarStyle = ...
    Continuous: ProgressBarStyle = ...
    Marquee: ProgressBarStyle = ...
    value__ = ...


class PropertyGrid(IPropertyNotifySink, IComPropertyBrowser, ContainerControl): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'IContainerControl'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ PropertyGrid() """
    @property
    def AutoScroll(self) -> bool:
        """
        Get: AutoScroll(self: PropertyGrid) -> bool
        Set: AutoScroll(self: PropertyGrid) = value
        """
        ...

    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: PropertyGrid) -> Color
        Set: BackColor(self: PropertyGrid) = value
        """
        ...

    @property
    def BackgroundImage(self) -> Image:
        """
        Get: BackgroundImage(self: PropertyGrid) -> Image
        Set: BackgroundImage(self: PropertyGrid) = value
        """
        ...

    @property
    def BackgroundImageLayout(self) -> ImageLayout:
        """
        Get: BackgroundImageLayout(self: PropertyGrid) -> ImageLayout
        Set: BackgroundImageLayout(self: PropertyGrid) = value
        """
        ...

    @property
    def BrowsableAttributes(self) -> AttributeCollection:
        """
        Get: BrowsableAttributes(self: PropertyGrid) -> AttributeCollection
        Set: BrowsableAttributes(self: PropertyGrid) = value
        """
        ...

    @property
    def CanShowCommands(self) -> bool:
        """ Get: CanShowCommands(self: PropertyGrid) -> bool """
        ...

    @property
    def CanShowVisualStyleGlyphs(self) -> bool:
        """
        Get: CanShowVisualStyleGlyphs(self: PropertyGrid) -> bool
        Set: CanShowVisualStyleGlyphs(self: PropertyGrid) = value
        """
        ...

    @property
    def CategoryForeColor(self) -> Color:
        """
        Get: CategoryForeColor(self: PropertyGrid) -> Color
        Set: CategoryForeColor(self: PropertyGrid) = value
        """
        ...

    @property
    def CategorySplitterColor(self) -> Color:
        """
        Get: CategorySplitterColor(self: PropertyGrid) -> Color
        Set: CategorySplitterColor(self: PropertyGrid) = value
        """
        ...

    @property
    def CommandsActiveLinkColor(self) -> Color:
        """
        Get: CommandsActiveLinkColor(self: PropertyGrid) -> Color
        Set: CommandsActiveLinkColor(self: PropertyGrid) = value
        """
        ...

    @property
    def CommandsBackColor(self) -> Color:
        """
        Get: CommandsBackColor(self: PropertyGrid) -> Color
        Set: CommandsBackColor(self: PropertyGrid) = value
        """
        ...

    @property
    def CommandsBorderColor(self) -> Color:
        """
        Get: CommandsBorderColor(self: PropertyGrid) -> Color
        Set: CommandsBorderColor(self: PropertyGrid) = value
        """
        ...

    @property
    def CommandsDisabledLinkColor(self) -> Color:
        """
        Get: CommandsDisabledLinkColor(self: PropertyGrid) -> Color
        Set: CommandsDisabledLinkColor(self: PropertyGrid) = value
        """
        ...

    @property
    def CommandsForeColor(self) -> Color:
        """
        Get: CommandsForeColor(self: PropertyGrid) -> Color
        Set: CommandsForeColor(self: PropertyGrid) = value
        """
        ...

    @property
    def CommandsLinkColor(self) -> Color:
        """
        Get: CommandsLinkColor(self: PropertyGrid) -> Color
        Set: CommandsLinkColor(self: PropertyGrid) = value
        """
        ...

    @property
    def CommandsVisible(self) -> bool:
        """ Get: CommandsVisible(self: PropertyGrid) -> bool """
        ...

    @property
    def CommandsVisibleIfAvailable(self) -> bool:
        """
        Get: CommandsVisibleIfAvailable(self: PropertyGrid) -> bool
        Set: CommandsVisibleIfAvailable(self: PropertyGrid) = value
        """
        ...

    @property
    def ContextMenuDefaultLocation(self) -> Point:
        """ Get: ContextMenuDefaultLocation(self: PropertyGrid) -> Point """
        ...

    @property
    def Controls(self) -> ControlCollection:
        """ Get: Controls(self: PropertyGrid) -> ControlCollection """
        ...

    @property
    def DefaultTabType(self):
        ...

    @property
    def DisabledItemForeColor(self) -> Color:
        """
        Get: DisabledItemForeColor(self: PropertyGrid) -> Color
        Set: DisabledItemForeColor(self: PropertyGrid) = value
        """
        ...

    @property
    def DrawFlatToolbar(self):
        ...

    @property
    def ForeColor(self) -> Color:
        """
        Get: ForeColor(self: PropertyGrid) -> Color
        Set: ForeColor(self: PropertyGrid) = value
        """
        ...

    @property
    def HelpBackColor(self) -> Color:
        """
        Get: HelpBackColor(self: PropertyGrid) -> Color
        Set: HelpBackColor(self: PropertyGrid) = value
        """
        ...

    @property
    def HelpBorderColor(self) -> Color:
        """
        Get: HelpBorderColor(self: PropertyGrid) -> Color
        Set: HelpBorderColor(self: PropertyGrid) = value
        """
        ...

    @property
    def HelpForeColor(self) -> Color:
        """
        Get: HelpForeColor(self: PropertyGrid) -> Color
        Set: HelpForeColor(self: PropertyGrid) = value
        """
        ...

    @property
    def HelpVisible(self) -> bool:
        """
        Get: HelpVisible(self: PropertyGrid) -> bool
        Set: HelpVisible(self: PropertyGrid) = value
        """
        ...

    @property
    def LargeButtons(self) -> bool:
        """
        Get: LargeButtons(self: PropertyGrid) -> bool
        Set: LargeButtons(self: PropertyGrid) = value
        """
        ...

    @property
    def LineColor(self) -> Color:
        """
        Get: LineColor(self: PropertyGrid) -> Color
        Set: LineColor(self: PropertyGrid) = value
        """
        ...

    @property
    def Padding(self) -> Padding:
        """
        Get: Padding(self: PropertyGrid) -> Padding
        Set: Padding(self: PropertyGrid) = value
        """
        ...

    @property
    def PropertySort(self): # -> PropertySort
        """
        Get: PropertySort(self: PropertyGrid) -> PropertySort
        Set: PropertySort(self: PropertyGrid) = value
        """
        ...

    @property
    def PropertyTabs(self): # -> PropertyTabCollection
        """ Get: PropertyTabs(self: PropertyGrid) -> PropertyTabCollection """
        ...

    @property
    def SelectedGridItem(self) -> GridItem:
        """
        Get: SelectedGridItem(self: PropertyGrid) -> GridItem
        Set: SelectedGridItem(self: PropertyGrid) = value
        """
        ...

    @property
    def SelectedItemWithFocusBackColor(self) -> Color:
        """
        Get: SelectedItemWithFocusBackColor(self: PropertyGrid) -> Color
        Set: SelectedItemWithFocusBackColor(self: PropertyGrid) = value
        """
        ...

    @property
    def SelectedItemWithFocusForeColor(self) -> Color:
        """
        Get: SelectedItemWithFocusForeColor(self: PropertyGrid) -> Color
        Set: SelectedItemWithFocusForeColor(self: PropertyGrid) = value
        """
        ...

    @property
    def SelectedObject(self) -> object:
        """
        Get: SelectedObject(self: PropertyGrid) -> object
        Set: SelectedObject(self: PropertyGrid) = value
        """
        ...

    @property
    def SelectedObjects(self) -> Array:
        """
        Get: SelectedObjects(self: PropertyGrid) -> Array[object]
        Set: SelectedObjects(self: PropertyGrid) = value
        """
        ...

    @property
    def SelectedTab(self): # -> PropertyTab
        """ Get: SelectedTab(self: PropertyGrid) -> PropertyTab """
        ...

    @property
    def ShowPropertyPageImage(self):
        ...

    @property
    def Site(self) -> ISite:
        """
        Get: Site(self: PropertyGrid) -> ISite
        Set: Site(self: PropertyGrid) = value
        """
        ...

    @property
    def SortByCategoryImage(self):
        ...

    @property
    def SortByPropertyImage(self):
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: PropertyGrid) -> str
        Set: Text(self: PropertyGrid) = value
        """
        ...

    @property
    def ToolbarVisible(self) -> bool:
        """
        Get: ToolbarVisible(self: PropertyGrid) -> bool
        Set: ToolbarVisible(self: PropertyGrid) = value
        """
        ...

    @property
    def ToolStripRenderer(self):
        ...

    @property
    def UseCompatibleTextRendering(self) -> bool:
        """
        Get: UseCompatibleTextRendering(self: PropertyGrid) -> bool
        Set: UseCompatibleTextRendering(self: PropertyGrid) = value
        """
        ...

    @property
    def ViewBackColor(self) -> Color:
        """
        Get: ViewBackColor(self: PropertyGrid) -> Color
        Set: ViewBackColor(self: PropertyGrid) = value
        """
        ...

    @property
    def ViewBorderColor(self) -> Color:
        """
        Get: ViewBorderColor(self: PropertyGrid) -> Color
        Set: ViewBorderColor(self: PropertyGrid) = value
        """
        ...

    @property
    def ViewForeColor(self) -> Color:
        """
        Get: ViewForeColor(self: PropertyGrid) -> Color
        Set: ViewForeColor(self: PropertyGrid) = value
        """
        ...


    def CollapseAllGridItems(self): # -> 
        """ CollapseAllGridItems(self: PropertyGrid) """
        ...

    def CreatePropertyTab(self, *args): #cannot find CLR method
        """ CreatePropertyTab(self: PropertyGrid, tabType: Type) -> PropertyTab """
        ...

    def ExpandAllGridItems(self): # -> 
        """ ExpandAllGridItems(self: PropertyGrid) """
        ...

    def OnComComponentNameChanged(self, *args): #cannot find CLR method
        """ OnComComponentNameChanged(self: PropertyGrid, e: ComponentRenameEventArgs) """
        ...

    def OnNotifyPropertyValueUIItemsChanged(self, *args): #cannot find CLR method
        """ OnNotifyPropertyValueUIItemsChanged(self: PropertyGrid, sender: object, e: EventArgs) """
        ...

    def OnPropertySortChanged(self, *args): #cannot find CLR method
        """ OnPropertySortChanged(self: PropertyGrid, e: EventArgs) """
        ...

    def OnPropertyTabChanged(self, *args): #cannot find CLR method
        """ OnPropertyTabChanged(self: PropertyGrid, e: PropertyTabChangedEventArgs) """
        ...

    def OnPropertyValueChanged(self, *args): #cannot find CLR method
        """ OnPropertyValueChanged(self: PropertyGrid, e: PropertyValueChangedEventArgs) """
        ...

    def OnSelectedGridItemChanged(self, *args): #cannot find CLR method
        """ OnSelectedGridItemChanged(self: PropertyGrid, e: SelectedGridItemChangedEventArgs) """
        ...

    def OnSelectedObjectsChanged(self, *args): #cannot find CLR method
        """ OnSelectedObjectsChanged(self: PropertyGrid, e: EventArgs) """
        ...

    def PropertyTabCollection(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: PropertyGrid) """
        ...

    def RefreshTabs(self, tabScope:PropertyTabScope): # -> 
        """ RefreshTabs(self: PropertyGrid, tabScope: PropertyTabScope) """
        ...

    def ResetSelectedProperty(self): # -> 
        """ ResetSelectedProperty(self: PropertyGrid) """
        ...

    def ShowEventsButton(self, *args): #cannot find CLR method
        """ ShowEventsButton(self: PropertyGrid, value: bool) """
        ...

    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    ForeColorChanged = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseEnter = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    PaddingChanged = ...
    PropertySortChanged = ...
    PropertyTabChanged = ...
    PropertyValueChanged = ...
    SelectedGridItemChanged = ...
    SelectedObjectsChanged = ...
    TextChanged = ...


class PropertyManager(BindingManagerBase): # skipped bases: <type 'object'>
    """ PropertyManager() """
    onCurrentChangedHandler = ...
    onPositionChangedHandler = ...


class PropertySort(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum PropertySort, values: Alphabetical (1), Categorized (2), CategorizedAlphabetical (3), NoSort (0) """
    Alphabetical: PropertySort = ...
    Categorized: PropertySort = ...
    CategorizedAlphabetical: PropertySort = ...
    NoSort: PropertySort = ...
    value__ = ...


class PropertyTabChangedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ PropertyTabChangedEventArgs(oldTab: PropertyTab, newTab: PropertyTab) """
    @property
    def NewTab(self): # -> PropertyTab
        """ Get: NewTab(self: PropertyTabChangedEventArgs) -> PropertyTab """
        ...

    @property
    def OldTab(self): # -> PropertyTab
        """ Get: OldTab(self: PropertyTabChangedEventArgs) -> PropertyTab """
        ...


    def __new__(cls, oldTab, newTab) -> Self: # Not found arg types: {'oldTab': 'PropertyTab', 'newTab': 'PropertyTab'}
        """ __new__(cls: type, oldTab: PropertyTab, newTab: PropertyTab) """
        ...


class PropertyTabChangedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ PropertyTabChangedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, s:object, e:PropertyTabChangedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: PropertyTabChangedEventHandler, s: object, e: PropertyTabChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: PropertyTabChangedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, s:object, e:PropertyTabChangedEventArgs): # -> 
        """ Invoke(self: PropertyTabChangedEventHandler, s: object, e: PropertyTabChangedEventArgs) """
        ...


class PropertyValueChangedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ PropertyValueChangedEventArgs(changedItem: GridItem, oldValue: object) """
    @property
    def ChangedItem(self) -> GridItem:
        """ Get: ChangedItem(self: PropertyValueChangedEventArgs) -> GridItem """
        ...

    @property
    def OldValue(self) -> object:
        """ Get: OldValue(self: PropertyValueChangedEventArgs) -> object """
        ...


    def __new__(cls, changedItem:GridItem, oldValue:object) -> Self:
        """ __new__(cls: type, changedItem: GridItem, oldValue: object) """
        ...


class PropertyValueChangedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ PropertyValueChangedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, s:object, e:PropertyValueChangedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: PropertyValueChangedEventHandler, s: object, e: PropertyValueChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: PropertyValueChangedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, s:object, e:PropertyValueChangedEventArgs): # -> 
        """ Invoke(self: PropertyValueChangedEventHandler, s: object, e: PropertyValueChangedEventArgs) """
        ...


class QueryAccessibilityHelpEventArgs(EventArgs): # skipped bases: <type 'object'>
    """
    QueryAccessibilityHelpEventArgs()
    QueryAccessibilityHelpEventArgs(helpNamespace: str, helpString: str, helpKeyword: str)
    """
    @property
    def HelpKeyword(self) -> str:
        """
        Get: HelpKeyword(self: QueryAccessibilityHelpEventArgs) -> str
        Set: HelpKeyword(self: QueryAccessibilityHelpEventArgs) = value
        """
        ...

    @property
    def HelpNamespace(self) -> str:
        """
        Get: HelpNamespace(self: QueryAccessibilityHelpEventArgs) -> str
        Set: HelpNamespace(self: QueryAccessibilityHelpEventArgs) = value
        """
        ...

    @property
    def HelpString(self) -> str:
        """
        Get: HelpString(self: QueryAccessibilityHelpEventArgs) -> str
        Set: HelpString(self: QueryAccessibilityHelpEventArgs) = value
        """
        ...


    def __new__(cls, helpNamespace:str = ..., helpString:str = ..., helpKeyword:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, helpNamespace: str, helpString: str, helpKeyword: str)
        """
        ...


class QueryAccessibilityHelpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ QueryAccessibilityHelpEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:QueryAccessibilityHelpEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: QueryAccessibilityHelpEventHandler, sender: object, e: QueryAccessibilityHelpEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: QueryAccessibilityHelpEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:QueryAccessibilityHelpEventArgs): # -> 
        """ Invoke(self: QueryAccessibilityHelpEventHandler, sender: object, e: QueryAccessibilityHelpEventArgs) """
        ...


class QueryContinueDragEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ QueryContinueDragEventArgs(keyState: int, escapePressed: bool, action: DragAction) """
    @property
    def Action(self) -> DragAction:
        """
        Get: Action(self: QueryContinueDragEventArgs) -> DragAction
        Set: Action(self: QueryContinueDragEventArgs) = value
        """
        ...

    @property
    def EscapePressed(self) -> bool:
        """ Get: EscapePressed(self: QueryContinueDragEventArgs) -> bool """
        ...

    @property
    def KeyState(self) -> int:
        """ Get: KeyState(self: QueryContinueDragEventArgs) -> int """
        ...


    def __new__(cls, keyState:int, escapePressed:bool, action:DragAction) -> Self:
        """ __new__(cls: type, keyState: int, escapePressed: bool, action: DragAction) """
        ...


class QueryContinueDragEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ QueryContinueDragEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:QueryContinueDragEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: QueryContinueDragEventHandler, sender: object, e: QueryContinueDragEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: QueryContinueDragEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:QueryContinueDragEventArgs): # -> 
        """ Invoke(self: QueryContinueDragEventHandler, sender: object, e: QueryContinueDragEventArgs) """
        ...


class QuestionEventArgs(EventArgs): # skipped bases: <type 'object'>
    """
    QuestionEventArgs()
    QuestionEventArgs(response: bool)
    """
    @property
    def Response(self) -> bool:
        """
        Get: Response(self: QuestionEventArgs) -> bool
        Set: Response(self: QuestionEventArgs) = value
        """
        ...


    def __new__(cls, response:bool = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, response: bool)
        """
        ...


class QuestionEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ QuestionEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:QuestionEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: QuestionEventHandler, sender: object, e: QuestionEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: QuestionEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:QuestionEventArgs): # -> 
        """ Invoke(self: QuestionEventHandler, sender: object, e: QuestionEventArgs) """
        ...


class RadioButton(ButtonBase): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'object'>
    """ RadioButton() """
    @property
    def Appearance(self) -> Appearance:
        """
        Get: Appearance(self: RadioButton) -> Appearance
        Set: Appearance(self: RadioButton) = value
        """
        ...

    @property
    def AutoCheck(self) -> bool:
        """
        Get: AutoCheck(self: RadioButton) -> bool
        Set: AutoCheck(self: RadioButton) = value
        """
        ...

    @property
    def CheckAlign(self) -> ContentAlignment:
        """
        Get: CheckAlign(self: RadioButton) -> ContentAlignment
        Set: CheckAlign(self: RadioButton) = value
        """
        ...

    @property
    def Checked(self) -> bool:
        """
        Get: Checked(self: RadioButton) -> bool
        Set: Checked(self: RadioButton) = value
        """
        ...

    @property
    def TabStop(self) -> bool:
        """
        Get: TabStop(self: RadioButton) -> bool
        Set: TabStop(self: RadioButton) = value
        """
        ...


    def OnCheckedChanged(self, *args): #cannot find CLR method
        """ OnCheckedChanged(self: RadioButton, e: EventArgs) """
        ...

    def PerformClick(self): # -> 
        """ PerformClick(self: RadioButton) """
        ...

    def RadioButtonAccessibleObject(self, *args): #cannot find CLR method
        """ RadioButtonAccessibleObject(owner: RadioButton) """
        ...

    def ToString(self) -> str:
        """ ToString(self: RadioButton) -> str """
        ...

    AppearanceChanged = ...
    CheckedChanged = ...
    DoubleClick = ...
    MouseDoubleClick = ...


class RadioButtonRenderer: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def RenderMatchingApplicationState(self) -> bool:
        """
        Get: RenderMatchingApplicationState() -> bool
        Set: RenderMatchingApplicationState() = value
        """
        ...


    @staticmethod
    def DrawParentBackground(g:Graphics, bounds:Rectangle, childControl:Control): # -> 
        """ DrawParentBackground(g: Graphics, bounds: Rectangle, childControl: Control) """
        ...

    @staticmethod
    def DrawRadioButton(g:Graphics, glyphLocation:Point, *__args:RadioButtonState): # -> 
        """ DrawRadioButton(g: Graphics, glyphLocation: Point, state: RadioButtonState)DrawRadioButton(g: Graphics, glyphLocation: Point, textBounds: Rectangle, radioButtonText: str, font: Font, focused: bool, state: RadioButtonState)DrawRadioButton(g: Graphics, glyphLocation: Point, textBounds: Rectangle, radioButtonText: str, font: Font, flags: TextFormatFlags, focused: bool, state: RadioButtonState)DrawRadioButton(g: Graphics, glyphLocation: Point, textBounds: Rectangle, radioButtonText: str, font: Font, image: Image, imageBounds: Rectangle, focused: bool, state: RadioButtonState)DrawRadioButton(g: Graphics, glyphLocation: Point, textBounds: Rectangle, radioButtonText: str, font: Font, flags: TextFormatFlags, image: Image, imageBounds: Rectangle, focused: bool, state: RadioButtonState) """
        ...

    @staticmethod
    def GetGlyphSize(g:Graphics, state:RadioButtonState) -> Size:
        """ GetGlyphSize(g: Graphics, state: RadioButtonState) -> Size """
        ...

    @staticmethod
    def IsBackgroundPartiallyTransparent(state:RadioButtonState) -> bool:
        """ IsBackgroundPartiallyTransparent(state: RadioButtonState) -> bool """
        ...



class RelatedImageListAttribute(Attribute): # skipped bases: <type '_Attribute'>, <type 'object'>
    """ RelatedImageListAttribute(relatedImageList: str) """
    @property
    def RelatedImageList(self) -> str:
        """ Get: RelatedImageList(self: RelatedImageListAttribute) -> str """
        ...


    def __new__(cls, relatedImageList:str) -> Self:
        """ __new__(cls: type, relatedImageList: str) """
        ...


class RetrieveVirtualItemEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ RetrieveVirtualItemEventArgs(itemIndex: int) """
    @property
    def Item(self) -> ListViewItem:
        """
        Get: Item(self: RetrieveVirtualItemEventArgs) -> ListViewItem
        Set: Item(self: RetrieveVirtualItemEventArgs) = value
        """
        ...

    @property
    def ItemIndex(self) -> int:
        """ Get: ItemIndex(self: RetrieveVirtualItemEventArgs) -> int """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __new__(cls, itemIndex:int) -> Self:
        """ __new__(cls: type, itemIndex: int) """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class RetrieveVirtualItemEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ RetrieveVirtualItemEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:RetrieveVirtualItemEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: RetrieveVirtualItemEventHandler, sender: object, e: RetrieveVirtualItemEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: RetrieveVirtualItemEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:RetrieveVirtualItemEventArgs): # -> 
        """ Invoke(self: RetrieveVirtualItemEventHandler, sender: object, e: RetrieveVirtualItemEventArgs) """
        ...


class RichTextBox(TextBoxBase): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'object'>
    """ RichTextBox() """
    @property
    def AllowDrop(self) -> bool:
        """
        Get: AllowDrop(self: RichTextBox) -> bool
        Set: AllowDrop(self: RichTextBox) = value
        """
        ...

    @property
    def AutoWordSelection(self) -> bool:
        """
        Get: AutoWordSelection(self: RichTextBox) -> bool
        Set: AutoWordSelection(self: RichTextBox) = value
        """
        ...

    @property
    def BulletIndent(self) -> int:
        """
        Get: BulletIndent(self: RichTextBox) -> int
        Set: BulletIndent(self: RichTextBox) = value
        """
        ...

    @property
    def CanRedo(self) -> bool:
        """ Get: CanRedo(self: RichTextBox) -> bool """
        ...

    @property
    def DetectUrls(self) -> bool:
        """
        Get: DetectUrls(self: RichTextBox) -> bool
        Set: DetectUrls(self: RichTextBox) = value
        """
        ...

    @property
    def EnableAutoDragDrop(self) -> bool:
        """
        Get: EnableAutoDragDrop(self: RichTextBox) -> bool
        Set: EnableAutoDragDrop(self: RichTextBox) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: RichTextBox) -> Font
        Set: Font(self: RichTextBox) = value
        """
        ...

    @property
    def LanguageOption(self): # -> RichTextBoxLanguageOptions
        """
        Get: LanguageOption(self: RichTextBox) -> RichTextBoxLanguageOptions
        Set: LanguageOption(self: RichTextBox) = value
        """
        ...

    @property
    def RedoActionName(self) -> str:
        """ Get: RedoActionName(self: RichTextBox) -> str """
        ...

    @property
    def RichTextShortcutsEnabled(self) -> bool:
        """
        Get: RichTextShortcutsEnabled(self: RichTextBox) -> bool
        Set: RichTextShortcutsEnabled(self: RichTextBox) = value
        """
        ...

    @property
    def RightMargin(self) -> int:
        """
        Get: RightMargin(self: RichTextBox) -> int
        Set: RightMargin(self: RichTextBox) = value
        """
        ...

    @property
    def Rtf(self) -> str:
        """
        Get: Rtf(self: RichTextBox) -> str
        Set: Rtf(self: RichTextBox) = value
        """
        ...

    @property
    def ScrollBars(self): # -> RichTextBoxScrollBars
        """
        Get: ScrollBars(self: RichTextBox) -> RichTextBoxScrollBars
        Set: ScrollBars(self: RichTextBox) = value
        """
        ...

    @property
    def SelectedRtf(self) -> str:
        """
        Get: SelectedRtf(self: RichTextBox) -> str
        Set: SelectedRtf(self: RichTextBox) = value
        """
        ...

    @property
    def SelectionAlignment(self) -> HorizontalAlignment:
        """
        Get: SelectionAlignment(self: RichTextBox) -> HorizontalAlignment
        Set: SelectionAlignment(self: RichTextBox) = value
        """
        ...

    @property
    def SelectionBackColor(self) -> Color:
        """
        Get: SelectionBackColor(self: RichTextBox) -> Color
        Set: SelectionBackColor(self: RichTextBox) = value
        """
        ...

    @property
    def SelectionBullet(self) -> bool:
        """
        Get: SelectionBullet(self: RichTextBox) -> bool
        Set: SelectionBullet(self: RichTextBox) = value
        """
        ...

    @property
    def SelectionCharOffset(self) -> int:
        """
        Get: SelectionCharOffset(self: RichTextBox) -> int
        Set: SelectionCharOffset(self: RichTextBox) = value
        """
        ...

    @property
    def SelectionColor(self) -> Color:
        """
        Get: SelectionColor(self: RichTextBox) -> Color
        Set: SelectionColor(self: RichTextBox) = value
        """
        ...

    @property
    def SelectionFont(self) -> Font:
        """
        Get: SelectionFont(self: RichTextBox) -> Font
        Set: SelectionFont(self: RichTextBox) = value
        """
        ...

    @property
    def SelectionHangingIndent(self) -> int:
        """
        Get: SelectionHangingIndent(self: RichTextBox) -> int
        Set: SelectionHangingIndent(self: RichTextBox) = value
        """
        ...

    @property
    def SelectionIndent(self) -> int:
        """
        Get: SelectionIndent(self: RichTextBox) -> int
        Set: SelectionIndent(self: RichTextBox) = value
        """
        ...

    @property
    def SelectionProtected(self) -> bool:
        """
        Get: SelectionProtected(self: RichTextBox) -> bool
        Set: SelectionProtected(self: RichTextBox) = value
        """
        ...

    @property
    def SelectionRightIndent(self) -> int:
        """
        Get: SelectionRightIndent(self: RichTextBox) -> int
        Set: SelectionRightIndent(self: RichTextBox) = value
        """
        ...

    @property
    def SelectionTabs(self) -> Array:
        """
        Get: SelectionTabs(self: RichTextBox) -> Array[int]
        Set: SelectionTabs(self: RichTextBox) = value
        """
        ...

    @property
    def SelectionType(self): # -> RichTextBoxSelectionTypes
        """ Get: SelectionType(self: RichTextBox) -> RichTextBoxSelectionTypes """
        ...

    @property
    def ShowSelectionMargin(self) -> bool:
        """
        Get: ShowSelectionMargin(self: RichTextBox) -> bool
        Set: ShowSelectionMargin(self: RichTextBox) = value
        """
        ...

    @property
    def UndoActionName(self) -> str:
        """ Get: UndoActionName(self: RichTextBox) -> str """
        ...

    @property
    def ZoomFactor(self) -> Single:
        """
        Get: ZoomFactor(self: RichTextBox) -> Single
        Set: ZoomFactor(self: RichTextBox) = value
        """
        ...


    def CanPaste(self, clipFormat:Format) -> bool:
        """ CanPaste(self: RichTextBox, clipFormat: Format) -> bool """
        ...

    def CreateRichEditOleCallback(self, *args): #cannot find CLR method
        """ CreateRichEditOleCallback(self: RichTextBox) -> object """
        ...

    def DrawToBitmap(self, bitmap:Bitmap, targetBounds:Rectangle): # -> 
        """ DrawToBitmap(self: RichTextBox, bitmap: Bitmap, targetBounds: Rectangle) """
        ...

    def Find(self, *__args:str) -> int:
        """
        Find(self: RichTextBox, str: str) -> int
        Find(self: RichTextBox, str: str, options: RichTextBoxFinds) -> int
        Find(self: RichTextBox, str: str, start: int, options: RichTextBoxFinds) -> int
        Find(self: RichTextBox, str: str, start: int, end: int, options: RichTextBoxFinds) -> int
        Find(self: RichTextBox, characterSet: Array[Char]) -> int
        Find(self: RichTextBox, characterSet: Array[Char], start: int) -> int
        Find(self: RichTextBox, characterSet: Array[Char], start: int, end: int) -> int
        """
        ...

    def LoadFile(self, *__args:str): # -> 
        """ LoadFile(self: RichTextBox, path: str)LoadFile(self: RichTextBox, path: str, fileType: RichTextBoxStreamType)LoadFile(self: RichTextBox, data: Stream, fileType: RichTextBoxStreamType) """
        ...

    def OnContentsResized(self, *args): #cannot find CLR method
        """ OnContentsResized(self: RichTextBox, e: ContentsResizedEventArgs) """
        ...

    def OnHScroll(self, *args): #cannot find CLR method
        """ OnHScroll(self: RichTextBox, e: EventArgs) """
        ...

    def OnImeChange(self, *args): #cannot find CLR method
        """ OnImeChange(self: RichTextBox, e: EventArgs) """
        ...

    def OnLinkClicked(self, *args): #cannot find CLR method
        """ OnLinkClicked(self: RichTextBox, e: LinkClickedEventArgs) """
        ...

    def OnProtected(self, *args): #cannot find CLR method
        """ OnProtected(self: RichTextBox, e: EventArgs) """
        ...

    def OnSelectionChanged(self, *args): #cannot find CLR method
        """ OnSelectionChanged(self: RichTextBox, e: EventArgs) """
        ...

    def OnVScroll(self, *args): #cannot find CLR method
        """ OnVScroll(self: RichTextBox, e: EventArgs) """
        ...

    def Redo(self): # -> 
        """ Redo(self: RichTextBox) """
        ...

    def SaveFile(self, *__args:str): # -> 
        """ SaveFile(self: RichTextBox, path: str)SaveFile(self: RichTextBox, path: str, fileType: RichTextBoxStreamType)SaveFile(self: RichTextBox, data: Stream, fileType: RichTextBoxStreamType) """
        ...

    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    ContentsResized = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    GiveFeedback = ...
    HScroll = ...
    ImeChange = ...
    LinkClicked = ...
    Protected = ...
    QueryContinueDrag = ...
    SelectionChanged = ...
    VScroll = ...


class RichTextBoxFinds(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) RichTextBoxFinds, values: MatchCase (4), NoHighlight (8), None (0), Reverse (16), WholeWord (2) """
    MatchCase: RichTextBoxFinds = ...
    NoHighlight: RichTextBoxFinds = ...
    Reverse: RichTextBoxFinds = ...
    value__ = ...
    WholeWord: RichTextBoxFinds = ...


class RichTextBoxLanguageOptions(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) RichTextBoxLanguageOptions, values: AutoFont (2), AutoFontSizeAdjust (16), AutoKeyboard (1), DualFont (128), ImeAlwaysSendNotify (8), ImeCancelComplete (4), UIFonts (32) """
    AutoFont: RichTextBoxLanguageOptions = ...
    AutoFontSizeAdjust: RichTextBoxLanguageOptions = ...
    AutoKeyboard: RichTextBoxLanguageOptions = ...
    DualFont: RichTextBoxLanguageOptions = ...
    ImeAlwaysSendNotify: RichTextBoxLanguageOptions = ...
    ImeCancelComplete: RichTextBoxLanguageOptions = ...
    UIFonts: RichTextBoxLanguageOptions = ...
    value__ = ...


class RichTextBoxScrollBars(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum RichTextBoxScrollBars, values: Both (3), ForcedBoth (19), ForcedHorizontal (17), ForcedVertical (18), Horizontal (1), None (0), Vertical (2) """
    Both: RichTextBoxScrollBars = ...
    ForcedBoth: RichTextBoxScrollBars = ...
    ForcedHorizontal: RichTextBoxScrollBars = ...
    ForcedVertical: RichTextBoxScrollBars = ...
    Horizontal: RichTextBoxScrollBars = ...
    value__ = ...
    Vertical: RichTextBoxScrollBars = ...


class RichTextBoxSelectionAttribute(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum RichTextBoxSelectionAttribute, values: All (1), Mixed (-1), None (0) """
    All: RichTextBoxSelectionAttribute = ...
    Mixed: RichTextBoxSelectionAttribute = ...
    value__ = ...


class RichTextBoxSelectionTypes(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) RichTextBoxSelectionTypes, values: Empty (0), MultiChar (4), MultiObject (8), Object (2), Text (1) """
    Empty: RichTextBoxSelectionTypes = ...
    MultiChar: RichTextBoxSelectionTypes = ...
    MultiObject: RichTextBoxSelectionTypes = ...
    Object: RichTextBoxSelectionTypes = ...
    Text: RichTextBoxSelectionTypes = ...
    value__ = ...


class RichTextBoxStreamType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum RichTextBoxStreamType, values: PlainText (1), RichNoOleObjs (2), RichText (0), TextTextOleObjs (3), UnicodePlainText (4) """
    PlainText: RichTextBoxStreamType = ...
    RichNoOleObjs: RichTextBoxStreamType = ...
    RichText: RichTextBoxStreamType = ...
    TextTextOleObjs: RichTextBoxStreamType = ...
    UnicodePlainText: RichTextBoxStreamType = ...
    value__ = ...


class RichTextBoxWordPunctuations(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum RichTextBoxWordPunctuations, values: All (896), Custom (512), Level1 (128), Level2 (256) """
    All: RichTextBoxWordPunctuations = ...
    Custom: RichTextBoxWordPunctuations = ...
    Level1: RichTextBoxWordPunctuations = ...
    Level2: RichTextBoxWordPunctuations = ...
    value__ = ...


class RightToLeft(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum RightToLeft, values: Inherit (2), No (0), Yes (1) """
    Inherit: RightToLeft = ...
    No: RightToLeft = ...
    value__ = ...
    Yes: RightToLeft = ...


class RowStyle(TableLayoutStyle): # skipped bases: <type 'object'>
    """
    RowStyle()
    RowStyle(sizeType: SizeType)
    RowStyle(sizeType: SizeType, height: Single)
    """
    @property
    def Height(self) -> Single:
        """
        Get: Height(self: RowStyle) -> Single
        Set: Height(self: RowStyle) = value
        """
        ...


    def __new__(cls, sizeType = ..., height:Single = ...) -> Self: # Not found arg types: {'sizeType': 'SizeType'}
        """
        __new__(cls: type)
        __new__(cls: type, sizeType: SizeType)
        __new__(cls: type, sizeType: SizeType, height: Single)
        """
        ...


class SaveFileDialog(FileDialog): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """ SaveFileDialog() """
    @property
    def CreatePrompt(self) -> bool:
        """
        Get: CreatePrompt(self: SaveFileDialog) -> bool
        Set: CreatePrompt(self: SaveFileDialog) = value
        """
        ...

    @property
    def OverwritePrompt(self) -> bool:
        """
        Get: OverwritePrompt(self: SaveFileDialog) -> bool
        Set: OverwritePrompt(self: SaveFileDialog) = value
        """
        ...


    def OpenFile(self) -> Stream:
        """ OpenFile(self: SaveFileDialog) -> Stream """
        ...


class Screen: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AllScreens(self) -> Array:
        """ Get: AllScreens() -> Array[Screen] """
        ...

    @property
    def BitsPerPixel(self) -> int:
        """ Get: BitsPerPixel(self: Screen) -> int """
        ...

    @property
    def Bounds(self) -> Rectangle:
        """ Get: Bounds(self: Screen) -> Rectangle """
        ...

    @property
    def DeviceName(self) -> str:
        """ Get: DeviceName(self: Screen) -> str """
        ...

    @property
    def Primary(self) -> bool:
        """ Get: Primary(self: Screen) -> bool """
        ...

    @property
    def PrimaryScreen(self) -> Screen:
        """ Get: PrimaryScreen() -> Screen """
        ...

    @property
    def WorkingArea(self) -> Rectangle:
        """ Get: WorkingArea(self: Screen) -> Rectangle """
        ...


    def Equals(self, obj:object) -> bool:
        """ Equals(self: Screen, obj: object) -> bool """
        ...

    @staticmethod
    def FromControl(control:Control) -> Screen:
        """ FromControl(control: Control) -> Screen """
        ...

    @staticmethod
    def FromHandle(hwnd:IntPtr) -> Screen:
        """ FromHandle(hwnd: IntPtr) -> Screen """
        ...

    @staticmethod
    def FromPoint(point:Point) -> Screen:
        """ FromPoint(point: Point) -> Screen """
        ...

    @staticmethod
    def FromRectangle(rect:Rectangle) -> Screen:
        """ FromRectangle(rect: Rectangle) -> Screen """
        ...

    @staticmethod
    def GetBounds(*__args:Point) -> Rectangle:
        """
        GetBounds(pt: Point) -> Rectangle
        GetBounds(rect: Rectangle) -> Rectangle
        GetBounds(ctl: Control) -> Rectangle
        """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: Screen) -> int """
        ...

    @staticmethod
    def GetWorkingArea(*__args:Point) -> Rectangle:
        """
        GetWorkingArea(pt: Point) -> Rectangle
        GetWorkingArea(rect: Rectangle) -> Rectangle
        GetWorkingArea(ctl: Control) -> Rectangle
        """
        ...

    def ToString(self) -> str:
        """ ToString(self: Screen) -> str """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...



class ScreenOrientation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ScreenOrientation, values: Angle0 (0), Angle180 (2), Angle270 (3), Angle90 (1) """
    Angle0: ScreenOrientation = ...
    Angle180: ScreenOrientation = ...
    Angle270: ScreenOrientation = ...
    Angle90: ScreenOrientation = ...
    value__ = ...


class ScrollBarRenderer: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def IsSupported(self) -> bool:
        """ Get: IsSupported() -> bool """
        ...


    @staticmethod
    def DrawArrowButton(g:Graphics, bounds:Rectangle, state:ScrollBarArrowButtonState): # -> 
        """ DrawArrowButton(g: Graphics, bounds: Rectangle, state: ScrollBarArrowButtonState) """
        ...

    @staticmethod
    def DrawHorizontalThumb(g:Graphics, bounds:Rectangle, state:ScrollBarState): # -> 
        """ DrawHorizontalThumb(g: Graphics, bounds: Rectangle, state: ScrollBarState) """
        ...

    @staticmethod
    def DrawHorizontalThumbGrip(g:Graphics, bounds:Rectangle, state:ScrollBarState): # -> 
        """ DrawHorizontalThumbGrip(g: Graphics, bounds: Rectangle, state: ScrollBarState) """
        ...

    @staticmethod
    def DrawLeftHorizontalTrack(g:Graphics, bounds:Rectangle, state:ScrollBarState): # -> 
        """ DrawLeftHorizontalTrack(g: Graphics, bounds: Rectangle, state: ScrollBarState) """
        ...

    @staticmethod
    def DrawLowerVerticalTrack(g:Graphics, bounds:Rectangle, state:ScrollBarState): # -> 
        """ DrawLowerVerticalTrack(g: Graphics, bounds: Rectangle, state: ScrollBarState) """
        ...

    @staticmethod
    def DrawRightHorizontalTrack(g:Graphics, bounds:Rectangle, state:ScrollBarState): # -> 
        """ DrawRightHorizontalTrack(g: Graphics, bounds: Rectangle, state: ScrollBarState) """
        ...

    @staticmethod
    def DrawSizeBox(g:Graphics, bounds:Rectangle, state:ScrollBarSizeBoxState): # -> 
        """ DrawSizeBox(g: Graphics, bounds: Rectangle, state: ScrollBarSizeBoxState) """
        ...

    @staticmethod
    def DrawUpperVerticalTrack(g:Graphics, bounds:Rectangle, state:ScrollBarState): # -> 
        """ DrawUpperVerticalTrack(g: Graphics, bounds: Rectangle, state: ScrollBarState) """
        ...

    @staticmethod
    def DrawVerticalThumb(g:Graphics, bounds:Rectangle, state:ScrollBarState): # -> 
        """ DrawVerticalThumb(g: Graphics, bounds: Rectangle, state: ScrollBarState) """
        ...

    @staticmethod
    def DrawVerticalThumbGrip(g:Graphics, bounds:Rectangle, state:ScrollBarState): # -> 
        """ DrawVerticalThumbGrip(g: Graphics, bounds: Rectangle, state: ScrollBarState) """
        ...

    @staticmethod
    def GetSizeBoxSize(g:Graphics, state:ScrollBarState) -> Size:
        """ GetSizeBoxSize(g: Graphics, state: ScrollBarState) -> Size """
        ...

    @staticmethod
    def GetThumbGripSize(g:Graphics, state:ScrollBarState) -> Size:
        """ GetThumbGripSize(g: Graphics, state: ScrollBarState) -> Size """
        ...



class ScrollBars(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ScrollBars, values: Both (3), Horizontal (1), None (0), Vertical (2) """
    Both: ScrollBars = ...
    Horizontal: ScrollBars = ...
    value__ = ...
    Vertical: ScrollBars = ...


class ScrollButton(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ScrollButton, values: Down (1), Left (2), Max (3), Min (0), Right (3), Up (0) """
    Down: ScrollButton = ...
    Left: ScrollButton = ...
    Max: ScrollButton = ...
    Min: ScrollButton = ...
    Right: ScrollButton = ...
    Up: ScrollButton = ...
    value__ = ...


class ScrollEventArgs(EventArgs): # skipped bases: <type 'object'>
    """
    ScrollEventArgs(type: ScrollEventType, newValue: int)
    ScrollEventArgs(type: ScrollEventType, newValue: int, scroll: ScrollOrientation)
    ScrollEventArgs(type: ScrollEventType, oldValue: int, newValue: int)
    ScrollEventArgs(type: ScrollEventType, oldValue: int, newValue: int, scroll: ScrollOrientation)
    """
    @property
    def NewValue(self) -> int:
        """
        Get: NewValue(self: ScrollEventArgs) -> int
        Set: NewValue(self: ScrollEventArgs) = value
        """
        ...

    @property
    def OldValue(self) -> int:
        """ Get: OldValue(self: ScrollEventArgs) -> int """
        ...

    @property
    def ScrollOrientation(self): # -> ScrollOrientation
        """ Get: ScrollOrientation(self: ScrollEventArgs) -> ScrollOrientation """
        ...

    @property
    def Type(self): # -> ScrollEventType
        """ Get: Type(self: ScrollEventArgs) -> ScrollEventType """
        ...


    def __new__(cls, type, *__args:int) -> Self: # Not found arg types: {'type': 'ScrollEventType'}
        """
        __new__(cls: type, type: ScrollEventType, newValue: int)
        __new__(cls: type, type: ScrollEventType, newValue: int, scroll: ScrollOrientation)
        __new__(cls: type, type: ScrollEventType, oldValue: int, newValue: int)
        __new__(cls: type, type: ScrollEventType, oldValue: int, newValue: int, scroll: ScrollOrientation)
        """
        ...


class ScrollEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ScrollEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ScrollEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ScrollEventHandler, sender: object, e: ScrollEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ScrollEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ScrollEventArgs): # -> 
        """ Invoke(self: ScrollEventHandler, sender: object, e: ScrollEventArgs) """
        ...


class ScrollEventType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ScrollEventType, values: EndScroll (8), First (6), LargeDecrement (2), LargeIncrement (3), Last (7), SmallDecrement (0), SmallIncrement (1), ThumbPosition (4), ThumbTrack (5) """
    EndScroll: ScrollEventType = ...
    First: ScrollEventType = ...
    LargeDecrement: ScrollEventType = ...
    LargeIncrement: ScrollEventType = ...
    Last: ScrollEventType = ...
    SmallDecrement: ScrollEventType = ...
    SmallIncrement: ScrollEventType = ...
    ThumbPosition: ScrollEventType = ...
    ThumbTrack: ScrollEventType = ...
    value__ = ...


class ScrollOrientation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ScrollOrientation, values: HorizontalScroll (0), VerticalScroll (1) """
    HorizontalScroll: ScrollOrientation = ...
    value__ = ...
    VerticalScroll: ScrollOrientation = ...


class SearchDirectionHint(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SearchDirectionHint, values: Down (40), Left (37), Right (39), Up (38) """
    Down: SearchDirectionHint = ...
    Left: SearchDirectionHint = ...
    Right: SearchDirectionHint = ...
    Up: SearchDirectionHint = ...
    value__ = ...


class SearchForVirtualItemEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ SearchForVirtualItemEventArgs(isTextSearch: bool, isPrefixSearch: bool, includeSubItemsInSearch: bool, text: str, startingPoint: Point, direction: SearchDirectionHint, startIndex: int) """
    @property
    def Direction(self) -> SearchDirectionHint:
        """ Get: Direction(self: SearchForVirtualItemEventArgs) -> SearchDirectionHint """
        ...

    @property
    def IncludeSubItemsInSearch(self) -> bool:
        """ Get: IncludeSubItemsInSearch(self: SearchForVirtualItemEventArgs) -> bool """
        ...

    @property
    def Index(self) -> int:
        """
        Get: Index(self: SearchForVirtualItemEventArgs) -> int
        Set: Index(self: SearchForVirtualItemEventArgs) = value
        """
        ...

    @property
    def IsPrefixSearch(self) -> bool:
        """ Get: IsPrefixSearch(self: SearchForVirtualItemEventArgs) -> bool """
        ...

    @property
    def IsTextSearch(self) -> bool:
        """ Get: IsTextSearch(self: SearchForVirtualItemEventArgs) -> bool """
        ...

    @property
    def StartIndex(self) -> int:
        """ Get: StartIndex(self: SearchForVirtualItemEventArgs) -> int """
        ...

    @property
    def StartingPoint(self) -> Point:
        """ Get: StartingPoint(self: SearchForVirtualItemEventArgs) -> Point """
        ...

    @property
    def Text(self) -> str:
        """ Get: Text(self: SearchForVirtualItemEventArgs) -> str """
        ...


    def __new__(cls, isTextSearch:bool, isPrefixSearch:bool, includeSubItemsInSearch:bool, text:str, startingPoint:Point, direction:SearchDirectionHint, startIndex:int) -> Self:
        """ __new__(cls: type, isTextSearch: bool, isPrefixSearch: bool, includeSubItemsInSearch: bool, text: str, startingPoint: Point, direction: SearchDirectionHint, startIndex: int) """
        ...


class SearchForVirtualItemEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ SearchForVirtualItemEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:SearchForVirtualItemEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: SearchForVirtualItemEventHandler, sender: object, e: SearchForVirtualItemEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: SearchForVirtualItemEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:SearchForVirtualItemEventArgs): # -> 
        """ Invoke(self: SearchForVirtualItemEventHandler, sender: object, e: SearchForVirtualItemEventArgs) """
        ...


class SecurityIDType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SecurityIDType, values: Alias (4), Computer (9), DeletedAccount (6), Domain (3), Group (2), Invalid (7), Unknown (8), User (1), WellKnownGroup (5) """
    Alias: SecurityIDType = ...
    Computer: SecurityIDType = ...
    DeletedAccount: SecurityIDType = ...
    Domain: SecurityIDType = ...
    Group: SecurityIDType = ...
    Invalid: SecurityIDType = ...
    Unknown: SecurityIDType = ...
    User: SecurityIDType = ...
    value__ = ...
    WellKnownGroup: SecurityIDType = ...


class SelectedGridItemChangedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ SelectedGridItemChangedEventArgs(oldSel: GridItem, newSel: GridItem) """
    @property
    def NewSelection(self) -> GridItem:
        """ Get: NewSelection(self: SelectedGridItemChangedEventArgs) -> GridItem """
        ...

    @property
    def OldSelection(self) -> GridItem:
        """ Get: OldSelection(self: SelectedGridItemChangedEventArgs) -> GridItem """
        ...


    def __new__(cls, oldSel:GridItem, newSel:GridItem) -> Self:
        """ __new__(cls: type, oldSel: GridItem, newSel: GridItem) """
        ...


class SelectedGridItemChangedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ SelectedGridItemChangedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:SelectedGridItemChangedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: SelectedGridItemChangedEventHandler, sender: object, e: SelectedGridItemChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: SelectedGridItemChangedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:SelectedGridItemChangedEventArgs): # -> 
        """ Invoke(self: SelectedGridItemChangedEventHandler, sender: object, e: SelectedGridItemChangedEventArgs) """
        ...


class SelectionMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SelectionMode, values: MultiExtended (3), MultiSimple (2), None (0), One (1) """
    MultiExtended: SelectionMode = ...
    MultiSimple: SelectionMode = ...
    One: SelectionMode = ...
    value__ = ...


class SelectionRange: # skipped bases: <type 'object'>, <type 'object'>
    """
    SelectionRange()
    SelectionRange(lower: DateTime, upper: DateTime)
    SelectionRange(range: SelectionRange)
    """
    @property
    def End(self) -> DateTime:
        """
        Get: End(self: SelectionRange) -> DateTime
        Set: End(self: SelectionRange) = value
        """
        ...

    @property
    def Start(self) -> DateTime:
        """
        Get: Start(self: SelectionRange) -> DateTime
        Set: Start(self: SelectionRange) = value
        """
        ...


    def ToString(self) -> str:
        """ ToString(self: SelectionRange) -> str """
        ...


class SelectionRangeConverter(TypeConverter): # skipped bases: <type 'object'>
    """ SelectionRangeConverter() """
    pass

class SendKeys: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @staticmethod
    def Flush(): # -> 
        """ Flush() """
        ...

    @staticmethod
    def Send(keys:str): # -> 
        """ Send(keys: str) """
        ...

    @staticmethod
    def SendWait(keys:str): # -> 
        """ SendWait(keys: str) """
        ...


class Shortcut(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum Shortcut, values: Alt0 (262192), Alt1 (262193), Alt2 (262194), Alt3 (262195), Alt4 (262196), Alt5 (262197), Alt6 (262198), Alt7 (262199), Alt8 (262200), Alt9 (262201), AltBksp (262152), AltDownArrow (262184), AltF1 (262256), AltF10 (262265), AltF11 (262266), AltF12 (262267), AltF2 (262257), AltF3 (262258), AltF4 (262259), AltF5 (262260), AltF6 (262261), AltF7 (262262), AltF8 (262263), AltF9 (262264), AltLeftArrow (262181), AltRightArrow (262183), AltUpArrow (262182), Ctrl0 (131120), Ctrl1 (131121), Ctrl2 (131122), Ctrl3 (131123), Ctrl4 (131124), Ctrl5 (131125), Ctrl6 (131126), Ctrl7 (131127), Ctrl8 (131128), Ctrl9 (131129), CtrlA (131137), CtrlB (131138), CtrlC (131139), CtrlD (131140), CtrlDel (131118), CtrlE (131141), CtrlF (131142), CtrlF1 (131184), CtrlF10 (131193), CtrlF11 (131194), CtrlF12 (131195), CtrlF2 (131185), CtrlF3 (131186), CtrlF4 (131187), CtrlF5 (131188), CtrlF6 (131189), CtrlF7 (131190), CtrlF8 (131191), CtrlF9 (131192), CtrlG (131143), CtrlH (131144), CtrlI (131145), CtrlIns (131117), CtrlJ (131146), CtrlK (131147), CtrlL (131148), CtrlM (131149), CtrlN (131150), CtrlO (131151), CtrlP (131152), CtrlQ (131153), CtrlR (131154), CtrlS (131155), CtrlShift0 (196656), CtrlShift1 (196657), CtrlShift2 (196658), CtrlShift3 (196659), CtrlShift4 (196660), CtrlShift5 (196661), CtrlShift6 (196662), CtrlShift7 (196663), CtrlShift8 (196664), CtrlShift9 (196665), CtrlShiftA (196673), CtrlShiftB (196674), CtrlShiftC (196675), CtrlShiftD (196676), CtrlShiftE (196677), CtrlShiftF (196678), CtrlShiftF1 (196720), CtrlShiftF10 (196729), CtrlShiftF11 (196730), CtrlShiftF12 (196731), CtrlShiftF2 (196721), CtrlShiftF3 (196722), CtrlShiftF4 (196723), CtrlShiftF5 (196724), CtrlShiftF6 (196725), CtrlShiftF7 (196726), CtrlShiftF8 (196727), CtrlShiftF9 (196728), CtrlShiftG (196679), CtrlShiftH (196680), CtrlShiftI (196681), CtrlShiftJ (196682), CtrlShiftK (196683), CtrlShiftL (196684), CtrlShiftM (196685), CtrlShiftN (196686), CtrlShiftO (196687), CtrlShiftP (196688), CtrlShiftQ (196689), CtrlShiftR (196690), CtrlShiftS (196691), CtrlShiftT (196692), CtrlShiftU (196693), CtrlShiftV (196694), CtrlShiftW (196695), CtrlShiftX (196696), CtrlShiftY (196697), CtrlShiftZ (196698), CtrlT (131156), CtrlU (131157), CtrlV (131158), CtrlW (131159), CtrlX (131160), CtrlY (131161), CtrlZ (131162), Del (46), F1 (112), F10 (121), F11 (122), F12 (123), F2 (113), F3 (114), F4 (115), F5 (116), F6 (117), F7 (118), F8 (119), F9 (120), Ins (45), None (0), ShiftDel (65582), ShiftF1 (65648), ShiftF10 (65657), ShiftF11 (65658), ShiftF12 (65659), ShiftF2 (65649), ShiftF3 (65650), ShiftF4 (65651), ShiftF5 (65652), ShiftF6 (65653), ShiftF7 (65654), ShiftF8 (65655), ShiftF9 (65656), ShiftIns (65581) """
    Alt0: Shortcut = ...
    Alt1: Shortcut = ...
    Alt2: Shortcut = ...
    Alt3: Shortcut = ...
    Alt4: Shortcut = ...
    Alt5: Shortcut = ...
    Alt6: Shortcut = ...
    Alt7: Shortcut = ...
    Alt8: Shortcut = ...
    Alt9: Shortcut = ...
    AltBksp: Shortcut = ...
    AltDownArrow: Shortcut = ...
    AltF1: Shortcut = ...
    AltF10: Shortcut = ...
    AltF11: Shortcut = ...
    AltF12: Shortcut = ...
    AltF2: Shortcut = ...
    AltF3: Shortcut = ...
    AltF4: Shortcut = ...
    AltF5: Shortcut = ...
    AltF6: Shortcut = ...
    AltF7: Shortcut = ...
    AltF8: Shortcut = ...
    AltF9: Shortcut = ...
    AltLeftArrow: Shortcut = ...
    AltRightArrow: Shortcut = ...
    AltUpArrow: Shortcut = ...
    Ctrl0: Shortcut = ...
    Ctrl1: Shortcut = ...
    Ctrl2: Shortcut = ...
    Ctrl3: Shortcut = ...
    Ctrl4: Shortcut = ...
    Ctrl5: Shortcut = ...
    Ctrl6: Shortcut = ...
    Ctrl7: Shortcut = ...
    Ctrl8: Shortcut = ...
    Ctrl9: Shortcut = ...
    CtrlA: Shortcut = ...
    CtrlB: Shortcut = ...
    CtrlC: Shortcut = ...
    CtrlD: Shortcut = ...
    CtrlDel: Shortcut = ...
    CtrlE: Shortcut = ...
    CtrlF: Shortcut = ...
    CtrlF1: Shortcut = ...
    CtrlF10: Shortcut = ...
    CtrlF11: Shortcut = ...
    CtrlF12: Shortcut = ...
    CtrlF2: Shortcut = ...
    CtrlF3: Shortcut = ...
    CtrlF4: Shortcut = ...
    CtrlF5: Shortcut = ...
    CtrlF6: Shortcut = ...
    CtrlF7: Shortcut = ...
    CtrlF8: Shortcut = ...
    CtrlF9: Shortcut = ...
    CtrlG: Shortcut = ...
    CtrlH: Shortcut = ...
    CtrlI: Shortcut = ...
    CtrlIns: Shortcut = ...
    CtrlJ: Shortcut = ...
    CtrlK: Shortcut = ...
    CtrlL: Shortcut = ...
    CtrlM: Shortcut = ...
    CtrlN: Shortcut = ...
    CtrlO: Shortcut = ...
    CtrlP: Shortcut = ...
    CtrlQ: Shortcut = ...
    CtrlR: Shortcut = ...
    CtrlS: Shortcut = ...
    CtrlShift0: Shortcut = ...
    CtrlShift1: Shortcut = ...
    CtrlShift2: Shortcut = ...
    CtrlShift3: Shortcut = ...
    CtrlShift4: Shortcut = ...
    CtrlShift5: Shortcut = ...
    CtrlShift6: Shortcut = ...
    CtrlShift7: Shortcut = ...
    CtrlShift8: Shortcut = ...
    CtrlShift9: Shortcut = ...
    CtrlShiftA: Shortcut = ...
    CtrlShiftB: Shortcut = ...
    CtrlShiftC: Shortcut = ...
    CtrlShiftD: Shortcut = ...
    CtrlShiftE: Shortcut = ...
    CtrlShiftF: Shortcut = ...
    CtrlShiftF1: Shortcut = ...
    CtrlShiftF10: Shortcut = ...
    CtrlShiftF11: Shortcut = ...
    CtrlShiftF12: Shortcut = ...
    CtrlShiftF2: Shortcut = ...
    CtrlShiftF3: Shortcut = ...
    CtrlShiftF4: Shortcut = ...
    CtrlShiftF5: Shortcut = ...
    CtrlShiftF6: Shortcut = ...
    CtrlShiftF7: Shortcut = ...
    CtrlShiftF8: Shortcut = ...
    CtrlShiftF9: Shortcut = ...
    CtrlShiftG: Shortcut = ...
    CtrlShiftH: Shortcut = ...
    CtrlShiftI: Shortcut = ...
    CtrlShiftJ: Shortcut = ...
    CtrlShiftK: Shortcut = ...
    CtrlShiftL: Shortcut = ...
    CtrlShiftM: Shortcut = ...
    CtrlShiftN: Shortcut = ...
    CtrlShiftO: Shortcut = ...
    CtrlShiftP: Shortcut = ...
    CtrlShiftQ: Shortcut = ...
    CtrlShiftR: Shortcut = ...
    CtrlShiftS: Shortcut = ...
    CtrlShiftT: Shortcut = ...
    CtrlShiftU: Shortcut = ...
    CtrlShiftV: Shortcut = ...
    CtrlShiftW: Shortcut = ...
    CtrlShiftX: Shortcut = ...
    CtrlShiftY: Shortcut = ...
    CtrlShiftZ: Shortcut = ...
    CtrlT: Shortcut = ...
    CtrlU: Shortcut = ...
    CtrlV: Shortcut = ...
    CtrlW: Shortcut = ...
    CtrlX: Shortcut = ...
    CtrlY: Shortcut = ...
    CtrlZ: Shortcut = ...
    Del: Shortcut = ...
    F1: Shortcut = ...
    F10: Shortcut = ...
    F11: Shortcut = ...
    F12: Shortcut = ...
    F2: Shortcut = ...
    F3: Shortcut = ...
    F4: Shortcut = ...
    F5: Shortcut = ...
    F6: Shortcut = ...
    F7: Shortcut = ...
    F8: Shortcut = ...
    F9: Shortcut = ...
    Ins: Shortcut = ...
    ShiftDel: Shortcut = ...
    ShiftF1: Shortcut = ...
    ShiftF10: Shortcut = ...
    ShiftF11: Shortcut = ...
    ShiftF12: Shortcut = ...
    ShiftF2: Shortcut = ...
    ShiftF3: Shortcut = ...
    ShiftF4: Shortcut = ...
    ShiftF5: Shortcut = ...
    ShiftF6: Shortcut = ...
    ShiftF7: Shortcut = ...
    ShiftF8: Shortcut = ...
    ShiftF9: Shortcut = ...
    ShiftIns: Shortcut = ...
    value__ = ...


class SizeGripStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SizeGripStyle, values: Auto (0), Hide (2), Show (1) """
    Auto: SizeGripStyle = ...
    Hide: SizeGripStyle = ...
    Show: SizeGripStyle = ...
    value__ = ...


class SizeType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SizeType, values: Absolute (1), AutoSize (0), Percent (2) """
    Absolute: SizeType = ...
    AutoSize: SizeType = ...
    Percent: SizeType = ...
    value__ = ...


class SortOrder(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SortOrder, values: Ascending (1), Descending (2), None (0) """
    Ascending: SortOrder = ...
    Descending: SortOrder = ...
    value__ = ...


class SplitContainer(ContainerControl, ISupportInitialize): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'IContainerControl'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ SplitContainer() """
    @property
    def AutoScroll(self) -> bool:
        """
        Get: AutoScroll(self: SplitContainer) -> bool
        Set: AutoScroll(self: SplitContainer) = value
        """
        ...

    @property
    def AutoScrollMargin(self) -> Size:
        """
        Get: AutoScrollMargin(self: SplitContainer) -> Size
        Set: AutoScrollMargin(self: SplitContainer) = value
        """
        ...

    @property
    def AutoScrollMinSize(self) -> Size:
        """
        Get: AutoScrollMinSize(self: SplitContainer) -> Size
        Set: AutoScrollMinSize(self: SplitContainer) = value
        """
        ...

    @property
    def AutoScrollOffset(self) -> Point:
        """
        Get: AutoScrollOffset(self: SplitContainer) -> Point
        Set: AutoScrollOffset(self: SplitContainer) = value
        """
        ...

    @property
    def AutoScrollPosition(self) -> Point:
        """
        Get: AutoScrollPosition(self: SplitContainer) -> Point
        Set: AutoScrollPosition(self: SplitContainer) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: SplitContainer) -> bool
        Set: AutoSize(self: SplitContainer) = value
        """
        ...

    @property
    def BackgroundImage(self) -> Image:
        """
        Get: BackgroundImage(self: SplitContainer) -> Image
        Set: BackgroundImage(self: SplitContainer) = value
        """
        ...

    @property
    def BackgroundImageLayout(self) -> ImageLayout:
        """
        Get: BackgroundImageLayout(self: SplitContainer) -> ImageLayout
        Set: BackgroundImageLayout(self: SplitContainer) = value
        """
        ...

    @property
    def BorderStyle(self) -> BorderStyle:
        """
        Get: BorderStyle(self: SplitContainer) -> BorderStyle
        Set: BorderStyle(self: SplitContainer) = value
        """
        ...

    @property
    def Controls(self) -> ControlCollection:
        """ Get: Controls(self: SplitContainer) -> ControlCollection """
        ...

    @property
    def Dock(self) -> DockStyle:
        """
        Get: Dock(self: SplitContainer) -> DockStyle
        Set: Dock(self: SplitContainer) = value
        """
        ...

    @property
    def FixedPanel(self) -> FixedPanel:
        """
        Get: FixedPanel(self: SplitContainer) -> FixedPanel
        Set: FixedPanel(self: SplitContainer) = value
        """
        ...

    @property
    def IsSplitterFixed(self) -> bool:
        """
        Get: IsSplitterFixed(self: SplitContainer) -> bool
        Set: IsSplitterFixed(self: SplitContainer) = value
        """
        ...

    @property
    def Orientation(self) -> Orientation:
        """
        Get: Orientation(self: SplitContainer) -> Orientation
        Set: Orientation(self: SplitContainer) = value
        """
        ...

    @property
    def Padding(self) -> Padding:
        """
        Get: Padding(self: SplitContainer) -> Padding
        Set: Padding(self: SplitContainer) = value
        """
        ...

    @property
    def Panel1(self): # -> SplitterPanel
        """ Get: Panel1(self: SplitContainer) -> SplitterPanel """
        ...

    @property
    def Panel1Collapsed(self) -> bool:
        """
        Get: Panel1Collapsed(self: SplitContainer) -> bool
        Set: Panel1Collapsed(self: SplitContainer) = value
        """
        ...

    @property
    def Panel1MinSize(self) -> int:
        """
        Get: Panel1MinSize(self: SplitContainer) -> int
        Set: Panel1MinSize(self: SplitContainer) = value
        """
        ...

    @property
    def Panel2(self): # -> SplitterPanel
        """ Get: Panel2(self: SplitContainer) -> SplitterPanel """
        ...

    @property
    def Panel2Collapsed(self) -> bool:
        """
        Get: Panel2Collapsed(self: SplitContainer) -> bool
        Set: Panel2Collapsed(self: SplitContainer) = value
        """
        ...

    @property
    def Panel2MinSize(self) -> int:
        """
        Get: Panel2MinSize(self: SplitContainer) -> int
        Set: Panel2MinSize(self: SplitContainer) = value
        """
        ...

    @property
    def SplitterDistance(self) -> int:
        """
        Get: SplitterDistance(self: SplitContainer) -> int
        Set: SplitterDistance(self: SplitContainer) = value
        """
        ...

    @property
    def SplitterIncrement(self) -> int:
        """
        Get: SplitterIncrement(self: SplitContainer) -> int
        Set: SplitterIncrement(self: SplitContainer) = value
        """
        ...

    @property
    def SplitterRectangle(self) -> Rectangle:
        """ Get: SplitterRectangle(self: SplitContainer) -> Rectangle """
        ...

    @property
    def SplitterWidth(self) -> int:
        """
        Get: SplitterWidth(self: SplitContainer) -> int
        Set: SplitterWidth(self: SplitContainer) = value
        """
        ...

    @property
    def TabStop(self) -> bool:
        """
        Get: TabStop(self: SplitContainer) -> bool
        Set: TabStop(self: SplitContainer) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: SplitContainer) -> str
        Set: Text(self: SplitContainer) = value
        """
        ...


    def OnSplitterMoved(self, e): # ->  # Not found arg types: {'e': 'SplitterEventArgs'}
        """ OnSplitterMoved(self: SplitContainer, e: SplitterEventArgs) """
        ...

    def OnSplitterMoving(self, e): # ->  # Not found arg types: {'e': 'SplitterCancelEventArgs'}
        """ OnSplitterMoving(self: SplitContainer, e: SplitterCancelEventArgs) """
        ...

    AutoSizeChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    ControlAdded = ...
    ControlRemoved = ...
    PaddingChanged = ...
    SplitterMoved = ...
    SplitterMoving = ...
    TextChanged = ...


class Splitter(Control): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ Splitter() """
    @property
    def BorderStyle(self) -> BorderStyle:
        """
        Get: BorderStyle(self: Splitter) -> BorderStyle
        Set: BorderStyle(self: Splitter) = value
        """
        ...

    @property
    def MinExtra(self) -> int:
        """
        Get: MinExtra(self: Splitter) -> int
        Set: MinExtra(self: Splitter) = value
        """
        ...

    @property
    def MinSize(self) -> int:
        """
        Get: MinSize(self: Splitter) -> int
        Set: MinSize(self: Splitter) = value
        """
        ...

    @property
    def SplitPosition(self) -> int:
        """
        Get: SplitPosition(self: Splitter) -> int
        Set: SplitPosition(self: Splitter) = value
        """
        ...


    def OnSplitterMoved(self, *args): #cannot find CLR method
        """ OnSplitterMoved(self: Splitter, sevent: SplitterEventArgs) """
        ...

    def OnSplitterMoving(self, *args): #cannot find CLR method
        """ OnSplitterMoving(self: Splitter, sevent: SplitterEventArgs) """
        ...

    def ToString(self) -> str:
        """ ToString(self: Splitter) -> str """
        ...

    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    Enter = ...
    FontChanged = ...
    ForeColorChanged = ...
    ImeModeChanged = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Leave = ...
    SplitterMoved = ...
    SplitterMoving = ...
    TabStopChanged = ...
    TextChanged = ...


class SplitterCancelEventArgs(CancelEventArgs): # skipped bases: <type 'object'>
    """ SplitterCancelEventArgs(mouseCursorX: int, mouseCursorY: int, splitX: int, splitY: int) """
    @property
    def MouseCursorX(self) -> int:
        """ Get: MouseCursorX(self: SplitterCancelEventArgs) -> int """
        ...

    @property
    def MouseCursorY(self) -> int:
        """ Get: MouseCursorY(self: SplitterCancelEventArgs) -> int """
        ...

    @property
    def SplitX(self) -> int:
        """
        Get: SplitX(self: SplitterCancelEventArgs) -> int
        Set: SplitX(self: SplitterCancelEventArgs) = value
        """
        ...

    @property
    def SplitY(self) -> int:
        """
        Get: SplitY(self: SplitterCancelEventArgs) -> int
        Set: SplitY(self: SplitterCancelEventArgs) = value
        """
        ...



class SplitterCancelEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ SplitterCancelEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:SplitterCancelEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: SplitterCancelEventHandler, sender: object, e: SplitterCancelEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: SplitterCancelEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:SplitterCancelEventArgs): # -> 
        """ Invoke(self: SplitterCancelEventHandler, sender: object, e: SplitterCancelEventArgs) """
        ...


class SplitterEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ SplitterEventArgs(x: int, y: int, splitX: int, splitY: int) """
    @property
    def SplitX(self) -> int:
        """
        Get: SplitX(self: SplitterEventArgs) -> int
        Set: SplitX(self: SplitterEventArgs) = value
        """
        ...

    @property
    def SplitY(self) -> int:
        """
        Get: SplitY(self: SplitterEventArgs) -> int
        Set: SplitY(self: SplitterEventArgs) = value
        """
        ...

    @property
    def X(self) -> int:
        """ Get: X(self: SplitterEventArgs) -> int """
        ...

    @property
    def Y(self) -> int:
        """ Get: Y(self: SplitterEventArgs) -> int """
        ...


    def __new__(cls, x:int, y:int, splitX:int, splitY:int) -> Self:
        """ __new__(cls: type, x: int, y: int, splitX: int, splitY: int) """
        ...


class SplitterEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ SplitterEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:SplitterEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: SplitterEventHandler, sender: object, e: SplitterEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: SplitterEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:SplitterEventArgs): # -> 
        """ Invoke(self: SplitterEventHandler, sender: object, e: SplitterEventArgs) """
        ...


class SplitterPanel(Panel): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ SplitterPanel(owner: SplitContainer) """
    @property
    def Anchor(self) -> AnchorStyles:
        """
        Get: Anchor(self: SplitterPanel) -> AnchorStyles
        Set: Anchor(self: SplitterPanel) = value
        """
        ...

    @property
    def Dock(self) -> DockStyle:
        """
        Get: Dock(self: SplitterPanel) -> DockStyle
        Set: Dock(self: SplitterPanel) = value
        """
        ...

    @property
    def DockPadding(self): # -> DockPaddingEdges
        """ Get: DockPadding(self: SplitterPanel) -> DockPaddingEdges """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: SplitterPanel) -> int
        Set: Height(self: SplitterPanel) = value
        """
        ...

    @property
    def Location(self) -> Point:
        """
        Get: Location(self: SplitterPanel) -> Point
        Set: Location(self: SplitterPanel) = value
        """
        ...

    @property
    def MaximumSize(self) -> Size:
        """
        Get: MaximumSize(self: SplitterPanel) -> Size
        Set: MaximumSize(self: SplitterPanel) = value
        """
        ...

    @property
    def MinimumSize(self) -> Size:
        """
        Get: MinimumSize(self: SplitterPanel) -> Size
        Set: MinimumSize(self: SplitterPanel) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: SplitterPanel) -> str
        Set: Name(self: SplitterPanel) = value
        """
        ...

    @property
    def Parent(self) -> Control:
        """
        Get: Parent(self: SplitterPanel) -> Control
        Set: Parent(self: SplitterPanel) = value
        """
        ...

    @property
    def Size(self) -> Size:
        """
        Get: Size(self: SplitterPanel) -> Size
        Set: Size(self: SplitterPanel) = value
        """
        ...

    @property
    def TabIndex(self) -> int:
        """
        Get: TabIndex(self: SplitterPanel) -> int
        Set: TabIndex(self: SplitterPanel) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: SplitterPanel) -> bool
        Set: Visible(self: SplitterPanel) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: SplitterPanel) -> int
        Set: Width(self: SplitterPanel) = value
        """
        ...


    def __new__(cls, owner:SplitContainer) -> Self:
        """ __new__(cls: type, owner: SplitContainer) """
        ...

    AutoSizeChanged = ...
    DockChanged = ...
    LocationChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    VisibleChanged = ...


class StatusBar(Control): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ StatusBar() """
    @property
    def Panels(self): # -> StatusBarPanelCollection
        """ Get: Panels(self: StatusBar) -> StatusBarPanelCollection """
        ...

    @property
    def ShowPanels(self) -> bool:
        """
        Get: ShowPanels(self: StatusBar) -> bool
        Set: ShowPanels(self: StatusBar) = value
        """
        ...

    @property
    def SizingGrip(self) -> bool:
        """
        Get: SizingGrip(self: StatusBar) -> bool
        Set: SizingGrip(self: StatusBar) = value
        """
        ...


    def OnDrawItem(self, *args): #cannot find CLR method
        """ OnDrawItem(self: StatusBar, sbdievent: StatusBarDrawItemEventArgs) """
        ...

    def OnPanelClick(self, *args): #cannot find CLR method
        """ OnPanelClick(self: StatusBar, e: StatusBarPanelClickEventArgs) """
        ...

    def StatusBarPanelCollection(self, *args): #cannot find CLR method
        """ StatusBarPanelCollection(owner: StatusBar) """
        ...

    def ToString(self) -> str:
        """ ToString(self: StatusBar) -> str """
        ...

    BackColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    DrawItem = ...
    ForeColorChanged = ...
    ImeModeChanged = ...
    Paint = ...
    PanelClick = ...


class StatusBarDrawItemEventArgs(DrawItemEventArgs): # skipped bases: <type 'object'>
    """
    StatusBarDrawItemEventArgs(g: Graphics, font: Font, r: Rectangle, itemId: int, itemState: DrawItemState, panel: StatusBarPanel)
    StatusBarDrawItemEventArgs(g: Graphics, font: Font, r: Rectangle, itemId: int, itemState: DrawItemState, panel: StatusBarPanel, foreColor: Color, backColor: Color)
    """
    @property
    def Panel(self): # -> StatusBarPanel
        """ Get: Panel(self: StatusBarDrawItemEventArgs) -> StatusBarPanel """
        ...



class StatusBarDrawItemEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ StatusBarDrawItemEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, sbdevent:StatusBarDrawItemEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: StatusBarDrawItemEventHandler, sender: object, sbdevent: StatusBarDrawItemEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: StatusBarDrawItemEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, sbdevent:StatusBarDrawItemEventArgs): # -> 
        """ Invoke(self: StatusBarDrawItemEventHandler, sender: object, sbdevent: StatusBarDrawItemEventArgs) """
        ...


class StatusBarPanel(ISupportInitialize, Component): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """ StatusBarPanel() """
    @property
    def Alignment(self) -> HorizontalAlignment:
        """
        Get: Alignment(self: StatusBarPanel) -> HorizontalAlignment
        Set: Alignment(self: StatusBarPanel) = value
        """
        ...

    @property
    def AutoSize(self): # -> StatusBarPanelAutoSize
        """
        Get: AutoSize(self: StatusBarPanel) -> StatusBarPanelAutoSize
        Set: AutoSize(self: StatusBarPanel) = value
        """
        ...

    @property
    def BorderStyle(self): # -> StatusBarPanelBorderStyle
        """
        Get: BorderStyle(self: StatusBarPanel) -> StatusBarPanelBorderStyle
        Set: BorderStyle(self: StatusBarPanel) = value
        """
        ...

    @property
    def Icon(self) -> Icon:
        """
        Get: Icon(self: StatusBarPanel) -> Icon
        Set: Icon(self: StatusBarPanel) = value
        """
        ...

    @property
    def MinWidth(self) -> int:
        """
        Get: MinWidth(self: StatusBarPanel) -> int
        Set: MinWidth(self: StatusBarPanel) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: StatusBarPanel) -> str
        Set: Name(self: StatusBarPanel) = value
        """
        ...

    @property
    def Parent(self) -> StatusBar:
        """ Get: Parent(self: StatusBarPanel) -> StatusBar """
        ...

    @property
    def Style(self): # -> StatusBarPanelStyle
        """
        Get: Style(self: StatusBarPanel) -> StatusBarPanelStyle
        Set: Style(self: StatusBarPanel) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: StatusBarPanel) -> object
        Set: Tag(self: StatusBarPanel) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: StatusBarPanel) -> str
        Set: Text(self: StatusBarPanel) = value
        """
        ...

    @property
    def ToolTipText(self) -> str:
        """
        Get: ToolTipText(self: StatusBarPanel) -> str
        Set: ToolTipText(self: StatusBarPanel) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: StatusBarPanel) -> int
        Set: Width(self: StatusBarPanel) = value
        """
        ...



class StatusBarPanelAutoSize(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum StatusBarPanelAutoSize, values: Contents (3), None (1), Spring (2) """
    Contents: StatusBarPanelAutoSize = ...
    Spring: StatusBarPanelAutoSize = ...
    value__ = ...


class StatusBarPanelBorderStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum StatusBarPanelBorderStyle, values: None (1), Raised (2), Sunken (3) """
    Raised: StatusBarPanelBorderStyle = ...
    Sunken: StatusBarPanelBorderStyle = ...
    value__ = ...


class StatusBarPanelClickEventArgs(MouseEventArgs): # skipped bases: <type 'object'>
    """ StatusBarPanelClickEventArgs(statusBarPanel: StatusBarPanel, button: MouseButtons, clicks: int, x: int, y: int) """
    @property
    def StatusBarPanel(self) -> StatusBarPanel:
        """ Get: StatusBarPanel(self: StatusBarPanelClickEventArgs) -> StatusBarPanel """
        ...



class StatusBarPanelClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ StatusBarPanelClickEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:StatusBarPanelClickEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: StatusBarPanelClickEventHandler, sender: object, e: StatusBarPanelClickEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: StatusBarPanelClickEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:StatusBarPanelClickEventArgs): # -> 
        """ Invoke(self: StatusBarPanelClickEventHandler, sender: object, e: StatusBarPanelClickEventArgs) """
        ...


class StatusBarPanelStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum StatusBarPanelStyle, values: OwnerDraw (2), Text (1) """
    OwnerDraw: StatusBarPanelStyle = ...
    Text: StatusBarPanelStyle = ...
    value__ = ...


class StatusStrip(ToolStrip): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'ISupportToolStripPanel'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ StatusStrip() """
    @property
    def Padding(self) -> Padding:
        """
        Get: Padding(self: StatusStrip) -> Padding
        Set: Padding(self: StatusStrip) = value
        """
        ...

    @property
    def SizeGripBounds(self) -> Rectangle:
        """ Get: SizeGripBounds(self: StatusStrip) -> Rectangle """
        ...

    @property
    def SizingGrip(self) -> bool:
        """
        Get: SizingGrip(self: StatusStrip) -> bool
        Set: SizingGrip(self: StatusStrip) = value
        """
        ...


    def OnSpringTableLayoutCore(self, *args): #cannot find CLR method
        """ OnSpringTableLayoutCore(self: StatusStrip) """
        ...

    PaddingChanged = ...


class StructFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum StructFormat, values: Ansi (1), Auto (3), Unicode (2) """
    Ansi: StructFormat = ...
    Auto: StructFormat = ...
    Unicode: StructFormat = ...
    value__ = ...


class SystemInformation: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def ActiveWindowTrackingDelay(self) -> int:
        """ Get: ActiveWindowTrackingDelay() -> int """
        ...

    @property
    def ArrangeDirection(self) -> ArrangeDirection:
        """ Get: ArrangeDirection() -> ArrangeDirection """
        ...

    @property
    def ArrangeStartingPosition(self) -> ArrangeStartingPosition:
        """ Get: ArrangeStartingPosition() -> ArrangeStartingPosition """
        ...

    @property
    def BootMode(self) -> BootMode:
        """ Get: BootMode() -> BootMode """
        ...

    @property
    def Border3DSize(self) -> Size:
        """ Get: Border3DSize() -> Size """
        ...

    @property
    def BorderMultiplierFactor(self) -> int:
        """ Get: BorderMultiplierFactor() -> int """
        ...

    @property
    def BorderSize(self) -> Size:
        """ Get: BorderSize() -> Size """
        ...

    @property
    def CaptionButtonSize(self) -> Size:
        """ Get: CaptionButtonSize() -> Size """
        ...

    @property
    def CaptionHeight(self) -> int:
        """ Get: CaptionHeight() -> int """
        ...

    @property
    def CaretBlinkTime(self) -> int:
        """ Get: CaretBlinkTime() -> int """
        ...

    @property
    def CaretWidth(self) -> int:
        """ Get: CaretWidth() -> int """
        ...

    @property
    def ComputerName(self) -> str:
        """ Get: ComputerName() -> str """
        ...

    @property
    def CursorSize(self) -> Size:
        """ Get: CursorSize() -> Size """
        ...

    @property
    def DbcsEnabled(self) -> bool:
        """ Get: DbcsEnabled() -> bool """
        ...

    @property
    def DebugOS(self) -> bool:
        """ Get: DebugOS() -> bool """
        ...

    @property
    def DoubleClickSize(self) -> Size:
        """ Get: DoubleClickSize() -> Size """
        ...

    @property
    def DoubleClickTime(self) -> int:
        """ Get: DoubleClickTime() -> int """
        ...

    @property
    def DragFullWindows(self) -> bool:
        """ Get: DragFullWindows() -> bool """
        ...

    @property
    def DragSize(self) -> Size:
        """ Get: DragSize() -> Size """
        ...

    @property
    def FixedFrameBorderSize(self) -> Size:
        """ Get: FixedFrameBorderSize() -> Size """
        ...

    @property
    def FontSmoothingContrast(self) -> int:
        """ Get: FontSmoothingContrast() -> int """
        ...

    @property
    def FontSmoothingType(self) -> int:
        """ Get: FontSmoothingType() -> int """
        ...

    @property
    def FrameBorderSize(self) -> Size:
        """ Get: FrameBorderSize() -> Size """
        ...

    @property
    def HighContrast(self) -> bool:
        """ Get: HighContrast() -> bool """
        ...

    @property
    def HorizontalFocusThickness(self) -> int:
        """ Get: HorizontalFocusThickness() -> int """
        ...

    @property
    def HorizontalResizeBorderThickness(self) -> int:
        """ Get: HorizontalResizeBorderThickness() -> int """
        ...

    @property
    def HorizontalScrollBarArrowWidth(self) -> int:
        """ Get: HorizontalScrollBarArrowWidth() -> int """
        ...

    @property
    def HorizontalScrollBarHeight(self) -> int:
        """ Get: HorizontalScrollBarHeight() -> int """
        ...

    @property
    def HorizontalScrollBarThumbWidth(self) -> int:
        """ Get: HorizontalScrollBarThumbWidth() -> int """
        ...

    @property
    def IconHorizontalSpacing(self) -> int:
        """ Get: IconHorizontalSpacing() -> int """
        ...

    @property
    def IconSize(self) -> Size:
        """ Get: IconSize() -> Size """
        ...

    @property
    def IconSpacingSize(self) -> Size:
        """ Get: IconSpacingSize() -> Size """
        ...

    @property
    def IconVerticalSpacing(self) -> int:
        """ Get: IconVerticalSpacing() -> int """
        ...

    @property
    def IsActiveWindowTrackingEnabled(self) -> bool:
        """ Get: IsActiveWindowTrackingEnabled() -> bool """
        ...

    @property
    def IsComboBoxAnimationEnabled(self) -> bool:
        """ Get: IsComboBoxAnimationEnabled() -> bool """
        ...

    @property
    def IsDropShadowEnabled(self) -> bool:
        """ Get: IsDropShadowEnabled() -> bool """
        ...

    @property
    def IsFlatMenuEnabled(self) -> bool:
        """ Get: IsFlatMenuEnabled() -> bool """
        ...

    @property
    def IsFontSmoothingEnabled(self) -> bool:
        """ Get: IsFontSmoothingEnabled() -> bool """
        ...

    @property
    def IsHotTrackingEnabled(self) -> bool:
        """ Get: IsHotTrackingEnabled() -> bool """
        ...

    @property
    def IsIconTitleWrappingEnabled(self) -> bool:
        """ Get: IsIconTitleWrappingEnabled() -> bool """
        ...

    @property
    def IsKeyboardPreferred(self) -> bool:
        """ Get: IsKeyboardPreferred() -> bool """
        ...

    @property
    def IsListBoxSmoothScrollingEnabled(self) -> bool:
        """ Get: IsListBoxSmoothScrollingEnabled() -> bool """
        ...

    @property
    def IsMenuAnimationEnabled(self) -> bool:
        """ Get: IsMenuAnimationEnabled() -> bool """
        ...

    @property
    def IsMenuFadeEnabled(self) -> bool:
        """ Get: IsMenuFadeEnabled() -> bool """
        ...

    @property
    def IsMinimizeRestoreAnimationEnabled(self) -> bool:
        """ Get: IsMinimizeRestoreAnimationEnabled() -> bool """
        ...

    @property
    def IsSelectionFadeEnabled(self) -> bool:
        """ Get: IsSelectionFadeEnabled() -> bool """
        ...

    @property
    def IsSnapToDefaultEnabled(self) -> bool:
        """ Get: IsSnapToDefaultEnabled() -> bool """
        ...

    @property
    def IsTitleBarGradientEnabled(self) -> bool:
        """ Get: IsTitleBarGradientEnabled() -> bool """
        ...

    @property
    def IsToolTipAnimationEnabled(self) -> bool:
        """ Get: IsToolTipAnimationEnabled() -> bool """
        ...

    @property
    def KanjiWindowHeight(self) -> int:
        """ Get: KanjiWindowHeight() -> int """
        ...

    @property
    def KeyboardDelay(self) -> int:
        """ Get: KeyboardDelay() -> int """
        ...

    @property
    def KeyboardSpeed(self) -> int:
        """ Get: KeyboardSpeed() -> int """
        ...

    @property
    def MaxWindowTrackSize(self) -> Size:
        """ Get: MaxWindowTrackSize() -> Size """
        ...

    @property
    def MenuAccessKeysUnderlined(self) -> bool:
        """ Get: MenuAccessKeysUnderlined() -> bool """
        ...

    @property
    def MenuBarButtonSize(self) -> Size:
        """ Get: MenuBarButtonSize() -> Size """
        ...

    @property
    def MenuButtonSize(self) -> Size:
        """ Get: MenuButtonSize() -> Size """
        ...

    @property
    def MenuCheckSize(self) -> Size:
        """ Get: MenuCheckSize() -> Size """
        ...

    @property
    def MenuFont(self) -> Font:
        """ Get: MenuFont() -> Font """
        ...

    @property
    def MenuHeight(self) -> int:
        """ Get: MenuHeight() -> int """
        ...

    @property
    def MenuShowDelay(self) -> int:
        """ Get: MenuShowDelay() -> int """
        ...

    @property
    def MidEastEnabled(self) -> bool:
        """ Get: MidEastEnabled() -> bool """
        ...

    @property
    def MinimizedWindowSize(self) -> Size:
        """ Get: MinimizedWindowSize() -> Size """
        ...

    @property
    def MinimizedWindowSpacingSize(self) -> Size:
        """ Get: MinimizedWindowSpacingSize() -> Size """
        ...

    @property
    def MinimumWindowSize(self) -> Size:
        """ Get: MinimumWindowSize() -> Size """
        ...

    @property
    def MinWindowTrackSize(self) -> Size:
        """ Get: MinWindowTrackSize() -> Size """
        ...

    @property
    def MonitorCount(self) -> int:
        """ Get: MonitorCount() -> int """
        ...

    @property
    def MonitorsSameDisplayFormat(self) -> bool:
        """ Get: MonitorsSameDisplayFormat() -> bool """
        ...

    @property
    def MouseButtons(self) -> int:
        """ Get: MouseButtons() -> int """
        ...

    @property
    def MouseButtonsSwapped(self) -> bool:
        """ Get: MouseButtonsSwapped() -> bool """
        ...

    @property
    def MouseHoverSize(self) -> Size:
        """ Get: MouseHoverSize() -> Size """
        ...

    @property
    def MouseHoverTime(self) -> int:
        """ Get: MouseHoverTime() -> int """
        ...

    @property
    def MousePresent(self) -> bool:
        """ Get: MousePresent() -> bool """
        ...

    @property
    def MouseSpeed(self) -> int:
        """ Get: MouseSpeed() -> int """
        ...

    @property
    def MouseWheelPresent(self) -> bool:
        """ Get: MouseWheelPresent() -> bool """
        ...

    @property
    def MouseWheelScrollDelta(self) -> int:
        """ Get: MouseWheelScrollDelta() -> int """
        ...

    @property
    def MouseWheelScrollLines(self) -> int:
        """ Get: MouseWheelScrollLines() -> int """
        ...

    @property
    def NativeMouseWheelSupport(self) -> bool:
        """ Get: NativeMouseWheelSupport() -> bool """
        ...

    @property
    def Network(self) -> bool:
        """ Get: Network() -> bool """
        ...

    @property
    def PenWindows(self) -> bool:
        """ Get: PenWindows() -> bool """
        ...

    @property
    def PopupMenuAlignment(self) -> LeftRightAlignment:
        """ Get: PopupMenuAlignment() -> LeftRightAlignment """
        ...

    @property
    def PowerStatus(self) -> PowerStatus:
        """ Get: PowerStatus() -> PowerStatus """
        ...

    @property
    def PrimaryMonitorMaximizedWindowSize(self) -> Size:
        """ Get: PrimaryMonitorMaximizedWindowSize() -> Size """
        ...

    @property
    def PrimaryMonitorSize(self) -> Size:
        """ Get: PrimaryMonitorSize() -> Size """
        ...

    @property
    def RightAlignedMenus(self) -> bool:
        """ Get: RightAlignedMenus() -> bool """
        ...

    @property
    def ScreenOrientation(self) -> ScreenOrientation:
        """ Get: ScreenOrientation() -> ScreenOrientation """
        ...

    @property
    def Secure(self) -> bool:
        """ Get: Secure() -> bool """
        ...

    @property
    def ShowSounds(self) -> bool:
        """ Get: ShowSounds() -> bool """
        ...

    @property
    def SizingBorderWidth(self) -> int:
        """ Get: SizingBorderWidth() -> int """
        ...

    @property
    def SmallCaptionButtonSize(self) -> Size:
        """ Get: SmallCaptionButtonSize() -> Size """
        ...

    @property
    def SmallIconSize(self) -> Size:
        """ Get: SmallIconSize() -> Size """
        ...

    @property
    def TerminalServerSession(self) -> bool:
        """ Get: TerminalServerSession() -> bool """
        ...

    @property
    def ToolWindowCaptionButtonSize(self) -> Size:
        """ Get: ToolWindowCaptionButtonSize() -> Size """
        ...

    @property
    def ToolWindowCaptionHeight(self) -> int:
        """ Get: ToolWindowCaptionHeight() -> int """
        ...

    @property
    def UIEffectsEnabled(self) -> bool:
        """ Get: UIEffectsEnabled() -> bool """
        ...

    @property
    def UserDomainName(self) -> str:
        """ Get: UserDomainName() -> str """
        ...

    @property
    def UserInteractive(self) -> bool:
        """ Get: UserInteractive() -> bool """
        ...

    @property
    def UserName(self) -> str:
        """ Get: UserName() -> str """
        ...

    @property
    def VerticalFocusThickness(self) -> int:
        """ Get: VerticalFocusThickness() -> int """
        ...

    @property
    def VerticalResizeBorderThickness(self) -> int:
        """ Get: VerticalResizeBorderThickness() -> int """
        ...

    @property
    def VerticalScrollBarArrowHeight(self) -> int:
        """ Get: VerticalScrollBarArrowHeight() -> int """
        ...

    @property
    def VerticalScrollBarThumbHeight(self) -> int:
        """ Get: VerticalScrollBarThumbHeight() -> int """
        ...

    @property
    def VerticalScrollBarWidth(self) -> int:
        """ Get: VerticalScrollBarWidth() -> int """
        ...

    @property
    def VirtualScreen(self) -> Rectangle:
        """ Get: VirtualScreen() -> Rectangle """
        ...

    @property
    def WorkingArea(self) -> Rectangle:
        """ Get: WorkingArea() -> Rectangle """
        ...


    @staticmethod
    def GetBorderSizeForDpi(dpi:int) -> Size:
        """ GetBorderSizeForDpi(dpi: int) -> Size """
        ...

    @staticmethod
    def GetHorizontalScrollBarArrowWidthForDpi(dpi:int) -> int:
        """ GetHorizontalScrollBarArrowWidthForDpi(dpi: int) -> int """
        ...

    @staticmethod
    def GetHorizontalScrollBarHeightForDpi(dpi:int) -> int:
        """ GetHorizontalScrollBarHeightForDpi(dpi: int) -> int """
        ...

    @staticmethod
    def GetMenuFontForDpi(dpi:int) -> Font:
        """ GetMenuFontForDpi(dpi: int) -> Font """
        ...

    @staticmethod
    def GetVerticalScrollBarWidthForDpi(dpi:int) -> int:
        """ GetVerticalScrollBarWidthForDpi(dpi: int) -> int """
        ...

    @staticmethod
    def VerticalScrollBarArrowHeightForDpi(dpi:int) -> int:
        """ VerticalScrollBarArrowHeightForDpi(dpi: int) -> int """
        ...



class SystemParameter(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SystemParameter, values: CaretWidthMetric (8), DropShadow (0), FlatMenu (1), FontSmoothingContrastMetric (2), FontSmoothingTypeMetric (3), HorizontalFocusThicknessMetric (10), MenuFadeEnabled (4), SelectionFade (5), ToolTipAnimationMetric (6), UIEffects (7), VerticalFocusThicknessMetric (9) """
    CaretWidthMetric: SystemParameter = ...
    DropShadow: SystemParameter = ...
    FlatMenu: SystemParameter = ...
    FontSmoothingContrastMetric: SystemParameter = ...
    FontSmoothingTypeMetric: SystemParameter = ...
    HorizontalFocusThicknessMetric: SystemParameter = ...
    MenuFadeEnabled: SystemParameter = ...
    SelectionFade: SystemParameter = ...
    ToolTipAnimationMetric: SystemParameter = ...
    UIEffects: SystemParameter = ...
    value__ = ...
    VerticalFocusThicknessMetric: SystemParameter = ...


class TabAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TabAlignment, values: Bottom (1), Left (2), Right (3), Top (0) """
    Bottom: TabAlignment = ...
    Left: TabAlignment = ...
    Right: TabAlignment = ...
    Top: TabAlignment = ...
    value__ = ...


class TabAppearance(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TabAppearance, values: Buttons (1), FlatButtons (2), Normal (0) """
    Buttons: TabAppearance = ...
    FlatButtons: TabAppearance = ...
    Normal: TabAppearance = ...
    value__ = ...


class TabControl(Control): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ TabControl() """
    @property
    def Alignment(self) -> TabAlignment:
        """
        Get: Alignment(self: TabControl) -> TabAlignment
        Set: Alignment(self: TabControl) = value
        """
        ...

    @property
    def Appearance(self) -> TabAppearance:
        """
        Get: Appearance(self: TabControl) -> TabAppearance
        Set: Appearance(self: TabControl) = value
        """
        ...

    @property
    def DrawMode(self): # -> TabDrawMode
        """
        Get: DrawMode(self: TabControl) -> TabDrawMode
        Set: DrawMode(self: TabControl) = value
        """
        ...

    @property
    def HotTrack(self) -> bool:
        """
        Get: HotTrack(self: TabControl) -> bool
        Set: HotTrack(self: TabControl) = value
        """
        ...

    @property
    def ImageList(self) -> ImageList:
        """
        Get: ImageList(self: TabControl) -> ImageList
        Set: ImageList(self: TabControl) = value
        """
        ...

    @property
    def ItemSize(self) -> Size:
        """
        Get: ItemSize(self: TabControl) -> Size
        Set: ItemSize(self: TabControl) = value
        """
        ...

    @property
    def Multiline(self) -> bool:
        """
        Get: Multiline(self: TabControl) -> bool
        Set: Multiline(self: TabControl) = value
        """
        ...

    @property
    def RightToLeftLayout(self) -> bool:
        """
        Get: RightToLeftLayout(self: TabControl) -> bool
        Set: RightToLeftLayout(self: TabControl) = value
        """
        ...

    @property
    def RowCount(self) -> int:
        """ Get: RowCount(self: TabControl) -> int """
        ...

    @property
    def SelectedIndex(self) -> int:
        """
        Get: SelectedIndex(self: TabControl) -> int
        Set: SelectedIndex(self: TabControl) = value
        """
        ...

    @property
    def SelectedTab(self): # -> TabPage
        """
        Get: SelectedTab(self: TabControl) -> TabPage
        Set: SelectedTab(self: TabControl) = value
        """
        ...

    @property
    def ShowToolTips(self) -> bool:
        """
        Get: ShowToolTips(self: TabControl) -> bool
        Set: ShowToolTips(self: TabControl) = value
        """
        ...

    @property
    def SizeMode(self): # -> TabSizeMode
        """
        Get: SizeMode(self: TabControl) -> TabSizeMode
        Set: SizeMode(self: TabControl) = value
        """
        ...

    @property
    def TabCount(self) -> int:
        """ Get: TabCount(self: TabControl) -> int """
        ...

    @property
    def TabPages(self): # -> TabPageCollection
        """ Get: TabPages(self: TabControl) -> TabPageCollection """
        ...


    def DeselectTab(self, *__args:int): # -> 
        """ DeselectTab(self: TabControl, index: int)DeselectTab(self: TabControl, tabPage: TabPage)DeselectTab(self: TabControl, tabPageName: str) """
        ...

    def GetControl(self, index:int) -> Control:
        """ GetControl(self: TabControl, index: int) -> Control """
        ...

    def GetItems(self, *args): #cannot find CLR method
        """
        GetItems(self: TabControl) -> Array[object]
        GetItems(self: TabControl, baseType: Type) -> Array[object]
        """
        ...

    def GetTabRect(self, index:int) -> Rectangle:
        """ GetTabRect(self: TabControl, index: int) -> Rectangle """
        ...

    def GetToolTipText(self, *args): #cannot find CLR method
        """ GetToolTipText(self: TabControl, item: object) -> str """
        ...

    def OnDeselected(self, *args): #cannot find CLR method
        """ OnDeselected(self: TabControl, e: TabControlEventArgs) """
        ...

    def OnDeselecting(self, *args): #cannot find CLR method
        """ OnDeselecting(self: TabControl, e: TabControlCancelEventArgs) """
        ...

    def OnDrawItem(self, *args): #cannot find CLR method
        """ OnDrawItem(self: TabControl, e: DrawItemEventArgs) """
        ...

    def OnRightToLeftLayoutChanged(self, *args): #cannot find CLR method
        """ OnRightToLeftLayoutChanged(self: TabControl, e: EventArgs) """
        ...

    def OnSelected(self, *args): #cannot find CLR method
        """ OnSelected(self: TabControl, e: TabControlEventArgs) """
        ...

    def OnSelectedIndexChanged(self, *args): #cannot find CLR method
        """ OnSelectedIndexChanged(self: TabControl, e: EventArgs) """
        ...

    def OnSelecting(self, *args): #cannot find CLR method
        """ OnSelecting(self: TabControl, e: TabControlCancelEventArgs) """
        ...

    def RemoveAll(self, *args): #cannot find CLR method
        """ RemoveAll(self: TabControl) """
        ...

    def SelectTab(self, *__args:int): # -> 
        """ SelectTab(self: TabControl, index: int)SelectTab(self: TabControl, tabPage: TabPage)SelectTab(self: TabControl, tabPageName: str) """
        ...

    def TabPageCollection(self, *args): #cannot find CLR method
        """ TabPageCollection(owner: TabControl) """
        ...

    def ToString(self) -> str:
        """ ToString(self: TabControl) -> str """
        ...

    def UpdateTabSelection(self, *args): #cannot find CLR method
        """ UpdateTabSelection(self: TabControl, updateFocus: bool) """
        ...

    BackColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    ControlCollection = ...
    Deselected = ...
    Deselecting = ...
    DrawItem = ...
    ForeColorChanged = ...
    Paint = ...
    RightToLeftLayoutChanged = ...
    Selected = ...
    SelectedIndexChanged = ...
    Selecting = ...
    TextChanged = ...


class TabControlAction(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TabControlAction, values: Deselected (3), Deselecting (2), Selected (1), Selecting (0) """
    Deselected: TabControlAction = ...
    Deselecting: TabControlAction = ...
    Selected: TabControlAction = ...
    Selecting: TabControlAction = ...
    value__ = ...


class TabControlCancelEventArgs(CancelEventArgs): # skipped bases: <type 'object'>
    """ TabControlCancelEventArgs(tabPage: TabPage, tabPageIndex: int, cancel: bool, action: TabControlAction) """
    @property
    def Action(self) -> TabControlAction:
        """ Get: Action(self: TabControlCancelEventArgs) -> TabControlAction """
        ...

    @property
    def TabPage(self): # -> TabPage
        """ Get: TabPage(self: TabControlCancelEventArgs) -> TabPage """
        ...

    @property
    def TabPageIndex(self) -> int:
        """ Get: TabPageIndex(self: TabControlCancelEventArgs) -> int """
        ...



class TabControlCancelEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ TabControlCancelEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:TabControlCancelEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: TabControlCancelEventHandler, sender: object, e: TabControlCancelEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: TabControlCancelEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:TabControlCancelEventArgs): # -> 
        """ Invoke(self: TabControlCancelEventHandler, sender: object, e: TabControlCancelEventArgs) """
        ...


class TabControlEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ TabControlEventArgs(tabPage: TabPage, tabPageIndex: int, action: TabControlAction) """
    @property
    def Action(self) -> TabControlAction:
        """ Get: Action(self: TabControlEventArgs) -> TabControlAction """
        ...

    @property
    def TabPage(self): # -> TabPage
        """ Get: TabPage(self: TabControlEventArgs) -> TabPage """
        ...

    @property
    def TabPageIndex(self) -> int:
        """ Get: TabPageIndex(self: TabControlEventArgs) -> int """
        ...


    def __new__(cls, tabPage, tabPageIndex:int, action:TabControlAction) -> Self: # Not found arg types: {'tabPage': 'TabPage'}
        """ __new__(cls: type, tabPage: TabPage, tabPageIndex: int, action: TabControlAction) """
        ...


class TabControlEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ TabControlEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:TabControlEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: TabControlEventHandler, sender: object, e: TabControlEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: TabControlEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:TabControlEventArgs): # -> 
        """ Invoke(self: TabControlEventHandler, sender: object, e: TabControlEventArgs) """
        ...


class TabDrawMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TabDrawMode, values: Normal (0), OwnerDrawFixed (1) """
    Normal: TabDrawMode = ...
    OwnerDrawFixed: TabDrawMode = ...
    value__ = ...


class TableLayoutCellPaintEventArgs(PaintEventArgs): # skipped bases: <type 'IDisposable'>, <type 'object'>
    """ TableLayoutCellPaintEventArgs(g: Graphics, clipRectangle: Rectangle, cellBounds: Rectangle, column: int, row: int) """
    @property
    def CellBounds(self) -> Rectangle:
        """ Get: CellBounds(self: TableLayoutCellPaintEventArgs) -> Rectangle """
        ...

    @property
    def Column(self) -> int:
        """ Get: Column(self: TableLayoutCellPaintEventArgs) -> int """
        ...

    @property
    def Row(self) -> int:
        """ Get: Row(self: TableLayoutCellPaintEventArgs) -> int """
        ...



class TableLayoutCellPaintEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ TableLayoutCellPaintEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:TableLayoutCellPaintEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: TableLayoutCellPaintEventHandler, sender: object, e: TableLayoutCellPaintEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: TableLayoutCellPaintEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:TableLayoutCellPaintEventArgs): # -> 
        """ Invoke(self: TableLayoutCellPaintEventHandler, sender: object, e: TableLayoutCellPaintEventArgs) """
        ...


class TableLayoutStyleCollection(IList): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Count(self) -> int:
        """ Get: Count(self: TableLayoutStyleCollection) -> int """
        ...


    def __contains__(self, *args): #cannot find CLR method
        """ Contains(self: IList, value: object) -> bool """
        ...


class TableLayoutColumnStyleCollection(TableLayoutStyleCollection): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'IList'>, <type 'object'>
    """ no doc """
    def Contains(self, columnStyle:ColumnStyle) -> bool:
        """ Contains(self: TableLayoutColumnStyleCollection, columnStyle: ColumnStyle) -> bool """
        ...

    def IndexOf(self, columnStyle:ColumnStyle) -> int:
        """ IndexOf(self: TableLayoutColumnStyleCollection, columnStyle: ColumnStyle) -> int """
        ...

    def Insert(self, index:int, columnStyle:ColumnStyle): # -> 
        """ Insert(self: TableLayoutColumnStyleCollection, index: int, columnStyle: ColumnStyle) """
        ...

    def Remove(self, columnStyle:ColumnStyle): # -> 
        """ Remove(self: TableLayoutColumnStyleCollection, columnStyle: ColumnStyle) """
        ...


class TableLayoutControlCollection(ControlCollection): # skipped bases: <type 'ICloneable'>, <type 'IEnumerable'>, <type 'ICollection'>, <type 'IList'>, <type 'object'>
    """ TableLayoutControlCollection(container: TableLayoutPanel) """
    @property
    def Container(self): # -> TableLayoutPanel
        """ Get: Container(self: TableLayoutControlCollection) -> TableLayoutPanel """
        ...



class TableLayoutPanel(IExtenderProvider, Panel): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ TableLayoutPanel() """
    @property
    def CellBorderStyle(self): # -> TableLayoutPanelCellBorderStyle
        """
        Get: CellBorderStyle(self: TableLayoutPanel) -> TableLayoutPanelCellBorderStyle
        Set: CellBorderStyle(self: TableLayoutPanel) = value
        """
        ...

    @property
    def ColumnCount(self) -> int:
        """
        Get: ColumnCount(self: TableLayoutPanel) -> int
        Set: ColumnCount(self: TableLayoutPanel) = value
        """
        ...

    @property
    def ColumnStyles(self) -> TableLayoutColumnStyleCollection:
        """ Get: ColumnStyles(self: TableLayoutPanel) -> TableLayoutColumnStyleCollection """
        ...

    @property
    def Controls(self) -> TableLayoutControlCollection:
        """ Get: Controls(self: TableLayoutPanel) -> TableLayoutControlCollection """
        ...

    @property
    def GrowStyle(self): # -> TableLayoutPanelGrowStyle
        """
        Get: GrowStyle(self: TableLayoutPanel) -> TableLayoutPanelGrowStyle
        Set: GrowStyle(self: TableLayoutPanel) = value
        """
        ...

    @property
    def LayoutEngine(self) -> LayoutEngine:
        """ Get: LayoutEngine(self: TableLayoutPanel) -> LayoutEngine """
        ...

    @property
    def LayoutSettings(self): # -> TableLayoutSettings
        """
        Get: LayoutSettings(self: TableLayoutPanel) -> TableLayoutSettings
        Set: LayoutSettings(self: TableLayoutPanel) = value
        """
        ...

    @property
    def RowCount(self) -> int:
        """
        Get: RowCount(self: TableLayoutPanel) -> int
        Set: RowCount(self: TableLayoutPanel) = value
        """
        ...

    @property
    def RowStyles(self): # -> TableLayoutRowStyleCollection
        """ Get: RowStyles(self: TableLayoutPanel) -> TableLayoutRowStyleCollection """
        ...


    def GetCellPosition(self, control:Control): # -> TableLayoutPanelCellPosition
        """ GetCellPosition(self: TableLayoutPanel, control: Control) -> TableLayoutPanelCellPosition """
        ...

    def GetColumn(self, control:Control) -> int:
        """ GetColumn(self: TableLayoutPanel, control: Control) -> int """
        ...

    def GetColumnSpan(self, control:Control) -> int:
        """ GetColumnSpan(self: TableLayoutPanel, control: Control) -> int """
        ...

    def GetColumnWidths(self) -> Array:
        """ GetColumnWidths(self: TableLayoutPanel) -> Array[int] """
        ...

    def GetControlFromPosition(self, column:int, row:int) -> Control:
        """ GetControlFromPosition(self: TableLayoutPanel, column: int, row: int) -> Control """
        ...

    def GetPositionFromControl(self, control:Control): # -> TableLayoutPanelCellPosition
        """ GetPositionFromControl(self: TableLayoutPanel, control: Control) -> TableLayoutPanelCellPosition """
        ...

    def GetRow(self, control:Control) -> int:
        """ GetRow(self: TableLayoutPanel, control: Control) -> int """
        ...

    def GetRowHeights(self) -> Array:
        """ GetRowHeights(self: TableLayoutPanel) -> Array[int] """
        ...

    def GetRowSpan(self, control:Control) -> int:
        """ GetRowSpan(self: TableLayoutPanel, control: Control) -> int """
        ...

    def OnCellPaint(self, *args): #cannot find CLR method
        """ OnCellPaint(self: TableLayoutPanel, e: TableLayoutCellPaintEventArgs) """
        ...

    def SetCellPosition(self, control:Control, position): # ->  # Not found arg types: {'position': 'TableLayoutPanelCellPosition'}
        """ SetCellPosition(self: TableLayoutPanel, control: Control, position: TableLayoutPanelCellPosition) """
        ...

    def SetColumn(self, control:Control, column:int): # -> 
        """ SetColumn(self: TableLayoutPanel, control: Control, column: int) """
        ...

    def SetColumnSpan(self, control:Control, value:int): # -> 
        """ SetColumnSpan(self: TableLayoutPanel, control: Control, value: int) """
        ...

    def SetRow(self, control:Control, row:int): # -> 
        """ SetRow(self: TableLayoutPanel, control: Control, row: int) """
        ...

    def SetRowSpan(self, control:Control, value:int): # -> 
        """ SetRowSpan(self: TableLayoutPanel, control: Control, value: int) """
        ...

    CellPaint = ...


class TableLayoutPanelCellBorderStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TableLayoutPanelCellBorderStyle, values: Inset (2), InsetDouble (3), None (0), Outset (4), OutsetDouble (5), OutsetPartial (6), Single (1) """
    Inset: TableLayoutPanelCellBorderStyle = ...
    InsetDouble: TableLayoutPanelCellBorderStyle = ...
    Outset: TableLayoutPanelCellBorderStyle = ...
    OutsetDouble: TableLayoutPanelCellBorderStyle = ...
    OutsetPartial: TableLayoutPanelCellBorderStyle = ...
    Single: TableLayoutPanelCellBorderStyle = ...
    value__ = ...


class TableLayoutPanelCellPosition: # skipped bases: <type 'object'>, <type 'object'>
    """ TableLayoutPanelCellPosition(column: int, row: int) """
    @property
    def Column(self) -> int:
        """
        Get: Column(self: TableLayoutPanelCellPosition) -> int
        Set: Column(self: TableLayoutPanelCellPosition) = value
        """
        ...

    @property
    def Row(self) -> int:
        """
        Get: Row(self: TableLayoutPanelCellPosition) -> int
        Set: Row(self: TableLayoutPanelCellPosition) = value
        """
        ...


    def Equals(self, other:object) -> bool:
        """ Equals(self: TableLayoutPanelCellPosition, other: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: TableLayoutPanelCellPosition) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: TableLayoutPanelCellPosition) -> str """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class TableLayoutPanelGrowStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TableLayoutPanelGrowStyle, values: AddColumns (2), AddRows (1), FixedSize (0) """
    AddColumns: TableLayoutPanelGrowStyle = ...
    AddRows: TableLayoutPanelGrowStyle = ...
    FixedSize: TableLayoutPanelGrowStyle = ...
    value__ = ...


class TableLayoutRowStyleCollection(TableLayoutStyleCollection): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'IList'>, <type 'object'>
    """ no doc """
    def Contains(self, rowStyle:RowStyle) -> bool:
        """ Contains(self: TableLayoutRowStyleCollection, rowStyle: RowStyle) -> bool """
        ...

    def IndexOf(self, rowStyle:RowStyle) -> int:
        """ IndexOf(self: TableLayoutRowStyleCollection, rowStyle: RowStyle) -> int """
        ...

    def Insert(self, index:int, rowStyle:RowStyle): # -> 
        """ Insert(self: TableLayoutRowStyleCollection, index: int, rowStyle: RowStyle) """
        ...

    def Remove(self, rowStyle:RowStyle): # -> 
        """ Remove(self: TableLayoutRowStyleCollection, rowStyle: RowStyle) """
        ...


class TableLayoutSettings(LayoutSettings, ISerializable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ColumnCount(self) -> int:
        """
        Get: ColumnCount(self: TableLayoutSettings) -> int
        Set: ColumnCount(self: TableLayoutSettings) = value
        """
        ...

    @property
    def ColumnStyles(self) -> TableLayoutColumnStyleCollection:
        """ Get: ColumnStyles(self: TableLayoutSettings) -> TableLayoutColumnStyleCollection """
        ...

    @property
    def GrowStyle(self) -> TableLayoutPanelGrowStyle:
        """
        Get: GrowStyle(self: TableLayoutSettings) -> TableLayoutPanelGrowStyle
        Set: GrowStyle(self: TableLayoutSettings) = value
        """
        ...

    @property
    def RowCount(self) -> int:
        """
        Get: RowCount(self: TableLayoutSettings) -> int
        Set: RowCount(self: TableLayoutSettings) = value
        """
        ...

    @property
    def RowStyles(self) -> TableLayoutRowStyleCollection:
        """ Get: RowStyles(self: TableLayoutSettings) -> TableLayoutRowStyleCollection """
        ...


    def GetCellPosition(self, control:object) -> TableLayoutPanelCellPosition:
        """ GetCellPosition(self: TableLayoutSettings, control: object) -> TableLayoutPanelCellPosition """
        ...

    def GetColumn(self, control:object) -> int:
        """ GetColumn(self: TableLayoutSettings, control: object) -> int """
        ...

    def GetColumnSpan(self, control:object) -> int:
        """ GetColumnSpan(self: TableLayoutSettings, control: object) -> int """
        ...

    def GetRow(self, control:object) -> int:
        """ GetRow(self: TableLayoutSettings, control: object) -> int """
        ...

    def GetRowSpan(self, control:object) -> int:
        """ GetRowSpan(self: TableLayoutSettings, control: object) -> int """
        ...

    def SetCellPosition(self, control:object, cellPosition:TableLayoutPanelCellPosition): # -> 
        """ SetCellPosition(self: TableLayoutSettings, control: object, cellPosition: TableLayoutPanelCellPosition) """
        ...

    def SetColumn(self, control:object, column:int): # -> 
        """ SetColumn(self: TableLayoutSettings, control: object, column: int) """
        ...

    def SetColumnSpan(self, control:object, value:int): # -> 
        """ SetColumnSpan(self: TableLayoutSettings, control: object, value: int) """
        ...

    def SetRow(self, control:object, row:int): # -> 
        """ SetRow(self: TableLayoutSettings, control: object, row: int) """
        ...

    def SetRowSpan(self, control:object, value:int): # -> 
        """ SetRowSpan(self: TableLayoutSettings, control: object, value: int) """
        ...

    def __reduce_ex__(self, *args): #cannot find CLR method
        ...


class TabPage(Panel): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """
    TabPage()
    TabPage(text: str)
    """
    @property
    def Anchor(self) -> AnchorStyles:
        """
        Get: Anchor(self: TabPage) -> AnchorStyles
        Set: Anchor(self: TabPage) = value
        """
        ...

    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: TabPage) -> Color
        Set: BackColor(self: TabPage) = value
        """
        ...

    @property
    def Dock(self) -> DockStyle:
        """
        Get: Dock(self: TabPage) -> DockStyle
        Set: Dock(self: TabPage) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: TabPage) -> bool
        Set: Enabled(self: TabPage) = value
        """
        ...

    @property
    def ImageIndex(self) -> int:
        """
        Get: ImageIndex(self: TabPage) -> int
        Set: ImageIndex(self: TabPage) = value
        """
        ...

    @property
    def ImageKey(self) -> str:
        """
        Get: ImageKey(self: TabPage) -> str
        Set: ImageKey(self: TabPage) = value
        """
        ...

    @property
    def Location(self) -> Point:
        """
        Get: Location(self: TabPage) -> Point
        Set: Location(self: TabPage) = value
        """
        ...

    @property
    def MaximumSize(self) -> Size:
        """
        Get: MaximumSize(self: TabPage) -> Size
        Set: MaximumSize(self: TabPage) = value
        """
        ...

    @property
    def MinimumSize(self) -> Size:
        """
        Get: MinimumSize(self: TabPage) -> Size
        Set: MinimumSize(self: TabPage) = value
        """
        ...

    @property
    def PreferredSize(self) -> Size:
        """ Get: PreferredSize(self: TabPage) -> Size """
        ...

    @property
    def TabIndex(self) -> int:
        """
        Get: TabIndex(self: TabPage) -> int
        Set: TabIndex(self: TabPage) = value
        """
        ...

    @property
    def ToolTipText(self) -> str:
        """
        Get: ToolTipText(self: TabPage) -> str
        Set: ToolTipText(self: TabPage) = value
        """
        ...

    @property
    def UseVisualStyleBackColor(self) -> bool:
        """
        Get: UseVisualStyleBackColor(self: TabPage) -> bool
        Set: UseVisualStyleBackColor(self: TabPage) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: TabPage) -> bool
        Set: Visible(self: TabPage) = value
        """
        ...


    @staticmethod
    def GetTabPageOfComponent(comp:object) -> TabPage:
        """ GetTabPageOfComponent(comp: object) -> TabPage """
        ...

    def TabPageControlCollection(self, *args): #cannot find CLR method
        """ TabPageControlCollection(owner: TabPage) """
        ...

    def __new__(cls, text:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, text: str)
        """
        ...

    AutoSizeChanged = ...
    DockChanged = ...
    EnabledChanged = ...
    LocationChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    TextChanged = ...
    VisibleChanged = ...


class TabRenderer: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def IsSupported(self) -> bool:
        """ Get: IsSupported() -> bool """
        ...


    @staticmethod
    def DrawTabItem(g:Graphics, bounds:Rectangle, *__args:TabItemState): # -> 
        """ DrawTabItem(g: Graphics, bounds: Rectangle, state: TabItemState)DrawTabItem(g: Graphics, bounds: Rectangle, tabItemText: str, font: Font, state: TabItemState)DrawTabItem(g: Graphics, bounds: Rectangle, tabItemText: str, font: Font, focused: bool, state: TabItemState)DrawTabItem(g: Graphics, bounds: Rectangle, tabItemText: str, font: Font, image: Image, imageRectangle: Rectangle, focused: bool, state: TabItemState)DrawTabItem(g: Graphics, bounds: Rectangle, focused: bool, state: TabItemState)DrawTabItem(g: Graphics, bounds: Rectangle, tabItemText: str, font: Font, flags: TextFormatFlags, focused: bool, state: TabItemState)DrawTabItem(g: Graphics, bounds: Rectangle, image: Image, imageRectangle: Rectangle, focused: bool, state: TabItemState)DrawTabItem(g: Graphics, bounds: Rectangle, tabItemText: str, font: Font, flags: TextFormatFlags, image: Image, imageRectangle: Rectangle, focused: bool, state: TabItemState) """
        ...

    @staticmethod
    def DrawTabPage(g:Graphics, bounds:Rectangle): # -> 
        """ DrawTabPage(g: Graphics, bounds: Rectangle) """
        ...



class TabSizeMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TabSizeMode, values: FillToRight (1), Fixed (2), Normal (0) """
    FillToRight: TabSizeMode = ...
    Fixed: TabSizeMode = ...
    Normal: TabSizeMode = ...
    value__ = ...


class TextBoxRenderer: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def IsSupported(self) -> bool:
        """ Get: IsSupported() -> bool """
        ...


    @staticmethod
    def DrawTextBox(g:Graphics, bounds:Rectangle, *__args:TextBoxState): # -> 
        """ DrawTextBox(g: Graphics, bounds: Rectangle, state: TextBoxState)DrawTextBox(g: Graphics, bounds: Rectangle, textBoxText: str, font: Font, state: TextBoxState)DrawTextBox(g: Graphics, bounds: Rectangle, textBoxText: str, font: Font, textBounds: Rectangle, state: TextBoxState)DrawTextBox(g: Graphics, bounds: Rectangle, textBoxText: str, font: Font, flags: TextFormatFlags, state: TextBoxState)DrawTextBox(g: Graphics, bounds: Rectangle, textBoxText: str, font: Font, textBounds: Rectangle, flags: TextFormatFlags, state: TextBoxState) """
        ...



class TextDataFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TextDataFormat, values: CommaSeparatedValue (4), Html (3), Rtf (2), Text (0), UnicodeText (1) """
    CommaSeparatedValue: TextDataFormat = ...
    Html: TextDataFormat = ...
    Rtf: TextDataFormat = ...
    Text: TextDataFormat = ...
    UnicodeText: TextDataFormat = ...
    value__ = ...


class TextFormatFlags(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) TextFormatFlags, values: Bottom (8), Default (0), EndEllipsis (32768), ExpandTabs (64), ExternalLeading (512), GlyphOverhangPadding (0), HidePrefix (1048576), HorizontalCenter (1), Internal (4096), Left (0), LeftAndRightPadding (536870912), ModifyString (65536), NoClipping (256), NoFullWidthCharacterBreak (524288), NoPadding (268435456), NoPrefix (2048), PathEllipsis (16384), PrefixOnly (2097152), PreserveGraphicsClipping (16777216), PreserveGraphicsTranslateTransform (33554432), Right (2), RightToLeft (131072), SingleLine (32), TextBoxControl (8192), Top (0), VerticalCenter (4), WordBreak (16), WordEllipsis (262144) """
    Bottom: TextFormatFlags = ...
    Default: TextFormatFlags = ...
    EndEllipsis: TextFormatFlags = ...
    ExpandTabs: TextFormatFlags = ...
    ExternalLeading: TextFormatFlags = ...
    GlyphOverhangPadding: TextFormatFlags = ...
    HidePrefix: TextFormatFlags = ...
    HorizontalCenter: TextFormatFlags = ...
    Internal: TextFormatFlags = ...
    Left: TextFormatFlags = ...
    LeftAndRightPadding: TextFormatFlags = ...
    ModifyString: TextFormatFlags = ...
    NoClipping: TextFormatFlags = ...
    NoFullWidthCharacterBreak: TextFormatFlags = ...
    NoPadding: TextFormatFlags = ...
    NoPrefix: TextFormatFlags = ...
    PathEllipsis: TextFormatFlags = ...
    PrefixOnly: TextFormatFlags = ...
    PreserveGraphicsClipping: TextFormatFlags = ...
    PreserveGraphicsTranslateTransform: TextFormatFlags = ...
    Right: TextFormatFlags = ...
    RightToLeft: TextFormatFlags = ...
    SingleLine: TextFormatFlags = ...
    TextBoxControl: TextFormatFlags = ...
    Top: TextFormatFlags = ...
    value__ = ...
    VerticalCenter: TextFormatFlags = ...
    WordBreak: TextFormatFlags = ...
    WordEllipsis: TextFormatFlags = ...


class TextImageRelation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TextImageRelation, values: ImageAboveText (1), ImageBeforeText (4), Overlay (0), TextAboveImage (2), TextBeforeImage (8) """
    ImageAboveText: TextImageRelation = ...
    ImageBeforeText: TextImageRelation = ...
    Overlay: TextImageRelation = ...
    TextAboveImage: TextImageRelation = ...
    TextBeforeImage: TextImageRelation = ...
    value__ = ...


class TextRenderer: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @staticmethod
    def DrawText(dc, text, font, *__args): # -> 
        """ DrawText(dc: IDeviceContext, text: str, font: Font, pt: Point, foreColor: Color)DrawText(dc: IDeviceContext, text: str, font: Font, pt: Point, foreColor: Color, backColor: Color)DrawText(dc: IDeviceContext, text: str, font: Font, pt: Point, foreColor: Color, flags: TextFormatFlags)DrawText(dc: IDeviceContext, text: str, font: Font, pt: Point, foreColor: Color, backColor: Color, flags: TextFormatFlags)DrawText(dc: IDeviceContext, text: str, font: Font, bounds: Rectangle, foreColor: Color)DrawText(dc: IDeviceContext, text: str, font: Font, bounds: Rectangle, foreColor: Color, backColor: Color)DrawText(dc: IDeviceContext, text: str, font: Font, bounds: Rectangle, foreColor: Color, flags: TextFormatFlags)DrawText(dc: IDeviceContext, text: str, font: Font, bounds: Rectangle, foreColor: Color, backColor: Color, flags: TextFormatFlags) """
        ...

    @staticmethod
    def MeasureText(*__args) -> Size:
        """
        MeasureText(text: str, font: Font) -> Size
        MeasureText(text: str, font: Font, proposedSize: Size, flags: TextFormatFlags) -> Size
        MeasureText(text: str, font: Font, proposedSize: Size) -> Size
        MeasureText(dc: IDeviceContext, text: str, font: Font) -> Size
        MeasureText(dc: IDeviceContext, text: str, font: Font, proposedSize: Size) -> Size
        MeasureText(dc: IDeviceContext, text: str, font: Font, proposedSize: Size, flags: TextFormatFlags) -> Size
        """
        ...


class ThreadExceptionDialog(Form): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IViewObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'IContainerControl'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IOleObject'>, <type 'object'>
    """ ThreadExceptionDialog(t: Exception) """
    def __new__(cls, t:Exception) -> Self:
        """ __new__(cls: type, t: Exception) """
        ...

    AutoSizeChanged = ...


class TickStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TickStyle, values: Both (3), BottomRight (2), None (0), TopLeft (1) """
    Both: TickStyle = ...
    BottomRight: TickStyle = ...
    TopLeft: TickStyle = ...
    value__ = ...


class Timer(Component): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """
    Timer()
    Timer(container: IContainer)
    """
    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Timer) -> bool
        Set: Enabled(self: Timer) = value
        """
        ...

    @property
    def Interval(self) -> int:
        """
        Get: Interval(self: Timer) -> int
        Set: Interval(self: Timer) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: Timer) -> object
        Set: Tag(self: Timer) = value
        """
        ...


    def OnTick(self, *args): #cannot find CLR method
        """ OnTick(self: Timer, e: EventArgs) """
        ...

    def Start(self): # -> 
        """ Start(self: Timer) """
        ...

    def Stop(self): # -> 
        """ Stop(self: Timer) """
        ...

    def __new__(cls, container:IContainer = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, container: IContainer)
        """
        ...

    Tick = ...


class ToolBar(Control): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ ToolBar() """
    @property
    def Appearance(self): # -> ToolBarAppearance
        """
        Get: Appearance(self: ToolBar) -> ToolBarAppearance
        Set: Appearance(self: ToolBar) = value
        """
        ...

    @property
    def BorderStyle(self) -> BorderStyle:
        """
        Get: BorderStyle(self: ToolBar) -> BorderStyle
        Set: BorderStyle(self: ToolBar) = value
        """
        ...

    @property
    def Buttons(self): # -> ToolBarButtonCollection
        """ Get: Buttons(self: ToolBar) -> ToolBarButtonCollection """
        ...

    @property
    def ButtonSize(self) -> Size:
        """
        Get: ButtonSize(self: ToolBar) -> Size
        Set: ButtonSize(self: ToolBar) = value
        """
        ...

    @property
    def Divider(self) -> bool:
        """
        Get: Divider(self: ToolBar) -> bool
        Set: Divider(self: ToolBar) = value
        """
        ...

    @property
    def DropDownArrows(self) -> bool:
        """
        Get: DropDownArrows(self: ToolBar) -> bool
        Set: DropDownArrows(self: ToolBar) = value
        """
        ...

    @property
    def ImageList(self) -> ImageList:
        """
        Get: ImageList(self: ToolBar) -> ImageList
        Set: ImageList(self: ToolBar) = value
        """
        ...

    @property
    def ImageSize(self) -> Size:
        """ Get: ImageSize(self: ToolBar) -> Size """
        ...

    @property
    def ShowToolTips(self) -> bool:
        """
        Get: ShowToolTips(self: ToolBar) -> bool
        Set: ShowToolTips(self: ToolBar) = value
        """
        ...

    @property
    def TextAlign(self): # -> ToolBarTextAlign
        """
        Get: TextAlign(self: ToolBar) -> ToolBarTextAlign
        Set: TextAlign(self: ToolBar) = value
        """
        ...

    @property
    def Wrappable(self) -> bool:
        """
        Get: Wrappable(self: ToolBar) -> bool
        Set: Wrappable(self: ToolBar) = value
        """
        ...


    def OnButtonClick(self, *args): #cannot find CLR method
        """ OnButtonClick(self: ToolBar, e: ToolBarButtonClickEventArgs) """
        ...

    def OnButtonDropDown(self, *args): #cannot find CLR method
        """ OnButtonDropDown(self: ToolBar, e: ToolBarButtonClickEventArgs) """
        ...

    def ToolBarButtonCollection(self, *args): #cannot find CLR method
        """ ToolBarButtonCollection(owner: ToolBar) """
        ...

    def ToString(self) -> str:
        """ ToString(self: ToolBar) -> str """
        ...

    AutoSizeChanged = ...
    BackColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    ButtonClick = ...
    ButtonDropDown = ...
    ForeColorChanged = ...
    ImeModeChanged = ...
    Paint = ...
    RightToLeftChanged = ...
    TextChanged = ...


class ToolBarAppearance(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ToolBarAppearance, values: Flat (1), Normal (0) """
    Flat: ToolBarAppearance = ...
    Normal: ToolBarAppearance = ...
    value__ = ...


class ToolBarButton(Component): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """
    ToolBarButton()
    ToolBarButton(text: str)
    """
    @property
    def DropDownMenu(self) -> Menu:
        """
        Get: DropDownMenu(self: ToolBarButton) -> Menu
        Set: DropDownMenu(self: ToolBarButton) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ToolBarButton) -> bool
        Set: Enabled(self: ToolBarButton) = value
        """
        ...

    @property
    def ImageIndex(self) -> int:
        """
        Get: ImageIndex(self: ToolBarButton) -> int
        Set: ImageIndex(self: ToolBarButton) = value
        """
        ...

    @property
    def ImageKey(self) -> str:
        """
        Get: ImageKey(self: ToolBarButton) -> str
        Set: ImageKey(self: ToolBarButton) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ToolBarButton) -> str
        Set: Name(self: ToolBarButton) = value
        """
        ...

    @property
    def Parent(self) -> ToolBar:
        """ Get: Parent(self: ToolBarButton) -> ToolBar """
        ...

    @property
    def PartialPush(self) -> bool:
        """
        Get: PartialPush(self: ToolBarButton) -> bool
        Set: PartialPush(self: ToolBarButton) = value
        """
        ...

    @property
    def Pushed(self) -> bool:
        """
        Get: Pushed(self: ToolBarButton) -> bool
        Set: Pushed(self: ToolBarButton) = value
        """
        ...

    @property
    def Rectangle(self) -> Rectangle:
        """ Get: Rectangle(self: ToolBarButton) -> Rectangle """
        ...

    @property
    def Style(self): # -> ToolBarButtonStyle
        """
        Get: Style(self: ToolBarButton) -> ToolBarButtonStyle
        Set: Style(self: ToolBarButton) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: ToolBarButton) -> object
        Set: Tag(self: ToolBarButton) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: ToolBarButton) -> str
        Set: Text(self: ToolBarButton) = value
        """
        ...

    @property
    def ToolTipText(self) -> str:
        """
        Get: ToolTipText(self: ToolBarButton) -> str
        Set: ToolTipText(self: ToolBarButton) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ToolBarButton) -> bool
        Set: Visible(self: ToolBarButton) = value
        """
        ...


    def __new__(cls, text:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, text: str)
        """
        ...


class ToolBarButtonClickEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ ToolBarButtonClickEventArgs(button: ToolBarButton) """
    @property
    def Button(self) -> ToolBarButton:
        """
        Get: Button(self: ToolBarButtonClickEventArgs) -> ToolBarButton
        Set: Button(self: ToolBarButtonClickEventArgs) = value
        """
        ...


    def __new__(cls, button:ToolBarButton) -> Self:
        """ __new__(cls: type, button: ToolBarButton) """
        ...


class ToolBarButtonClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ToolBarButtonClickEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ToolBarButtonClickEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ToolBarButtonClickEventHandler, sender: object, e: ToolBarButtonClickEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ToolBarButtonClickEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ToolBarButtonClickEventArgs): # -> 
        """ Invoke(self: ToolBarButtonClickEventHandler, sender: object, e: ToolBarButtonClickEventArgs) """
        ...


class ToolBarButtonStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ToolBarButtonStyle, values: DropDownButton (4), PushButton (1), Separator (3), ToggleButton (2) """
    DropDownButton: ToolBarButtonStyle = ...
    PushButton: ToolBarButtonStyle = ...
    Separator: ToolBarButtonStyle = ...
    ToggleButton: ToolBarButtonStyle = ...
    value__ = ...


class ToolBarTextAlign(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ToolBarTextAlign, values: Right (1), Underneath (0) """
    Right: ToolBarTextAlign = ...
    Underneath: ToolBarTextAlign = ...
    value__ = ...


class ToolStripArrowRenderEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ ToolStripArrowRenderEventArgs(g: Graphics, toolStripItem: ToolStripItem, arrowRectangle: Rectangle, arrowColor: Color, arrowDirection: ArrowDirection) """
    @property
    def ArrowColor(self) -> Color:
        """
        Get: ArrowColor(self: ToolStripArrowRenderEventArgs) -> Color
        Set: ArrowColor(self: ToolStripArrowRenderEventArgs) = value
        """
        ...

    @property
    def ArrowRectangle(self) -> Rectangle:
        """
        Get: ArrowRectangle(self: ToolStripArrowRenderEventArgs) -> Rectangle
        Set: ArrowRectangle(self: ToolStripArrowRenderEventArgs) = value
        """
        ...

    @property
    def Direction(self) -> ArrowDirection:
        """
        Get: Direction(self: ToolStripArrowRenderEventArgs) -> ArrowDirection
        Set: Direction(self: ToolStripArrowRenderEventArgs) = value
        """
        ...

    @property
    def Graphics(self) -> Graphics:
        """ Get: Graphics(self: ToolStripArrowRenderEventArgs) -> Graphics """
        ...

    @property
    def Item(self): # -> ToolStripItem
        """ Get: Item(self: ToolStripArrowRenderEventArgs) -> ToolStripItem """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __new__(cls, g:Graphics, toolStripItem, arrowRectangle:Rectangle, arrowColor:Color, arrowDirection:ArrowDirection) -> Self: # Not found arg types: {'toolStripItem': 'ToolStripItem'}
        """ __new__(cls: type, g: Graphics, toolStripItem: ToolStripItem, arrowRectangle: Rectangle, arrowColor: Color, arrowDirection: ArrowDirection) """
        ...


class ToolStripArrowRenderEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ToolStripArrowRenderEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ToolStripArrowRenderEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ToolStripArrowRenderEventHandler, sender: object, e: ToolStripArrowRenderEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ToolStripArrowRenderEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ToolStripArrowRenderEventArgs): # -> 
        """ Invoke(self: ToolStripArrowRenderEventHandler, sender: object, e: ToolStripArrowRenderEventArgs) """
        ...


class ToolStripItem(IArrangedElement, IKeyboardToolTip, IDropTarget, ISupportOleDropSource, Component): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """ no doc """
    @property
    def AccessibilityObject(self) -> AccessibleObject:
        """ Get: AccessibilityObject(self: ToolStripItem) -> AccessibleObject """
        ...

    @property
    def AccessibleDefaultActionDescription(self) -> str:
        """
        Get: AccessibleDefaultActionDescription(self: ToolStripItem) -> str
        Set: AccessibleDefaultActionDescription(self: ToolStripItem) = value
        """
        ...

    @property
    def AccessibleDescription(self) -> str:
        """
        Get: AccessibleDescription(self: ToolStripItem) -> str
        Set: AccessibleDescription(self: ToolStripItem) = value
        """
        ...

    @property
    def AccessibleName(self) -> str:
        """
        Get: AccessibleName(self: ToolStripItem) -> str
        Set: AccessibleName(self: ToolStripItem) = value
        """
        ...

    @property
    def AccessibleRole(self) -> AccessibleRole:
        """
        Get: AccessibleRole(self: ToolStripItem) -> AccessibleRole
        Set: AccessibleRole(self: ToolStripItem) = value
        """
        ...

    @property
    def Alignment(self): # -> ToolStripItemAlignment
        """
        Get: Alignment(self: ToolStripItem) -> ToolStripItemAlignment
        Set: Alignment(self: ToolStripItem) = value
        """
        ...

    @property
    def AllowDrop(self) -> bool:
        """
        Get: AllowDrop(self: ToolStripItem) -> bool
        Set: AllowDrop(self: ToolStripItem) = value
        """
        ...

    @property
    def Anchor(self) -> AnchorStyles:
        """
        Get: Anchor(self: ToolStripItem) -> AnchorStyles
        Set: Anchor(self: ToolStripItem) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: ToolStripItem) -> bool
        Set: AutoSize(self: ToolStripItem) = value
        """
        ...

    @property
    def AutoToolTip(self) -> bool:
        """
        Get: AutoToolTip(self: ToolStripItem) -> bool
        Set: AutoToolTip(self: ToolStripItem) = value
        """
        ...

    @property
    def Available(self) -> bool:
        """
        Get: Available(self: ToolStripItem) -> bool
        Set: Available(self: ToolStripItem) = value
        """
        ...

    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: ToolStripItem) -> Color
        Set: BackColor(self: ToolStripItem) = value
        """
        ...

    @property
    def BackgroundImage(self) -> Image:
        """
        Get: BackgroundImage(self: ToolStripItem) -> Image
        Set: BackgroundImage(self: ToolStripItem) = value
        """
        ...

    @property
    def BackgroundImageLayout(self) -> ImageLayout:
        """
        Get: BackgroundImageLayout(self: ToolStripItem) -> ImageLayout
        Set: BackgroundImageLayout(self: ToolStripItem) = value
        """
        ...

    @property
    def Bounds(self) -> Rectangle:
        """ Get: Bounds(self: ToolStripItem) -> Rectangle """
        ...

    @property
    def CanSelect(self) -> bool:
        """ Get: CanSelect(self: ToolStripItem) -> bool """
        ...

    @property
    def ContentRectangle(self) -> Rectangle:
        """ Get: ContentRectangle(self: ToolStripItem) -> Rectangle """
        ...

    @property
    def DefaultAutoToolTip(self):
        ...

    @property
    def DefaultDisplayStyle(self):
        ...

    @property
    def DefaultMargin(self):
        ...

    @property
    def DefaultPadding(self):
        ...

    @property
    def DefaultSize(self):
        ...

    @property
    def DismissWhenClicked(self):
        ...

    @property
    def DisplayStyle(self): # -> ToolStripItemDisplayStyle
        """
        Get: DisplayStyle(self: ToolStripItem) -> ToolStripItemDisplayStyle
        Set: DisplayStyle(self: ToolStripItem) = value
        """
        ...

    @property
    def Dock(self) -> DockStyle:
        """
        Get: Dock(self: ToolStripItem) -> DockStyle
        Set: Dock(self: ToolStripItem) = value
        """
        ...

    @property
    def DoubleClickEnabled(self) -> bool:
        """
        Get: DoubleClickEnabled(self: ToolStripItem) -> bool
        Set: DoubleClickEnabled(self: ToolStripItem) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ToolStripItem) -> bool
        Set: Enabled(self: ToolStripItem) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: ToolStripItem) -> Font
        Set: Font(self: ToolStripItem) = value
        """
        ...

    @property
    def ForeColor(self) -> Color:
        """
        Get: ForeColor(self: ToolStripItem) -> Color
        Set: ForeColor(self: ToolStripItem) = value
        """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: ToolStripItem) -> int
        Set: Height(self: ToolStripItem) = value
        """
        ...

    @property
    def Image(self) -> Image:
        """
        Get: Image(self: ToolStripItem) -> Image
        Set: Image(self: ToolStripItem) = value
        """
        ...

    @property
    def ImageAlign(self) -> ContentAlignment:
        """
        Get: ImageAlign(self: ToolStripItem) -> ContentAlignment
        Set: ImageAlign(self: ToolStripItem) = value
        """
        ...

    @property
    def ImageIndex(self) -> int:
        """
        Get: ImageIndex(self: ToolStripItem) -> int
        Set: ImageIndex(self: ToolStripItem) = value
        """
        ...

    @property
    def ImageKey(self) -> str:
        """
        Get: ImageKey(self: ToolStripItem) -> str
        Set: ImageKey(self: ToolStripItem) = value
        """
        ...

    @property
    def ImageScaling(self): # -> ToolStripItemImageScaling
        """
        Get: ImageScaling(self: ToolStripItem) -> ToolStripItemImageScaling
        Set: ImageScaling(self: ToolStripItem) = value
        """
        ...

    @property
    def ImageTransparentColor(self) -> Color:
        """
        Get: ImageTransparentColor(self: ToolStripItem) -> Color
        Set: ImageTransparentColor(self: ToolStripItem) = value
        """
        ...

    @property
    def IsDisposed(self) -> bool:
        """ Get: IsDisposed(self: ToolStripItem) -> bool """
        ...

    @property
    def IsOnDropDown(self) -> bool:
        """ Get: IsOnDropDown(self: ToolStripItem) -> bool """
        ...

    @property
    def IsOnOverflow(self) -> bool:
        """ Get: IsOnOverflow(self: ToolStripItem) -> bool """
        ...

    @property
    def Margin(self) -> Padding:
        """
        Get: Margin(self: ToolStripItem) -> Padding
        Set: Margin(self: ToolStripItem) = value
        """
        ...

    @property
    def MergeAction(self) -> MergeAction:
        """
        Get: MergeAction(self: ToolStripItem) -> MergeAction
        Set: MergeAction(self: ToolStripItem) = value
        """
        ...

    @property
    def MergeIndex(self) -> int:
        """
        Get: MergeIndex(self: ToolStripItem) -> int
        Set: MergeIndex(self: ToolStripItem) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ToolStripItem) -> str
        Set: Name(self: ToolStripItem) = value
        """
        ...

    @property
    def Overflow(self): # -> ToolStripItemOverflow
        """
        Get: Overflow(self: ToolStripItem) -> ToolStripItemOverflow
        Set: Overflow(self: ToolStripItem) = value
        """
        ...

    @property
    def Owner(self) -> ToolStrip:
        """
        Get: Owner(self: ToolStripItem) -> ToolStrip
        Set: Owner(self: ToolStripItem) = value
        """
        ...

    @property
    def OwnerItem(self) -> ToolStripItem:
        """ Get: OwnerItem(self: ToolStripItem) -> ToolStripItem """
        ...

    @property
    def Padding(self) -> Padding:
        """
        Get: Padding(self: ToolStripItem) -> Padding
        Set: Padding(self: ToolStripItem) = value
        """
        ...

    @property
    def Parent(self):
        ...

    @property
    def Placement(self): # -> ToolStripItemPlacement
        """ Get: Placement(self: ToolStripItem) -> ToolStripItemPlacement """
        ...

    @property
    def Pressed(self) -> bool:
        """ Get: Pressed(self: ToolStripItem) -> bool """
        ...

    @property
    def RightToLeft(self) -> RightToLeft:
        """
        Get: RightToLeft(self: ToolStripItem) -> RightToLeft
        Set: RightToLeft(self: ToolStripItem) = value
        """
        ...

    @property
    def RightToLeftAutoMirrorImage(self) -> bool:
        """
        Get: RightToLeftAutoMirrorImage(self: ToolStripItem) -> bool
        Set: RightToLeftAutoMirrorImage(self: ToolStripItem) = value
        """
        ...

    @property
    def Selected(self) -> bool:
        """ Get: Selected(self: ToolStripItem) -> bool """
        ...

    @property
    def ShowKeyboardCues(self):
        ...

    @property
    def Size(self) -> Size:
        """
        Get: Size(self: ToolStripItem) -> Size
        Set: Size(self: ToolStripItem) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: ToolStripItem) -> object
        Set: Tag(self: ToolStripItem) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: ToolStripItem) -> str
        Set: Text(self: ToolStripItem) = value
        """
        ...

    @property
    def TextAlign(self) -> ContentAlignment:
        """
        Get: TextAlign(self: ToolStripItem) -> ContentAlignment
        Set: TextAlign(self: ToolStripItem) = value
        """
        ...

    @property
    def TextDirection(self): # -> ToolStripTextDirection
        """
        Get: TextDirection(self: ToolStripItem) -> ToolStripTextDirection
        Set: TextDirection(self: ToolStripItem) = value
        """
        ...

    @property
    def TextImageRelation(self) -> TextImageRelation:
        """
        Get: TextImageRelation(self: ToolStripItem) -> TextImageRelation
        Set: TextImageRelation(self: ToolStripItem) = value
        """
        ...

    @property
    def ToolTipText(self) -> str:
        """
        Get: ToolTipText(self: ToolStripItem) -> str
        Set: ToolTipText(self: ToolStripItem) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ToolStripItem) -> bool
        Set: Visible(self: ToolStripItem) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: ToolStripItem) -> int
        Set: Width(self: ToolStripItem) = value
        """
        ...


    def CreateAccessibilityInstance(self, *args): #cannot find CLR method
        """ CreateAccessibilityInstance(self: ToolStripItem) -> AccessibleObject """
        ...

    def DoDragDrop(self, data:object, allowedEffects:DragDropEffects) -> DragDropEffects:
        """ DoDragDrop(self: ToolStripItem, data: object, allowedEffects: DragDropEffects) -> DragDropEffects """
        ...

    def GetCurrentParent(self) -> ToolStrip:
        """ GetCurrentParent(self: ToolStripItem) -> ToolStrip """
        ...

    def GetPreferredSize(self, constrainingSize:Size) -> Size:
        """ GetPreferredSize(self: ToolStripItem, constrainingSize: Size) -> Size """
        ...

    def Invalidate(self, r:Rectangle = ...): # -> 
        """ Invalidate(self: ToolStripItem)Invalidate(self: ToolStripItem, r: Rectangle) """
        ...

    def IsInputChar(self, *args): #cannot find CLR method
        """ IsInputChar(self: ToolStripItem, charCode: Char) -> bool """
        ...

    def IsInputKey(self, *args): #cannot find CLR method
        """ IsInputKey(self: ToolStripItem, keyData: Keys) -> bool """
        ...

    def OnAvailableChanged(self, *args): #cannot find CLR method
        """ OnAvailableChanged(self: ToolStripItem, e: EventArgs) """
        ...

    def OnBackColorChanged(self, *args): #cannot find CLR method
        """ OnBackColorChanged(self: ToolStripItem, e: EventArgs) """
        ...

    def OnBoundsChanged(self, *args): #cannot find CLR method
        """ OnBoundsChanged(self: ToolStripItem) """
        ...

    def OnClick(self, *args): #cannot find CLR method
        """ OnClick(self: ToolStripItem, e: EventArgs) """
        ...

    def OnDisplayStyleChanged(self, *args): #cannot find CLR method
        """ OnDisplayStyleChanged(self: ToolStripItem, e: EventArgs) """
        ...

    def OnDoubleClick(self, *args): #cannot find CLR method
        """ OnDoubleClick(self: ToolStripItem, e: EventArgs) """
        ...

    def OnEnabledChanged(self, *args): #cannot find CLR method
        """ OnEnabledChanged(self: ToolStripItem, e: EventArgs) """
        ...

    def OnFontChanged(self, *args): #cannot find CLR method
        """ OnFontChanged(self: ToolStripItem, e: EventArgs) """
        ...

    def OnForeColorChanged(self, *args): #cannot find CLR method
        """ OnForeColorChanged(self: ToolStripItem, e: EventArgs) """
        ...

    def OnGiveFeedback(self, *args): #cannot find CLR method
        """ OnGiveFeedback(self: ToolStripItem, giveFeedbackEvent: GiveFeedbackEventArgs) """
        ...

    def OnLayout(self, *args): #cannot find CLR method
        """ OnLayout(self: ToolStripItem, e: LayoutEventArgs) """
        ...

    def OnLocationChanged(self, *args): #cannot find CLR method
        """ OnLocationChanged(self: ToolStripItem, e: EventArgs) """
        ...

    def OnMouseDown(self, *args): #cannot find CLR method
        """ OnMouseDown(self: ToolStripItem, e: MouseEventArgs) """
        ...

    def OnMouseEnter(self, *args): #cannot find CLR method
        """ OnMouseEnter(self: ToolStripItem, e: EventArgs) """
        ...

    def OnMouseHover(self, *args): #cannot find CLR method
        """ OnMouseHover(self: ToolStripItem, e: EventArgs) """
        ...

    def OnMouseLeave(self, *args): #cannot find CLR method
        """ OnMouseLeave(self: ToolStripItem, e: EventArgs) """
        ...

    def OnMouseMove(self, *args): #cannot find CLR method
        """ OnMouseMove(self: ToolStripItem, mea: MouseEventArgs) """
        ...

    def OnMouseUp(self, *args): #cannot find CLR method
        """ OnMouseUp(self: ToolStripItem, e: MouseEventArgs) """
        ...

    def OnOwnerChanged(self, *args): #cannot find CLR method
        """ OnOwnerChanged(self: ToolStripItem, e: EventArgs) """
        ...

    def OnOwnerFontChanged(self, *args): #cannot find CLR method
        """ OnOwnerFontChanged(self: ToolStripItem, e: EventArgs) """
        ...

    def OnPaint(self, *args): #cannot find CLR method
        """ OnPaint(self: ToolStripItem, e: PaintEventArgs) """
        ...

    def OnParentBackColorChanged(self, *args): #cannot find CLR method
        """ OnParentBackColorChanged(self: ToolStripItem, e: EventArgs) """
        ...

    def OnParentChanged(self, *args): #cannot find CLR method
        """ OnParentChanged(self: ToolStripItem, oldParent: ToolStrip, newParent: ToolStrip) """
        ...

    def OnParentEnabledChanged(self, *args): #cannot find CLR method
        """ OnParentEnabledChanged(self: ToolStripItem, e: EventArgs) """
        ...

    def OnParentForeColorChanged(self, *args): #cannot find CLR method
        """ OnParentForeColorChanged(self: ToolStripItem, e: EventArgs) """
        ...

    def OnParentRightToLeftChanged(self, *args): #cannot find CLR method
        """ OnParentRightToLeftChanged(self: ToolStripItem, e: EventArgs) """
        ...

    def OnQueryContinueDrag(self, *args): #cannot find CLR method
        """ OnQueryContinueDrag(self: ToolStripItem, queryContinueDragEvent: QueryContinueDragEventArgs) """
        ...

    def OnRightToLeftChanged(self, *args): #cannot find CLR method
        """ OnRightToLeftChanged(self: ToolStripItem, e: EventArgs) """
        ...

    def OnTextChanged(self, *args): #cannot find CLR method
        """ OnTextChanged(self: ToolStripItem, e: EventArgs) """
        ...

    def OnVisibleChanged(self, *args): #cannot find CLR method
        """ OnVisibleChanged(self: ToolStripItem, e: EventArgs) """
        ...

    def PerformClick(self): # -> 
        """ PerformClick(self: ToolStripItem) """
        ...

    def ProcessCmdKey(self, *args): #cannot find CLR method
        """ ProcessCmdKey(self: ToolStripItem, m: Message, keyData: Keys) -> (bool, Message) """
        ...

    def ProcessDialogKey(self, *args): #cannot find CLR method
        """ ProcessDialogKey(self: ToolStripItem, keyData: Keys) -> bool """
        ...

    def ProcessMnemonic(self, *args): #cannot find CLR method
        """ ProcessMnemonic(self: ToolStripItem, charCode: Char) -> bool """
        ...

    def ResetBackColor(self): # -> 
        """ ResetBackColor(self: ToolStripItem) """
        ...

    def ResetDisplayStyle(self): # -> 
        """ ResetDisplayStyle(self: ToolStripItem) """
        ...

    def ResetFont(self): # -> 
        """ ResetFont(self: ToolStripItem) """
        ...

    def ResetForeColor(self): # -> 
        """ ResetForeColor(self: ToolStripItem) """
        ...

    def ResetImage(self): # -> 
        """ ResetImage(self: ToolStripItem) """
        ...

    def ResetMargin(self): # -> 
        """ ResetMargin(self: ToolStripItem) """
        ...

    def ResetPadding(self): # -> 
        """ ResetPadding(self: ToolStripItem) """
        ...

    def ResetRightToLeft(self): # -> 
        """ ResetRightToLeft(self: ToolStripItem) """
        ...

    def ResetTextDirection(self): # -> 
        """ ResetTextDirection(self: ToolStripItem) """
        ...

    def Select(self): # -> 
        """ Select(self: ToolStripItem) """
        ...

    def SetBounds(self, *args): #cannot find CLR method
        """ SetBounds(self: ToolStripItem, bounds: Rectangle) """
        ...

    def SetVisibleCore(self, *args): #cannot find CLR method
        """ SetVisibleCore(self: ToolStripItem, visible: bool) """
        ...

    def ToolStripItemAccessibleObject(self, *args): #cannot find CLR method
        """ ToolStripItemAccessibleObject(ownerItem: ToolStripItem) """
        ...

    def __new__(cls, *args): #cannot find CLR constructor
        """
        __new__(cls: type)
        __new__(cls: type, text: str, image: Image, onClick: EventHandler)
        __new__(cls: type, text: str, image: Image, onClick: EventHandler, name: str)
        """
        ...

    AvailableChanged = ...
    BackColorChanged = ...
    Click = ...
    DisplayStyleChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    LocationChanged = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    OwnerChanged = ...
    Paint = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RightToLeftChanged = ...
    TextChanged = ...
    VisibleChanged = ...


class ToolStripButton(ToolStripItem): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'IDropTarget'>, <type 'IArrangedElement'>, <type 'ISupportOleDropSource'>, <type 'IKeyboardToolTip'>, <type 'object'>
    """
    ToolStripButton()
    ToolStripButton(text: str)
    ToolStripButton(image: Image)
    ToolStripButton(text: str, image: Image)
    ToolStripButton(text: str, image: Image, onClick: EventHandler)
    ToolStripButton(text: str, image: Image, onClick: EventHandler, name: str)
    """
    @property
    def Checked(self) -> bool:
        """
        Get: Checked(self: ToolStripButton) -> bool
        Set: Checked(self: ToolStripButton) = value
        """
        ...

    @property
    def CheckOnClick(self) -> bool:
        """
        Get: CheckOnClick(self: ToolStripButton) -> bool
        Set: CheckOnClick(self: ToolStripButton) = value
        """
        ...

    @property
    def CheckState(self) -> CheckState:
        """
        Get: CheckState(self: ToolStripButton) -> CheckState
        Set: CheckState(self: ToolStripButton) = value
        """
        ...


    def OnCheckedChanged(self, *args): #cannot find CLR method
        """ OnCheckedChanged(self: ToolStripButton, e: EventArgs) """
        ...

    def OnCheckStateChanged(self, *args): #cannot find CLR method
        """ OnCheckStateChanged(self: ToolStripButton, e: EventArgs) """
        ...

    CheckedChanged = ...
    CheckStateChanged = ...


class ToolStripControlHost(ToolStripItem): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'IDropTarget'>, <type 'IArrangedElement'>, <type 'ISupportOleDropSource'>, <type 'IKeyboardToolTip'>, <type 'object'>
    """
    ToolStripControlHost(c: Control)
    ToolStripControlHost(c: Control, name: str)
    """
    @property
    def CausesValidation(self) -> bool:
        """
        Get: CausesValidation(self: ToolStripControlHost) -> bool
        Set: CausesValidation(self: ToolStripControlHost) = value
        """
        ...

    @property
    def Control(self) -> Control:
        """ Get: Control(self: ToolStripControlHost) -> Control """
        ...

    @property
    def ControlAlign(self) -> ContentAlignment:
        """
        Get: ControlAlign(self: ToolStripControlHost) -> ContentAlignment
        Set: ControlAlign(self: ToolStripControlHost) = value
        """
        ...

    @property
    def Focused(self) -> bool:
        """ Get: Focused(self: ToolStripControlHost) -> bool """
        ...

    @property
    def Site(self) -> ISite:
        """
        Get: Site(self: ToolStripControlHost) -> ISite
        Set: Site(self: ToolStripControlHost) = value
        """
        ...


    def Focus(self): # -> 
        """ Focus(self: ToolStripControlHost) """
        ...

    def OnEnter(self, *args): #cannot find CLR method
        """ OnEnter(self: ToolStripControlHost, e: EventArgs) """
        ...

    def OnGotFocus(self, *args): #cannot find CLR method
        """ OnGotFocus(self: ToolStripControlHost, e: EventArgs) """
        ...

    def OnHostedControlResize(self, *args): #cannot find CLR method
        """ OnHostedControlResize(self: ToolStripControlHost, e: EventArgs) """
        ...

    def OnKeyDown(self, *args): #cannot find CLR method
        """ OnKeyDown(self: ToolStripControlHost, e: KeyEventArgs) """
        ...

    def OnKeyPress(self, *args): #cannot find CLR method
        """ OnKeyPress(self: ToolStripControlHost, e: KeyPressEventArgs) """
        ...

    def OnKeyUp(self, *args): #cannot find CLR method
        """ OnKeyUp(self: ToolStripControlHost, e: KeyEventArgs) """
        ...

    def OnLeave(self, *args): #cannot find CLR method
        """ OnLeave(self: ToolStripControlHost, e: EventArgs) """
        ...

    def OnLostFocus(self, *args): #cannot find CLR method
        """ OnLostFocus(self: ToolStripControlHost, e: EventArgs) """
        ...

    def OnSubscribeControlEvents(self, *args): #cannot find CLR method
        """ OnSubscribeControlEvents(self: ToolStripControlHost, control: Control) """
        ...

    def OnUnsubscribeControlEvents(self, *args): #cannot find CLR method
        """ OnUnsubscribeControlEvents(self: ToolStripControlHost, control: Control) """
        ...

    def OnValidated(self, *args): #cannot find CLR method
        """ OnValidated(self: ToolStripControlHost, e: EventArgs) """
        ...

    def OnValidating(self, *args): #cannot find CLR method
        """ OnValidating(self: ToolStripControlHost, e: CancelEventArgs) """
        ...

    DisplayStyleChanged = ...
    Enter = ...
    GotFocus = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Leave = ...
    LostFocus = ...
    Validated = ...
    Validating = ...


class ToolStripComboBox(ToolStripControlHost): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'IDropTarget'>, <type 'IArrangedElement'>, <type 'ISupportOleDropSource'>, <type 'IKeyboardToolTip'>, <type 'object'>
    """
    ToolStripComboBox()
    ToolStripComboBox(name: str)
    ToolStripComboBox(c: Control)
    """
    @property
    def AutoCompleteCustomSource(self) -> AutoCompleteStringCollection:
        """
        Get: AutoCompleteCustomSource(self: ToolStripComboBox) -> AutoCompleteStringCollection
        Set: AutoCompleteCustomSource(self: ToolStripComboBox) = value
        """
        ...

    @property
    def AutoCompleteMode(self) -> AutoCompleteMode:
        """
        Get: AutoCompleteMode(self: ToolStripComboBox) -> AutoCompleteMode
        Set: AutoCompleteMode(self: ToolStripComboBox) = value
        """
        ...

    @property
    def AutoCompleteSource(self) -> AutoCompleteSource:
        """
        Get: AutoCompleteSource(self: ToolStripComboBox) -> AutoCompleteSource
        Set: AutoCompleteSource(self: ToolStripComboBox) = value
        """
        ...

    @property
    def ComboBox(self) -> ComboBox:
        """ Get: ComboBox(self: ToolStripComboBox) -> ComboBox """
        ...

    @property
    def DropDownHeight(self) -> int:
        """
        Get: DropDownHeight(self: ToolStripComboBox) -> int
        Set: DropDownHeight(self: ToolStripComboBox) = value
        """
        ...

    @property
    def DropDownStyle(self) -> ComboBoxStyle:
        """
        Get: DropDownStyle(self: ToolStripComboBox) -> ComboBoxStyle
        Set: DropDownStyle(self: ToolStripComboBox) = value
        """
        ...

    @property
    def DropDownWidth(self) -> int:
        """
        Get: DropDownWidth(self: ToolStripComboBox) -> int
        Set: DropDownWidth(self: ToolStripComboBox) = value
        """
        ...

    @property
    def DroppedDown(self) -> bool:
        """
        Get: DroppedDown(self: ToolStripComboBox) -> bool
        Set: DroppedDown(self: ToolStripComboBox) = value
        """
        ...

    @property
    def FlatStyle(self) -> FlatStyle:
        """
        Get: FlatStyle(self: ToolStripComboBox) -> FlatStyle
        Set: FlatStyle(self: ToolStripComboBox) = value
        """
        ...

    @property
    def IntegralHeight(self) -> bool:
        """
        Get: IntegralHeight(self: ToolStripComboBox) -> bool
        Set: IntegralHeight(self: ToolStripComboBox) = value
        """
        ...

    @property
    def Items(self): # -> ObjectCollection
        """ Get: Items(self: ToolStripComboBox) -> ObjectCollection """
        ...

    @property
    def MaxDropDownItems(self) -> int:
        """
        Get: MaxDropDownItems(self: ToolStripComboBox) -> int
        Set: MaxDropDownItems(self: ToolStripComboBox) = value
        """
        ...

    @property
    def MaxLength(self) -> int:
        """
        Get: MaxLength(self: ToolStripComboBox) -> int
        Set: MaxLength(self: ToolStripComboBox) = value
        """
        ...

    @property
    def SelectedIndex(self) -> int:
        """
        Get: SelectedIndex(self: ToolStripComboBox) -> int
        Set: SelectedIndex(self: ToolStripComboBox) = value
        """
        ...

    @property
    def SelectedItem(self) -> object:
        """
        Get: SelectedItem(self: ToolStripComboBox) -> object
        Set: SelectedItem(self: ToolStripComboBox) = value
        """
        ...

    @property
    def SelectedText(self) -> str:
        """
        Get: SelectedText(self: ToolStripComboBox) -> str
        Set: SelectedText(self: ToolStripComboBox) = value
        """
        ...

    @property
    def SelectionLength(self) -> int:
        """
        Get: SelectionLength(self: ToolStripComboBox) -> int
        Set: SelectionLength(self: ToolStripComboBox) = value
        """
        ...

    @property
    def SelectionStart(self) -> int:
        """
        Get: SelectionStart(self: ToolStripComboBox) -> int
        Set: SelectionStart(self: ToolStripComboBox) = value
        """
        ...

    @property
    def Sorted(self) -> bool:
        """
        Get: Sorted(self: ToolStripComboBox) -> bool
        Set: Sorted(self: ToolStripComboBox) = value
        """
        ...


    def BeginUpdate(self): # -> 
        """ BeginUpdate(self: ToolStripComboBox) """
        ...

    def EndUpdate(self): # -> 
        """ EndUpdate(self: ToolStripComboBox) """
        ...

    def FindString(self, s:str, startIndex:int = ...) -> int:
        """
        FindString(self: ToolStripComboBox, s: str) -> int
        FindString(self: ToolStripComboBox, s: str, startIndex: int) -> int
        """
        ...

    def FindStringExact(self, s:str, startIndex:int = ...) -> int:
        """
        FindStringExact(self: ToolStripComboBox, s: str) -> int
        FindStringExact(self: ToolStripComboBox, s: str, startIndex: int) -> int
        """
        ...

    def GetItemHeight(self, index:int) -> int:
        """ GetItemHeight(self: ToolStripComboBox, index: int) -> int """
        ...

    def OnDropDown(self, *args): #cannot find CLR method
        """ OnDropDown(self: ToolStripComboBox, e: EventArgs) """
        ...

    def OnDropDownClosed(self, *args): #cannot find CLR method
        """ OnDropDownClosed(self: ToolStripComboBox, e: EventArgs) """
        ...

    def OnDropDownStyleChanged(self, *args): #cannot find CLR method
        """ OnDropDownStyleChanged(self: ToolStripComboBox, e: EventArgs) """
        ...

    def OnSelectedIndexChanged(self, *args): #cannot find CLR method
        """ OnSelectedIndexChanged(self: ToolStripComboBox, e: EventArgs) """
        ...

    def OnSelectionChangeCommitted(self, *args): #cannot find CLR method
        """ OnSelectionChangeCommitted(self: ToolStripComboBox, e: EventArgs) """
        ...

    def OnTextUpdate(self, *args): #cannot find CLR method
        """ OnTextUpdate(self: ToolStripComboBox, e: EventArgs) """
        ...

    def Select(self, start:int = ..., length:int = ...): # -> 
        """ Select(self: ToolStripComboBox, start: int, length: int) """
        ...

    def SelectAll(self): # -> 
        """ SelectAll(self: ToolStripComboBox) """
        ...

    def ToString(self) -> str:
        """ ToString(self: ToolStripComboBox) -> str """
        ...

    DoubleClick = ...
    DropDown = ...
    DropDownClosed = ...
    DropDownStyleChanged = ...
    SelectedIndexChanged = ...
    TextUpdate = ...


class ToolStripContainer(ContainerControl): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'IContainerControl'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ ToolStripContainer() """
    @property
    def AutoScroll(self) -> bool:
        """
        Get: AutoScroll(self: ToolStripContainer) -> bool
        Set: AutoScroll(self: ToolStripContainer) = value
        """
        ...

    @property
    def AutoScrollMargin(self) -> Size:
        """
        Get: AutoScrollMargin(self: ToolStripContainer) -> Size
        Set: AutoScrollMargin(self: ToolStripContainer) = value
        """
        ...

    @property
    def AutoScrollMinSize(self) -> Size:
        """
        Get: AutoScrollMinSize(self: ToolStripContainer) -> Size
        Set: AutoScrollMinSize(self: ToolStripContainer) = value
        """
        ...

    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: ToolStripContainer) -> Color
        Set: BackColor(self: ToolStripContainer) = value
        """
        ...

    @property
    def BackgroundImage(self) -> Image:
        """
        Get: BackgroundImage(self: ToolStripContainer) -> Image
        Set: BackgroundImage(self: ToolStripContainer) = value
        """
        ...

    @property
    def BackgroundImageLayout(self) -> ImageLayout:
        """
        Get: BackgroundImageLayout(self: ToolStripContainer) -> ImageLayout
        Set: BackgroundImageLayout(self: ToolStripContainer) = value
        """
        ...

    @property
    def BottomToolStripPanel(self): # -> ToolStripPanel
        """ Get: BottomToolStripPanel(self: ToolStripContainer) -> ToolStripPanel """
        ...

    @property
    def BottomToolStripPanelVisible(self) -> bool:
        """
        Get: BottomToolStripPanelVisible(self: ToolStripContainer) -> bool
        Set: BottomToolStripPanelVisible(self: ToolStripContainer) = value
        """
        ...

    @property
    def CausesValidation(self) -> bool:
        """
        Get: CausesValidation(self: ToolStripContainer) -> bool
        Set: CausesValidation(self: ToolStripContainer) = value
        """
        ...

    @property
    def ContentPanel(self): # -> ToolStripContentPanel
        """ Get: ContentPanel(self: ToolStripContainer) -> ToolStripContentPanel """
        ...

    @property
    def ContextMenuStrip(self) -> ContextMenuStrip:
        """
        Get: ContextMenuStrip(self: ToolStripContainer) -> ContextMenuStrip
        Set: ContextMenuStrip(self: ToolStripContainer) = value
        """
        ...

    @property
    def Controls(self) -> ControlCollection:
        """ Get: Controls(self: ToolStripContainer) -> ControlCollection """
        ...

    @property
    def Cursor(self) -> Cursor:
        """
        Get: Cursor(self: ToolStripContainer) -> Cursor
        Set: Cursor(self: ToolStripContainer) = value
        """
        ...

    @property
    def ForeColor(self) -> Color:
        """
        Get: ForeColor(self: ToolStripContainer) -> Color
        Set: ForeColor(self: ToolStripContainer) = value
        """
        ...

    @property
    def LeftToolStripPanel(self): # -> ToolStripPanel
        """ Get: LeftToolStripPanel(self: ToolStripContainer) -> ToolStripPanel """
        ...

    @property
    def LeftToolStripPanelVisible(self) -> bool:
        """
        Get: LeftToolStripPanelVisible(self: ToolStripContainer) -> bool
        Set: LeftToolStripPanelVisible(self: ToolStripContainer) = value
        """
        ...

    @property
    def RightToolStripPanel(self): # -> ToolStripPanel
        """ Get: RightToolStripPanel(self: ToolStripContainer) -> ToolStripPanel """
        ...

    @property
    def RightToolStripPanelVisible(self) -> bool:
        """
        Get: RightToolStripPanelVisible(self: ToolStripContainer) -> bool
        Set: RightToolStripPanelVisible(self: ToolStripContainer) = value
        """
        ...

    @property
    def TopToolStripPanel(self): # -> ToolStripPanel
        """ Get: TopToolStripPanel(self: ToolStripContainer) -> ToolStripPanel """
        ...

    @property
    def TopToolStripPanelVisible(self) -> bool:
        """
        Get: TopToolStripPanelVisible(self: ToolStripContainer) -> bool
        Set: TopToolStripPanelVisible(self: ToolStripContainer) = value
        """
        ...


    BackColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    CausesValidationChanged = ...
    ContextMenuStripChanged = ...
    CursorChanged = ...
    ForeColorChanged = ...


class ToolStripContentPanel(Panel): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ ToolStripContentPanel() """
    @property
    def Anchor(self) -> AnchorStyles:
        """
        Get: Anchor(self: ToolStripContentPanel) -> AnchorStyles
        Set: Anchor(self: ToolStripContentPanel) = value
        """
        ...

    @property
    def AutoScroll(self) -> bool:
        """
        Get: AutoScroll(self: ToolStripContentPanel) -> bool
        Set: AutoScroll(self: ToolStripContentPanel) = value
        """
        ...

    @property
    def AutoScrollMargin(self) -> Size:
        """
        Get: AutoScrollMargin(self: ToolStripContentPanel) -> Size
        Set: AutoScrollMargin(self: ToolStripContentPanel) = value
        """
        ...

    @property
    def AutoScrollMinSize(self) -> Size:
        """
        Get: AutoScrollMinSize(self: ToolStripContentPanel) -> Size
        Set: AutoScrollMinSize(self: ToolStripContentPanel) = value
        """
        ...

    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: ToolStripContentPanel) -> Color
        Set: BackColor(self: ToolStripContentPanel) = value
        """
        ...

    @property
    def CausesValidation(self) -> bool:
        """
        Get: CausesValidation(self: ToolStripContentPanel) -> bool
        Set: CausesValidation(self: ToolStripContentPanel) = value
        """
        ...

    @property
    def Dock(self) -> DockStyle:
        """
        Get: Dock(self: ToolStripContentPanel) -> DockStyle
        Set: Dock(self: ToolStripContentPanel) = value
        """
        ...

    @property
    def Location(self) -> Point:
        """
        Get: Location(self: ToolStripContentPanel) -> Point
        Set: Location(self: ToolStripContentPanel) = value
        """
        ...

    @property
    def MaximumSize(self) -> Size:
        """
        Get: MaximumSize(self: ToolStripContentPanel) -> Size
        Set: MaximumSize(self: ToolStripContentPanel) = value
        """
        ...

    @property
    def MinimumSize(self) -> Size:
        """
        Get: MinimumSize(self: ToolStripContentPanel) -> Size
        Set: MinimumSize(self: ToolStripContentPanel) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ToolStripContentPanel) -> str
        Set: Name(self: ToolStripContentPanel) = value
        """
        ...

    @property
    def Renderer(self): # -> ToolStripRenderer
        """
        Get: Renderer(self: ToolStripContentPanel) -> ToolStripRenderer
        Set: Renderer(self: ToolStripContentPanel) = value
        """
        ...

    @property
    def RenderMode(self): # -> ToolStripRenderMode
        """
        Get: RenderMode(self: ToolStripContentPanel) -> ToolStripRenderMode
        Set: RenderMode(self: ToolStripContentPanel) = value
        """
        ...

    @property
    def TabIndex(self) -> int:
        """
        Get: TabIndex(self: ToolStripContentPanel) -> int
        Set: TabIndex(self: ToolStripContentPanel) = value
        """
        ...


    def OnLoad(self, *args): #cannot find CLR method
        """ OnLoad(self: ToolStripContentPanel, e: EventArgs) """
        ...

    def OnRendererChanged(self, *args): #cannot find CLR method
        """ OnRendererChanged(self: ToolStripContentPanel, e: EventArgs) """
        ...

    AutoSizeChanged = ...
    CausesValidationChanged = ...
    DockChanged = ...
    Load = ...
    LocationChanged = ...
    RendererChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...


class ToolStripContentPanelRenderEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ ToolStripContentPanelRenderEventArgs(g: Graphics, contentPanel: ToolStripContentPanel) """
    @property
    def Graphics(self) -> Graphics:
        """ Get: Graphics(self: ToolStripContentPanelRenderEventArgs) -> Graphics """
        ...

    @property
    def Handled(self) -> bool:
        """
        Get: Handled(self: ToolStripContentPanelRenderEventArgs) -> bool
        Set: Handled(self: ToolStripContentPanelRenderEventArgs) = value
        """
        ...

    @property
    def ToolStripContentPanel(self) -> ToolStripContentPanel:
        """ Get: ToolStripContentPanel(self: ToolStripContentPanelRenderEventArgs) -> ToolStripContentPanel """
        ...


    def __new__(cls, g:Graphics, contentPanel:ToolStripContentPanel) -> Self:
        """ __new__(cls: type, g: Graphics, contentPanel: ToolStripContentPanel) """
        ...


class ToolStripContentPanelRenderEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ToolStripContentPanelRenderEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ToolStripContentPanelRenderEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ToolStripContentPanelRenderEventHandler, sender: object, e: ToolStripContentPanelRenderEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ToolStripContentPanelRenderEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ToolStripContentPanelRenderEventArgs): # -> 
        """ Invoke(self: ToolStripContentPanelRenderEventHandler, sender: object, e: ToolStripContentPanelRenderEventArgs) """
        ...


class ToolStripDropDownItem(ToolStripItem): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'IDropTarget'>, <type 'IArrangedElement'>, <type 'ISupportOleDropSource'>, <type 'IKeyboardToolTip'>, <type 'object'>
    """ no doc """
    @property
    def DropDown(self) -> ToolStripDropDown:
        """
        Get: DropDown(self: ToolStripDropDownItem) -> ToolStripDropDown
        Set: DropDown(self: ToolStripDropDownItem) = value
        """
        ...

    @property
    def DropDownDirection(self): # -> ToolStripDropDownDirection
        """
        Get: DropDownDirection(self: ToolStripDropDownItem) -> ToolStripDropDownDirection
        Set: DropDownDirection(self: ToolStripDropDownItem) = value
        """
        ...

    @property
    def DropDownItems(self): # -> ToolStripItemCollection
        """ Get: DropDownItems(self: ToolStripDropDownItem) -> ToolStripItemCollection """
        ...

    @property
    def DropDownLocation(self):
        ...

    @property
    def HasDropDown(self) -> bool:
        """ Get: HasDropDown(self: ToolStripDropDownItem) -> bool """
        ...

    @property
    def HasDropDownItems(self) -> bool:
        """ Get: HasDropDownItems(self: ToolStripDropDownItem) -> bool """
        ...


    def CreateDefaultDropDown(self, *args): #cannot find CLR method
        """ CreateDefaultDropDown(self: ToolStripDropDownItem) -> ToolStripDropDown """
        ...

    def HideDropDown(self): # -> 
        """ HideDropDown(self: ToolStripDropDownItem) """
        ...

    def OnDropDownClosed(self, *args): #cannot find CLR method
        """ OnDropDownClosed(self: ToolStripDropDownItem, e: EventArgs) """
        ...

    def OnDropDownHide(self, *args): #cannot find CLR method
        """ OnDropDownHide(self: ToolStripDropDownItem, e: EventArgs) """
        ...

    def OnDropDownItemClicked(self, *args): #cannot find CLR method
        """ OnDropDownItemClicked(self: ToolStripDropDownItem, e: ToolStripItemClickedEventArgs) """
        ...

    def OnDropDownOpened(self, *args): #cannot find CLR method
        """ OnDropDownOpened(self: ToolStripDropDownItem, e: EventArgs) """
        ...

    def OnDropDownShow(self, *args): #cannot find CLR method
        """ OnDropDownShow(self: ToolStripDropDownItem, e: EventArgs) """
        ...

    def ShowDropDown(self): # -> 
        """ ShowDropDown(self: ToolStripDropDownItem) """
        ...

    DropDownClosed = ...
    DropDownItemClicked = ...
    DropDownOpened = ...
    DropDownOpening = ...


class ToolStripDropDownButton(ToolStripDropDownItem): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'IDropTarget'>, <type 'IArrangedElement'>, <type 'ISupportOleDropSource'>, <type 'IKeyboardToolTip'>, <type 'object'>
    """
    ToolStripDropDownButton()
    ToolStripDropDownButton(text: str)
    ToolStripDropDownButton(image: Image)
    ToolStripDropDownButton(text: str, image: Image)
    ToolStripDropDownButton(text: str, image: Image, onClick: EventHandler)
    ToolStripDropDownButton(text: str, image: Image, onClick: EventHandler, name: str)
    ToolStripDropDownButton(text: str, image: Image, *dropDownItems: Array[ToolStripItem])
    """
    @property
    def AutoToolTip(self) -> bool:
        """
        Get: AutoToolTip(self: ToolStripDropDownButton) -> bool
        Set: AutoToolTip(self: ToolStripDropDownButton) = value
        """
        ...

    @property
    def ShowDropDownArrow(self) -> bool:
        """
        Get: ShowDropDownArrow(self: ToolStripDropDownButton) -> bool
        Set: ShowDropDownArrow(self: ToolStripDropDownButton) = value
        """
        ...



class ToolStripDropDownClosedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ ToolStripDropDownClosedEventArgs(reason: ToolStripDropDownCloseReason) """
    @property
    def CloseReason(self): # -> ToolStripDropDownCloseReason
        """ Get: CloseReason(self: ToolStripDropDownClosedEventArgs) -> ToolStripDropDownCloseReason """
        ...


    def __new__(cls, reason) -> Self: # Not found arg types: {'reason': 'ToolStripDropDownCloseReason'}
        """ __new__(cls: type, reason: ToolStripDropDownCloseReason) """
        ...


class ToolStripDropDownClosedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ToolStripDropDownClosedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ToolStripDropDownClosedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ToolStripDropDownClosedEventHandler, sender: object, e: ToolStripDropDownClosedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ToolStripDropDownClosedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ToolStripDropDownClosedEventArgs): # -> 
        """ Invoke(self: ToolStripDropDownClosedEventHandler, sender: object, e: ToolStripDropDownClosedEventArgs) """
        ...


class ToolStripDropDownCloseReason(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ToolStripDropDownCloseReason, values: AppClicked (1), AppFocusChange (0), CloseCalled (4), ItemClicked (2), Keyboard (3) """
    AppClicked: ToolStripDropDownCloseReason = ...
    AppFocusChange: ToolStripDropDownCloseReason = ...
    CloseCalled: ToolStripDropDownCloseReason = ...
    ItemClicked: ToolStripDropDownCloseReason = ...
    Keyboard: ToolStripDropDownCloseReason = ...
    value__ = ...


class ToolStripDropDownClosingEventArgs(CancelEventArgs): # skipped bases: <type 'object'>
    """ ToolStripDropDownClosingEventArgs(reason: ToolStripDropDownCloseReason) """
    @property
    def CloseReason(self) -> ToolStripDropDownCloseReason:
        """ Get: CloseReason(self: ToolStripDropDownClosingEventArgs) -> ToolStripDropDownCloseReason """
        ...



class ToolStripDropDownClosingEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ToolStripDropDownClosingEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ToolStripDropDownClosingEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ToolStripDropDownClosingEventHandler, sender: object, e: ToolStripDropDownClosingEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ToolStripDropDownClosingEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ToolStripDropDownClosingEventArgs): # -> 
        """ Invoke(self: ToolStripDropDownClosingEventHandler, sender: object, e: ToolStripDropDownClosingEventArgs) """
        ...


class ToolStripDropDownDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ToolStripDropDownDirection, values: AboveLeft (0), AboveRight (1), BelowLeft (2), BelowRight (3), Default (7), Left (4), Right (5) """
    AboveLeft: ToolStripDropDownDirection = ...
    AboveRight: ToolStripDropDownDirection = ...
    BelowLeft: ToolStripDropDownDirection = ...
    BelowRight: ToolStripDropDownDirection = ...
    Default: ToolStripDropDownDirection = ...
    Left: ToolStripDropDownDirection = ...
    Right: ToolStripDropDownDirection = ...
    value__ = ...


class ToolStripDropDownItemAccessibleObject(ToolStripItemAccessibleObject): # skipped bases: <type 'IInvokeProvider'>, <type 'IValueProvider'>, <type 'IRawElementProviderFragment'>, <type 'IRawElementProviderFragmentRoot'>, <type 'IRawElementProviderSimple'>, <type 'IRangeValueProvider'>, <type 'IOleWindow'>, <type 'IAccessibleEx'>, <type 'IGridProvider'>, <type 'ISelectionItemProvider'>, <type 'IServiceProvider'>, <type 'IMarshal'>, <type 'IReflect'>, <type 'ISelectionProvider'>, <type 'IScrollItemProvider'>, <type 'ITableProvider'>, <type 'IExpandCollapseProvider'>, <type 'IToggleProvider'>, <type 'ILegacyIAccessibleProvider'>, <type 'IGridItemProvider'>, <type 'IEnumVariant'>, <type 'IAccessible'>, <type 'ITableItemProvider'>, <type 'IRawElementProviderHwndOverride'>, <type 'object'>
    """ ToolStripDropDownItemAccessibleObject(item: ToolStripDropDownItem) """
    def GetChild(self, index:int) -> AccessibleObject:
        """ GetChild(self: ToolStripDropDownItemAccessibleObject, index: int) -> AccessibleObject """
        ...

    def GetChildCount(self) -> int:
        """ GetChildCount(self: ToolStripDropDownItemAccessibleObject) -> int """
        ...


class ToolStripGripDisplayStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ToolStripGripDisplayStyle, values: Horizontal (0), Vertical (1) """
    Horizontal: ToolStripGripDisplayStyle = ...
    value__ = ...
    Vertical: ToolStripGripDisplayStyle = ...


class ToolStripRenderEventArgs(EventArgs): # skipped bases: <type 'object'>
    """
    ToolStripRenderEventArgs(g: Graphics, toolStrip: ToolStrip)
    ToolStripRenderEventArgs(g: Graphics, toolStrip: ToolStrip, affectedBounds: Rectangle, backColor: Color)
    """
    @property
    def AffectedBounds(self) -> Rectangle:
        """ Get: AffectedBounds(self: ToolStripRenderEventArgs) -> Rectangle """
        ...

    @property
    def BackColor(self) -> Color:
        """ Get: BackColor(self: ToolStripRenderEventArgs) -> Color """
        ...

    @property
    def ConnectedArea(self) -> Rectangle:
        """ Get: ConnectedArea(self: ToolStripRenderEventArgs) -> Rectangle """
        ...

    @property
    def Graphics(self) -> Graphics:
        """ Get: Graphics(self: ToolStripRenderEventArgs) -> Graphics """
        ...

    @property
    def ToolStrip(self) -> ToolStrip:
        """ Get: ToolStrip(self: ToolStripRenderEventArgs) -> ToolStrip """
        ...


    def __new__(cls, g:Graphics, toolStrip:ToolStrip, affectedBounds:Rectangle = ..., backColor:Color = ...) -> Self:
        """
        __new__(cls: type, g: Graphics, toolStrip: ToolStrip)
        __new__(cls: type, g: Graphics, toolStrip: ToolStrip, affectedBounds: Rectangle, backColor: Color)
        """
        ...


class ToolStripGripRenderEventArgs(ToolStripRenderEventArgs): # skipped bases: <type 'object'>
    """ ToolStripGripRenderEventArgs(g: Graphics, toolStrip: ToolStrip) """
    @property
    def GripBounds(self) -> Rectangle:
        """ Get: GripBounds(self: ToolStripGripRenderEventArgs) -> Rectangle """
        ...

    @property
    def GripDisplayStyle(self) -> ToolStripGripDisplayStyle:
        """ Get: GripDisplayStyle(self: ToolStripGripRenderEventArgs) -> ToolStripGripDisplayStyle """
        ...

    @property
    def GripStyle(self): # -> ToolStripGripStyle
        """ Get: GripStyle(self: ToolStripGripRenderEventArgs) -> ToolStripGripStyle """
        ...



class ToolStripGripRenderEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ToolStripGripRenderEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ToolStripGripRenderEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ToolStripGripRenderEventHandler, sender: object, e: ToolStripGripRenderEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ToolStripGripRenderEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ToolStripGripRenderEventArgs): # -> 
        """ Invoke(self: ToolStripGripRenderEventHandler, sender: object, e: ToolStripGripRenderEventArgs) """
        ...


class ToolStripGripStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ToolStripGripStyle, values: Hidden (0), Visible (1) """
    Hidden: ToolStripGripStyle = ...
    value__ = ...
    Visible: ToolStripGripStyle = ...


class ToolStripItemAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ToolStripItemAlignment, values: Left (0), Right (1) """
    Left: ToolStripItemAlignment = ...
    Right: ToolStripItemAlignment = ...
    value__ = ...


class ToolStripItemClickedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ ToolStripItemClickedEventArgs(clickedItem: ToolStripItem) """
    @property
    def ClickedItem(self) -> ToolStripItem:
        """ Get: ClickedItem(self: ToolStripItemClickedEventArgs) -> ToolStripItem """
        ...


    def __new__(cls, clickedItem:ToolStripItem) -> Self:
        """ __new__(cls: type, clickedItem: ToolStripItem) """
        ...


class ToolStripItemClickedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ToolStripItemClickedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ToolStripItemClickedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ToolStripItemClickedEventHandler, sender: object, e: ToolStripItemClickedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ToolStripItemClickedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ToolStripItemClickedEventArgs): # -> 
        """ Invoke(self: ToolStripItemClickedEventHandler, sender: object, e: ToolStripItemClickedEventArgs) """
        ...


class ToolStripItemCollection(ArrangedElementCollection): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'IList'>, <type 'object'>
    """ ToolStripItemCollection(owner: ToolStrip, value: Array[ToolStripItem]) """
    def Add(self, *__args:str) -> ToolStripItem:
        """
        Add(self: ToolStripItemCollection, text: str) -> ToolStripItem
        Add(self: ToolStripItemCollection, image: Image) -> ToolStripItem
        Add(self: ToolStripItemCollection, text: str, image: Image) -> ToolStripItem
        Add(self: ToolStripItemCollection, text: str, image: Image, onClick: EventHandler) -> ToolStripItem
        Add(self: ToolStripItemCollection, value: ToolStripItem) -> int
        """
        ...

    def AddRange(self, toolStripItems:Array): # -> 
        """ AddRange(self: ToolStripItemCollection, toolStripItems: Array[ToolStripItem])AddRange(self: ToolStripItemCollection, toolStripItems: ToolStripItemCollection) """
        ...

    def Clear(self): # -> 
        """ Clear(self: ToolStripItemCollection) """
        ...

    def Contains(self, value:ToolStripItem) -> bool:
        """ Contains(self: ToolStripItemCollection, value: ToolStripItem) -> bool """
        ...

    def ContainsKey(self, key:str) -> bool:
        """ ContainsKey(self: ToolStripItemCollection, key: str) -> bool """
        ...

    def Find(self, key:str, searchAllChildren:bool) -> Array:
        """ Find(self: ToolStripItemCollection, key: str, searchAllChildren: bool) -> Array[ToolStripItem] """
        ...

    def IndexOf(self, value:ToolStripItem) -> int:
        """ IndexOf(self: ToolStripItemCollection, value: ToolStripItem) -> int """
        ...

    def IndexOfKey(self, key:str) -> int:
        """ IndexOfKey(self: ToolStripItemCollection, key: str) -> int """
        ...

    def Insert(self, index:int, value:ToolStripItem): # -> 
        """ Insert(self: ToolStripItemCollection, index: int, value: ToolStripItem) """
        ...

    def Remove(self, value:ToolStripItem): # -> 
        """ Remove(self: ToolStripItemCollection, value: ToolStripItem) """
        ...

    def RemoveAt(self, index:int): # -> 
        """ RemoveAt(self: ToolStripItemCollection, index: int) """
        ...

    def RemoveByKey(self, key:str): # -> 
        """ RemoveByKey(self: ToolStripItemCollection, key: str) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    def __new__(cls, owner:ToolStrip, value:Array) -> Self:
        """ __new__(cls: type, owner: ToolStrip, value: Array[ToolStripItem]) """
        ...


class ToolStripItemDisplayStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ToolStripItemDisplayStyle, values: Image (2), ImageAndText (3), None (0), Text (1) """
    Image: ToolStripItemDisplayStyle = ...
    ImageAndText: ToolStripItemDisplayStyle = ...
    Text: ToolStripItemDisplayStyle = ...
    value__ = ...


class ToolStripItemEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ ToolStripItemEventArgs(item: ToolStripItem) """
    @property
    def Item(self) -> ToolStripItem:
        """ Get: Item(self: ToolStripItemEventArgs) -> ToolStripItem """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __new__(cls, item:ToolStripItem) -> Self:
        """ __new__(cls: type, item: ToolStripItem) """
        ...


class ToolStripItemEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ToolStripItemEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ToolStripItemEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ToolStripItemEventHandler, sender: object, e: ToolStripItemEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ToolStripItemEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ToolStripItemEventArgs): # -> 
        """ Invoke(self: ToolStripItemEventHandler, sender: object, e: ToolStripItemEventArgs) """
        ...


class ToolStripItemRenderEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ ToolStripItemRenderEventArgs(g: Graphics, item: ToolStripItem) """
    @property
    def Graphics(self) -> Graphics:
        """ Get: Graphics(self: ToolStripItemRenderEventArgs) -> Graphics """
        ...

    @property
    def Item(self) -> ToolStripItem:
        """ Get: Item(self: ToolStripItemRenderEventArgs) -> ToolStripItem """
        ...

    @property
    def ToolStrip(self) -> ToolStrip:
        """ Get: ToolStrip(self: ToolStripItemRenderEventArgs) -> ToolStrip """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __new__(cls, g:Graphics, item:ToolStripItem) -> Self:
        """ __new__(cls: type, g: Graphics, item: ToolStripItem) """
        ...


class ToolStripItemImageRenderEventArgs(ToolStripItemRenderEventArgs): # skipped bases: <type 'object'>
    """
    ToolStripItemImageRenderEventArgs(g: Graphics, item: ToolStripItem, imageRectangle: Rectangle)
    ToolStripItemImageRenderEventArgs(g: Graphics, item: ToolStripItem, image: Image, imageRectangle: Rectangle)
    """
    @property
    def Image(self) -> Image:
        """ Get: Image(self: ToolStripItemImageRenderEventArgs) -> Image """
        ...

    @property
    def ImageRectangle(self) -> Rectangle:
        """ Get: ImageRectangle(self: ToolStripItemImageRenderEventArgs) -> Rectangle """
        ...



class ToolStripItemImageRenderEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ToolStripItemImageRenderEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ToolStripItemImageRenderEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ToolStripItemImageRenderEventHandler, sender: object, e: ToolStripItemImageRenderEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ToolStripItemImageRenderEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ToolStripItemImageRenderEventArgs): # -> 
        """ Invoke(self: ToolStripItemImageRenderEventHandler, sender: object, e: ToolStripItemImageRenderEventArgs) """
        ...


class ToolStripItemImageScaling(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ToolStripItemImageScaling, values: None (0), SizeToFit (1) """
    SizeToFit: ToolStripItemImageScaling = ...
    value__ = ...


class ToolStripItemOverflow(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ToolStripItemOverflow, values: Always (1), AsNeeded (2), Never (0) """
    Always: ToolStripItemOverflow = ...
    AsNeeded: ToolStripItemOverflow = ...
    Never: ToolStripItemOverflow = ...
    value__ = ...


class ToolStripItemPlacement(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ToolStripItemPlacement, values: Main (0), None (2), Overflow (1) """
    Main: ToolStripItemPlacement = ...
    Overflow: ToolStripItemPlacement = ...
    value__ = ...


class ToolStripItemRenderEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ToolStripItemRenderEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ToolStripItemRenderEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ToolStripItemRenderEventHandler, sender: object, e: ToolStripItemRenderEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ToolStripItemRenderEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ToolStripItemRenderEventArgs): # -> 
        """ Invoke(self: ToolStripItemRenderEventHandler, sender: object, e: ToolStripItemRenderEventArgs) """
        ...


class ToolStripItemTextRenderEventArgs(ToolStripItemRenderEventArgs): # skipped bases: <type 'object'>
    """
    ToolStripItemTextRenderEventArgs(g: Graphics, item: ToolStripItem, text: str, textRectangle: Rectangle, textColor: Color, textFont: Font, format: TextFormatFlags)
    ToolStripItemTextRenderEventArgs(g: Graphics, item: ToolStripItem, text: str, textRectangle: Rectangle, textColor: Color, textFont: Font, textAlign: ContentAlignment)
    """
    @property
    def Text(self) -> str:
        """
        Get: Text(self: ToolStripItemTextRenderEventArgs) -> str
        Set: Text(self: ToolStripItemTextRenderEventArgs) = value
        """
        ...

    @property
    def TextColor(self) -> Color:
        """
        Get: TextColor(self: ToolStripItemTextRenderEventArgs) -> Color
        Set: TextColor(self: ToolStripItemTextRenderEventArgs) = value
        """
        ...

    @property
    def TextDirection(self): # -> ToolStripTextDirection
        """
        Get: TextDirection(self: ToolStripItemTextRenderEventArgs) -> ToolStripTextDirection
        Set: TextDirection(self: ToolStripItemTextRenderEventArgs) = value
        """
        ...

    @property
    def TextFont(self) -> Font:
        """
        Get: TextFont(self: ToolStripItemTextRenderEventArgs) -> Font
        Set: TextFont(self: ToolStripItemTextRenderEventArgs) = value
        """
        ...

    @property
    def TextFormat(self) -> TextFormatFlags:
        """
        Get: TextFormat(self: ToolStripItemTextRenderEventArgs) -> TextFormatFlags
        Set: TextFormat(self: ToolStripItemTextRenderEventArgs) = value
        """
        ...

    @property
    def TextRectangle(self) -> Rectangle:
        """
        Get: TextRectangle(self: ToolStripItemTextRenderEventArgs) -> Rectangle
        Set: TextRectangle(self: ToolStripItemTextRenderEventArgs) = value
        """
        ...



class ToolStripItemTextRenderEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ToolStripItemTextRenderEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ToolStripItemTextRenderEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ToolStripItemTextRenderEventHandler, sender: object, e: ToolStripItemTextRenderEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ToolStripItemTextRenderEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ToolStripItemTextRenderEventArgs): # -> 
        """ Invoke(self: ToolStripItemTextRenderEventHandler, sender: object, e: ToolStripItemTextRenderEventArgs) """
        ...


class ToolStripLabel(ToolStripItem): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'IDropTarget'>, <type 'IArrangedElement'>, <type 'ISupportOleDropSource'>, <type 'IKeyboardToolTip'>, <type 'object'>
    """
    ToolStripLabel()
    ToolStripLabel(text: str)
    ToolStripLabel(image: Image)
    ToolStripLabel(text: str, image: Image)
    ToolStripLabel(text: str, image: Image, isLink: bool)
    ToolStripLabel(text: str, image: Image, isLink: bool, onClick: EventHandler)
    ToolStripLabel(text: str, image: Image, isLink: bool, onClick: EventHandler, name: str)
    """
    @property
    def ActiveLinkColor(self) -> Color:
        """
        Get: ActiveLinkColor(self: ToolStripLabel) -> Color
        Set: ActiveLinkColor(self: ToolStripLabel) = value
        """
        ...

    @property
    def IsLink(self) -> bool:
        """
        Get: IsLink(self: ToolStripLabel) -> bool
        Set: IsLink(self: ToolStripLabel) = value
        """
        ...

    @property
    def LinkBehavior(self) -> LinkBehavior:
        """
        Get: LinkBehavior(self: ToolStripLabel) -> LinkBehavior
        Set: LinkBehavior(self: ToolStripLabel) = value
        """
        ...

    @property
    def LinkColor(self) -> Color:
        """
        Get: LinkColor(self: ToolStripLabel) -> Color
        Set: LinkColor(self: ToolStripLabel) = value
        """
        ...

    @property
    def LinkVisited(self) -> bool:
        """
        Get: LinkVisited(self: ToolStripLabel) -> bool
        Set: LinkVisited(self: ToolStripLabel) = value
        """
        ...

    @property
    def VisitedLinkColor(self) -> Color:
        """
        Get: VisitedLinkColor(self: ToolStripLabel) -> Color
        Set: VisitedLinkColor(self: ToolStripLabel) = value
        """
        ...



class ToolStripLayoutStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ToolStripLayoutStyle, values: Flow (3), HorizontalStackWithOverflow (1), StackWithOverflow (0), Table (4), VerticalStackWithOverflow (2) """
    Flow: ToolStripLayoutStyle = ...
    HorizontalStackWithOverflow: ToolStripLayoutStyle = ...
    StackWithOverflow: ToolStripLayoutStyle = ...
    Table: ToolStripLayoutStyle = ...
    value__ = ...
    VerticalStackWithOverflow: ToolStripLayoutStyle = ...


class ToolStripManager: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Renderer(self): # -> ToolStripRenderer
        """
        Get: Renderer() -> ToolStripRenderer
        Set: Renderer() = value
        """
        ...

    @property
    def RenderMode(self): # -> ToolStripManagerRenderMode
        """
        Get: RenderMode() -> ToolStripManagerRenderMode
        Set: RenderMode() = value
        """
        ...

    @property
    def VisualStylesEnabled(self) -> bool:
        """
        Get: VisualStylesEnabled() -> bool
        Set: VisualStylesEnabled() = value
        """
        ...


    @staticmethod
    def FindToolStrip(toolStripName:str) -> ToolStrip:
        """ FindToolStrip(toolStripName: str) -> ToolStrip """
        ...

    @staticmethod
    def IsShortcutDefined(shortcut:Keys) -> bool:
        """ IsShortcutDefined(shortcut: Keys) -> bool """
        ...

    @staticmethod
    def IsValidShortcut(shortcut:Keys) -> bool:
        """ IsValidShortcut(shortcut: Keys) -> bool """
        ...

    @staticmethod
    def LoadSettings(targetForm:Form, key:str = ...): # -> 
        """ LoadSettings(targetForm: Form)LoadSettings(targetForm: Form, key: str) """
        ...

    @staticmethod
    def Merge(sourceToolStrip:ToolStrip, *__args:ToolStrip) -> bool:
        """
        Merge(sourceToolStrip: ToolStrip, targetToolStrip: ToolStrip) -> bool
        Merge(sourceToolStrip: ToolStrip, targetName: str) -> bool
        """
        ...

    @staticmethod
    def RevertMerge(*__args:ToolStrip) -> bool:
        """
        RevertMerge(targetToolStrip: ToolStrip) -> bool
        RevertMerge(targetToolStrip: ToolStrip, sourceToolStrip: ToolStrip) -> bool
        RevertMerge(targetName: str) -> bool
        """
        ...

    @staticmethod
    def SaveSettings(sourceForm:Form, key:str = ...): # -> 
        """ SaveSettings(sourceForm: Form)SaveSettings(sourceForm: Form, key: str) """
        ...

    RendererChanged = ...


class ToolStripManagerRenderMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ToolStripManagerRenderMode, values: Custom (0), Professional (2), System (1) """
    Custom: ToolStripManagerRenderMode = ...
    Professional: ToolStripManagerRenderMode = ...
    System: ToolStripManagerRenderMode = ...
    value__ = ...


class ToolStripMenuItem(ToolStripDropDownItem): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'IDropTarget'>, <type 'IArrangedElement'>, <type 'ISupportOleDropSource'>, <type 'IKeyboardToolTip'>, <type 'object'>
    """
    ToolStripMenuItem()
    ToolStripMenuItem(text: str)
    ToolStripMenuItem(image: Image)
    ToolStripMenuItem(text: str, image: Image)
    ToolStripMenuItem(text: str, image: Image, onClick: EventHandler)
    ToolStripMenuItem(text: str, image: Image, onClick: EventHandler, name: str)
    ToolStripMenuItem(text: str, image: Image, *dropDownItems: Array[ToolStripItem])
    ToolStripMenuItem(text: str, image: Image, onClick: EventHandler, shortcutKeys: Keys)
    """
    @property
    def Checked(self) -> bool:
        """
        Get: Checked(self: ToolStripMenuItem) -> bool
        Set: Checked(self: ToolStripMenuItem) = value
        """
        ...

    @property
    def CheckOnClick(self) -> bool:
        """
        Get: CheckOnClick(self: ToolStripMenuItem) -> bool
        Set: CheckOnClick(self: ToolStripMenuItem) = value
        """
        ...

    @property
    def CheckState(self) -> CheckState:
        """
        Get: CheckState(self: ToolStripMenuItem) -> CheckState
        Set: CheckState(self: ToolStripMenuItem) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ToolStripMenuItem) -> bool
        Set: Enabled(self: ToolStripMenuItem) = value
        """
        ...

    @property
    def IsMdiWindowListEntry(self) -> bool:
        """ Get: IsMdiWindowListEntry(self: ToolStripMenuItem) -> bool """
        ...

    @property
    def Overflow(self) -> ToolStripItemOverflow:
        """
        Get: Overflow(self: ToolStripMenuItem) -> ToolStripItemOverflow
        Set: Overflow(self: ToolStripMenuItem) = value
        """
        ...

    @property
    def ShortcutKeyDisplayString(self) -> str:
        """
        Get: ShortcutKeyDisplayString(self: ToolStripMenuItem) -> str
        Set: ShortcutKeyDisplayString(self: ToolStripMenuItem) = value
        """
        ...

    @property
    def ShortcutKeys(self) -> Keys:
        """
        Get: ShortcutKeys(self: ToolStripMenuItem) -> Keys
        Set: ShortcutKeys(self: ToolStripMenuItem) = value
        """
        ...

    @property
    def ShowShortcutKeys(self) -> bool:
        """
        Get: ShowShortcutKeys(self: ToolStripMenuItem) -> bool
        Set: ShowShortcutKeys(self: ToolStripMenuItem) = value
        """
        ...


    def OnCheckedChanged(self, *args): #cannot find CLR method
        """ OnCheckedChanged(self: ToolStripMenuItem, e: EventArgs) """
        ...

    def OnCheckStateChanged(self, *args): #cannot find CLR method
        """ OnCheckStateChanged(self: ToolStripMenuItem, e: EventArgs) """
        ...

    CheckedChanged = ...
    CheckStateChanged = ...


class ToolStripOverflow(ToolStripDropDown): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IViewObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'ISupportToolStripPanel'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IOleObject'>, <type 'object'>
    """ ToolStripOverflow(parentItem: ToolStripItem) """
    @property
    def Items(self) -> ToolStripItemCollection:
        """ Get: Items(self: ToolStripOverflow) -> ToolStripItemCollection """
        ...

    @property
    def LayoutEngine(self) -> LayoutEngine:
        """ Get: LayoutEngine(self: ToolStripOverflow) -> LayoutEngine """
        ...


    def GetPreferredSize(self, constrainingSize:Size) -> Size:
        """ GetPreferredSize(self: ToolStripOverflow, constrainingSize: Size) -> Size """
        ...

    def __new__(cls, parentItem:ToolStripItem) -> Self:
        """ __new__(cls: type, parentItem: ToolStripItem) """
        ...


class ToolStripOverflowButton(ToolStripDropDownButton): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'IDropTarget'>, <type 'IArrangedElement'>, <type 'ISupportOleDropSource'>, <type 'IKeyboardToolTip'>, <type 'object'>
    """ no doc """
    @property
    def HasDropDownItems(self) -> bool:
        """ Get: HasDropDownItems(self: ToolStripOverflowButton) -> bool """
        ...

    @property
    def RightToLeftAutoMirrorImage(self) -> bool:
        """
        Get: RightToLeftAutoMirrorImage(self: ToolStripOverflowButton) -> bool
        Set: RightToLeftAutoMirrorImage(self: ToolStripOverflowButton) = value
        """
        ...


    def GetPreferredSize(self, constrainingSize:Size) -> Size:
        """ GetPreferredSize(self: ToolStripOverflowButton, constrainingSize: Size) -> Size """
        ...


class ToolStripPanel(ContainerControl): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'IContainerControl'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ ToolStripPanel() """
    @property
    def AllowDrop(self) -> bool:
        """
        Get: AllowDrop(self: ToolStripPanel) -> bool
        Set: AllowDrop(self: ToolStripPanel) = value
        """
        ...

    @property
    def AutoScroll(self) -> bool:
        """
        Get: AutoScroll(self: ToolStripPanel) -> bool
        Set: AutoScroll(self: ToolStripPanel) = value
        """
        ...

    @property
    def AutoScrollMargin(self) -> Size:
        """
        Get: AutoScrollMargin(self: ToolStripPanel) -> Size
        Set: AutoScrollMargin(self: ToolStripPanel) = value
        """
        ...

    @property
    def AutoScrollMinSize(self) -> Size:
        """
        Get: AutoScrollMinSize(self: ToolStripPanel) -> Size
        Set: AutoScrollMinSize(self: ToolStripPanel) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: ToolStripPanel) -> bool
        Set: AutoSize(self: ToolStripPanel) = value
        """
        ...

    @property
    def Dock(self) -> DockStyle:
        """
        Get: Dock(self: ToolStripPanel) -> DockStyle
        Set: Dock(self: ToolStripPanel) = value
        """
        ...

    @property
    def LayoutEngine(self) -> LayoutEngine:
        """ Get: LayoutEngine(self: ToolStripPanel) -> LayoutEngine """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ToolStripPanel) -> bool
        Set: Locked(self: ToolStripPanel) = value
        """
        ...

    @property
    def Orientation(self) -> Orientation:
        """
        Get: Orientation(self: ToolStripPanel) -> Orientation
        Set: Orientation(self: ToolStripPanel) = value
        """
        ...

    @property
    def Renderer(self): # -> ToolStripRenderer
        """
        Get: Renderer(self: ToolStripPanel) -> ToolStripRenderer
        Set: Renderer(self: ToolStripPanel) = value
        """
        ...

    @property
    def RenderMode(self): # -> ToolStripRenderMode
        """
        Get: RenderMode(self: ToolStripPanel) -> ToolStripRenderMode
        Set: RenderMode(self: ToolStripPanel) = value
        """
        ...

    @property
    def RowMargin(self) -> Padding:
        """
        Get: RowMargin(self: ToolStripPanel) -> Padding
        Set: RowMargin(self: ToolStripPanel) = value
        """
        ...

    @property
    def Rows(self) -> Array:
        """ Get: Rows(self: ToolStripPanel) -> Array[ToolStripPanelRow] """
        ...

    @property
    def TabIndex(self) -> int:
        """
        Get: TabIndex(self: ToolStripPanel) -> int
        Set: TabIndex(self: ToolStripPanel) = value
        """
        ...

    @property
    def TabStop(self) -> bool:
        """
        Get: TabStop(self: ToolStripPanel) -> bool
        Set: TabStop(self: ToolStripPanel) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: ToolStripPanel) -> str
        Set: Text(self: ToolStripPanel) = value
        """
        ...


    def BeginInit(self): # -> 
        """ BeginInit(self: ToolStripPanel) """
        ...

    def EndInit(self): # -> 
        """ EndInit(self: ToolStripPanel) """
        ...

    def Join(self, toolStripToDrag:ToolStrip, *__args:Point): # -> 
        """ Join(self: ToolStripPanel, toolStripToDrag: ToolStrip, location: Point)Join(self: ToolStripPanel, toolStripToDrag: ToolStrip)Join(self: ToolStripPanel, toolStripToDrag: ToolStrip, row: int)Join(self: ToolStripPanel, toolStripToDrag: ToolStrip, x: int, y: int) """
        ...

    def OnRendererChanged(self, *args): #cannot find CLR method
        """ OnRendererChanged(self: ToolStripPanel, e: EventArgs) """
        ...

    def PointToRow(self, clientLocation:Point): # -> ToolStripPanelRow
        """ PointToRow(self: ToolStripPanel, clientLocation: Point) -> ToolStripPanelRow """
        ...

    def ToolStripPanelRowCollection(self, *args): #cannot find CLR method
        """
        ToolStripPanelRowCollection(owner: ToolStripPanel)
        ToolStripPanelRowCollection(owner: ToolStripPanel, value: Array[ToolStripPanelRow])
        """
        ...

    AutoSizeChanged = ...
    RendererChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    TextChanged = ...


class ToolStripPanelRenderEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ ToolStripPanelRenderEventArgs(g: Graphics, toolStripPanel: ToolStripPanel) """
    @property
    def Graphics(self) -> Graphics:
        """ Get: Graphics(self: ToolStripPanelRenderEventArgs) -> Graphics """
        ...

    @property
    def Handled(self) -> bool:
        """
        Get: Handled(self: ToolStripPanelRenderEventArgs) -> bool
        Set: Handled(self: ToolStripPanelRenderEventArgs) = value
        """
        ...

    @property
    def ToolStripPanel(self) -> ToolStripPanel:
        """ Get: ToolStripPanel(self: ToolStripPanelRenderEventArgs) -> ToolStripPanel """
        ...


    def __new__(cls, g:Graphics, toolStripPanel:ToolStripPanel) -> Self:
        """ __new__(cls: type, g: Graphics, toolStripPanel: ToolStripPanel) """
        ...


class ToolStripPanelRenderEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ToolStripPanelRenderEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ToolStripPanelRenderEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ToolStripPanelRenderEventHandler, sender: object, e: ToolStripPanelRenderEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ToolStripPanelRenderEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ToolStripPanelRenderEventArgs): # -> 
        """ Invoke(self: ToolStripPanelRenderEventHandler, sender: object, e: ToolStripPanelRenderEventArgs) """
        ...


class ToolStripPanelRow(IArrangedElement, Component): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """ ToolStripPanelRow(parent: ToolStripPanel) """
    @property
    def Bounds(self) -> Rectangle:
        """ Get: Bounds(self: ToolStripPanelRow) -> Rectangle """
        ...

    @property
    def Controls(self) -> Array:
        """ Get: Controls(self: ToolStripPanelRow) -> Array[Control] """
        ...

    @property
    def DefaultMargin(self):
        ...

    @property
    def DefaultPadding(self):
        ...

    @property
    def DisplayRectangle(self) -> Rectangle:
        """ Get: DisplayRectangle(self: ToolStripPanelRow) -> Rectangle """
        ...

    @property
    def LayoutEngine(self) -> LayoutEngine:
        """ Get: LayoutEngine(self: ToolStripPanelRow) -> LayoutEngine """
        ...

    @property
    def Margin(self) -> Padding:
        """
        Get: Margin(self: ToolStripPanelRow) -> Padding
        Set: Margin(self: ToolStripPanelRow) = value
        """
        ...

    @property
    def Orientation(self) -> Orientation:
        """ Get: Orientation(self: ToolStripPanelRow) -> Orientation """
        ...

    @property
    def Padding(self) -> Padding:
        """
        Get: Padding(self: ToolStripPanelRow) -> Padding
        Set: Padding(self: ToolStripPanelRow) = value
        """
        ...

    @property
    def ToolStripPanel(self) -> ToolStripPanel:
        """ Get: ToolStripPanel(self: ToolStripPanelRow) -> ToolStripPanel """
        ...


    def CanMove(self, toolStripToDrag:ToolStrip) -> bool:
        """ CanMove(self: ToolStripPanelRow, toolStripToDrag: ToolStrip) -> bool """
        ...

    def OnBoundsChanged(self, *args): #cannot find CLR method
        """ OnBoundsChanged(self: ToolStripPanelRow, oldBounds: Rectangle, newBounds: Rectangle) """
        ...

    def OnControlAdded(self, *args): #cannot find CLR method
        """ OnControlAdded(self: ToolStripPanelRow, control: Control, index: int) """
        ...

    def OnControlRemoved(self, *args): #cannot find CLR method
        """ OnControlRemoved(self: ToolStripPanelRow, control: Control, index: int) """
        ...

    def OnLayout(self, *args): #cannot find CLR method
        """ OnLayout(self: ToolStripPanelRow, e: LayoutEventArgs) """
        ...

    def OnOrientationChanged(self, *args): #cannot find CLR method
        """ OnOrientationChanged(self: ToolStripPanelRow) """
        ...

    def __new__(cls, parent:ToolStripPanel) -> Self:
        """ __new__(cls: type, parent: ToolStripPanel) """
        ...


class ToolStripRenderer: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @staticmethod
    def CreateDisabledImage(normalImage:Image) -> Image:
        """ CreateDisabledImage(normalImage: Image) -> Image """
        ...

    def DrawArrow(self, e:ToolStripArrowRenderEventArgs): # -> 
        """ DrawArrow(self: ToolStripRenderer, e: ToolStripArrowRenderEventArgs) """
        ...

    def DrawButtonBackground(self, e:ToolStripItemRenderEventArgs): # -> 
        """ DrawButtonBackground(self: ToolStripRenderer, e: ToolStripItemRenderEventArgs) """
        ...

    def DrawDropDownButtonBackground(self, e:ToolStripItemRenderEventArgs): # -> 
        """ DrawDropDownButtonBackground(self: ToolStripRenderer, e: ToolStripItemRenderEventArgs) """
        ...

    def DrawGrip(self, e:ToolStripGripRenderEventArgs): # -> 
        """ DrawGrip(self: ToolStripRenderer, e: ToolStripGripRenderEventArgs) """
        ...

    def DrawImageMargin(self, e:ToolStripRenderEventArgs): # -> 
        """ DrawImageMargin(self: ToolStripRenderer, e: ToolStripRenderEventArgs) """
        ...

    def DrawItemBackground(self, e:ToolStripItemRenderEventArgs): # -> 
        """ DrawItemBackground(self: ToolStripRenderer, e: ToolStripItemRenderEventArgs) """
        ...

    def DrawItemCheck(self, e:ToolStripItemImageRenderEventArgs): # -> 
        """ DrawItemCheck(self: ToolStripRenderer, e: ToolStripItemImageRenderEventArgs) """
        ...

    def DrawItemImage(self, e:ToolStripItemImageRenderEventArgs): # -> 
        """ DrawItemImage(self: ToolStripRenderer, e: ToolStripItemImageRenderEventArgs) """
        ...

    def DrawItemText(self, e:ToolStripItemTextRenderEventArgs): # -> 
        """ DrawItemText(self: ToolStripRenderer, e: ToolStripItemTextRenderEventArgs) """
        ...

    def DrawLabelBackground(self, e:ToolStripItemRenderEventArgs): # -> 
        """ DrawLabelBackground(self: ToolStripRenderer, e: ToolStripItemRenderEventArgs) """
        ...

    def DrawMenuItemBackground(self, e:ToolStripItemRenderEventArgs): # -> 
        """ DrawMenuItemBackground(self: ToolStripRenderer, e: ToolStripItemRenderEventArgs) """
        ...

    def DrawOverflowButtonBackground(self, e:ToolStripItemRenderEventArgs): # -> 
        """ DrawOverflowButtonBackground(self: ToolStripRenderer, e: ToolStripItemRenderEventArgs) """
        ...

    def DrawSeparator(self, e): # ->  # Not found arg types: {'e': 'ToolStripSeparatorRenderEventArgs'}
        """ DrawSeparator(self: ToolStripRenderer, e: ToolStripSeparatorRenderEventArgs) """
        ...

    def DrawSplitButton(self, e:ToolStripItemRenderEventArgs): # -> 
        """ DrawSplitButton(self: ToolStripRenderer, e: ToolStripItemRenderEventArgs) """
        ...

    def DrawStatusStripSizingGrip(self, e:ToolStripRenderEventArgs): # -> 
        """ DrawStatusStripSizingGrip(self: ToolStripRenderer, e: ToolStripRenderEventArgs) """
        ...

    def DrawToolStripBackground(self, e:ToolStripRenderEventArgs): # -> 
        """ DrawToolStripBackground(self: ToolStripRenderer, e: ToolStripRenderEventArgs) """
        ...

    def DrawToolStripBorder(self, e:ToolStripRenderEventArgs): # -> 
        """ DrawToolStripBorder(self: ToolStripRenderer, e: ToolStripRenderEventArgs) """
        ...

    def DrawToolStripContentPanelBackground(self, e:ToolStripContentPanelRenderEventArgs): # -> 
        """ DrawToolStripContentPanelBackground(self: ToolStripRenderer, e: ToolStripContentPanelRenderEventArgs) """
        ...

    def DrawToolStripPanelBackground(self, e:ToolStripPanelRenderEventArgs): # -> 
        """ DrawToolStripPanelBackground(self: ToolStripRenderer, e: ToolStripPanelRenderEventArgs) """
        ...

    def DrawToolStripStatusLabelBackground(self, e:ToolStripItemRenderEventArgs): # -> 
        """ DrawToolStripStatusLabelBackground(self: ToolStripRenderer, e: ToolStripItemRenderEventArgs) """
        ...

    def Initialize(self, *args): #cannot find CLR method
        """ Initialize(self: ToolStripRenderer, toolStrip: ToolStrip) """
        ...

    def InitializeContentPanel(self, *args): #cannot find CLR method
        """ InitializeContentPanel(self: ToolStripRenderer, contentPanel: ToolStripContentPanel) """
        ...

    def InitializeItem(self, *args): #cannot find CLR method
        """ InitializeItem(self: ToolStripRenderer, item: ToolStripItem) """
        ...

    def InitializePanel(self, *args): #cannot find CLR method
        """ InitializePanel(self: ToolStripRenderer, toolStripPanel: ToolStripPanel) """
        ...

    def OnRenderArrow(self, *args): #cannot find CLR method
        """ OnRenderArrow(self: ToolStripRenderer, e: ToolStripArrowRenderEventArgs) """
        ...

    def OnRenderButtonBackground(self, *args): #cannot find CLR method
        """ OnRenderButtonBackground(self: ToolStripRenderer, e: ToolStripItemRenderEventArgs) """
        ...

    def OnRenderDropDownButtonBackground(self, *args): #cannot find CLR method
        """ OnRenderDropDownButtonBackground(self: ToolStripRenderer, e: ToolStripItemRenderEventArgs) """
        ...

    def OnRenderGrip(self, *args): #cannot find CLR method
        """ OnRenderGrip(self: ToolStripRenderer, e: ToolStripGripRenderEventArgs) """
        ...

    def OnRenderImageMargin(self, *args): #cannot find CLR method
        """ OnRenderImageMargin(self: ToolStripRenderer, e: ToolStripRenderEventArgs) """
        ...

    def OnRenderItemBackground(self, *args): #cannot find CLR method
        """ OnRenderItemBackground(self: ToolStripRenderer, e: ToolStripItemRenderEventArgs) """
        ...

    def OnRenderItemCheck(self, *args): #cannot find CLR method
        """ OnRenderItemCheck(self: ToolStripRenderer, e: ToolStripItemImageRenderEventArgs) """
        ...

    def OnRenderItemImage(self, *args): #cannot find CLR method
        """ OnRenderItemImage(self: ToolStripRenderer, e: ToolStripItemImageRenderEventArgs) """
        ...

    def OnRenderItemText(self, *args): #cannot find CLR method
        """ OnRenderItemText(self: ToolStripRenderer, e: ToolStripItemTextRenderEventArgs) """
        ...

    def OnRenderLabelBackground(self, *args): #cannot find CLR method
        """ OnRenderLabelBackground(self: ToolStripRenderer, e: ToolStripItemRenderEventArgs) """
        ...

    def OnRenderMenuItemBackground(self, *args): #cannot find CLR method
        """ OnRenderMenuItemBackground(self: ToolStripRenderer, e: ToolStripItemRenderEventArgs) """
        ...

    def OnRenderOverflowButtonBackground(self, *args): #cannot find CLR method
        """ OnRenderOverflowButtonBackground(self: ToolStripRenderer, e: ToolStripItemRenderEventArgs) """
        ...

    def OnRenderSeparator(self, *args): #cannot find CLR method
        """ OnRenderSeparator(self: ToolStripRenderer, e: ToolStripSeparatorRenderEventArgs) """
        ...

    def OnRenderSplitButtonBackground(self, *args): #cannot find CLR method
        """ OnRenderSplitButtonBackground(self: ToolStripRenderer, e: ToolStripItemRenderEventArgs) """
        ...

    def OnRenderStatusStripSizingGrip(self, *args): #cannot find CLR method
        """ OnRenderStatusStripSizingGrip(self: ToolStripRenderer, e: ToolStripRenderEventArgs) """
        ...

    def OnRenderToolStripBackground(self, *args): #cannot find CLR method
        """ OnRenderToolStripBackground(self: ToolStripRenderer, e: ToolStripRenderEventArgs) """
        ...

    def OnRenderToolStripBorder(self, *args): #cannot find CLR method
        """ OnRenderToolStripBorder(self: ToolStripRenderer, e: ToolStripRenderEventArgs) """
        ...

    def OnRenderToolStripContentPanelBackground(self, *args): #cannot find CLR method
        """ OnRenderToolStripContentPanelBackground(self: ToolStripRenderer, e: ToolStripContentPanelRenderEventArgs) """
        ...

    def OnRenderToolStripPanelBackground(self, *args): #cannot find CLR method
        """ OnRenderToolStripPanelBackground(self: ToolStripRenderer, e: ToolStripPanelRenderEventArgs) """
        ...

    def OnRenderToolStripStatusLabelBackground(self, *args): #cannot find CLR method
        """ OnRenderToolStripStatusLabelBackground(self: ToolStripRenderer, e: ToolStripItemRenderEventArgs) """
        ...

    def ScaleArrowOffsetsIfNeeded(self, *args): #cannot find CLR method
        """ ScaleArrowOffsetsIfNeeded()ScaleArrowOffsetsIfNeeded(dpi: int) """
        ...

    Offset2X: int = ...
    Offset2Y: int = ...
    RenderArrow = ...
    RenderButtonBackground = ...
    RenderDropDownButtonBackground = ...
    RenderGrip = ...
    RenderImageMargin = ...
    RenderItemBackground = ...
    RenderItemCheck = ...
    RenderItemImage = ...
    RenderItemText = ...
    RenderLabelBackground = ...
    RenderMenuItemBackground = ...
    RenderOverflowButtonBackground = ...
    RenderSeparator = ...
    RenderSplitButtonBackground = ...
    RenderStatusStripSizingGrip = ...
    RenderToolStripBackground = ...
    RenderToolStripBorder = ...
    RenderToolStripContentPanelBackground = ...
    RenderToolStripPanelBackground = ...
    RenderToolStripStatusLabelBackground = ...


class ToolStripProfessionalRenderer(ToolStripRenderer): # skipped bases: <type 'object'>
    """
    ToolStripProfessionalRenderer()
    ToolStripProfessionalRenderer(professionalColorTable: ProfessionalColorTable)
    """
    @property
    def ColorTable(self) -> ProfessionalColorTable:
        """ Get: ColorTable(self: ToolStripProfessionalRenderer) -> ProfessionalColorTable """
        ...

    @property
    def RoundedEdges(self) -> bool:
        """
        Get: RoundedEdges(self: ToolStripProfessionalRenderer) -> bool
        Set: RoundedEdges(self: ToolStripProfessionalRenderer) = value
        """
        ...


    def __new__(cls, professionalColorTable:ProfessionalColorTable = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, professionalColorTable: ProfessionalColorTable)
        """
        ...


class ToolStripProgressBar(ToolStripControlHost): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'IDropTarget'>, <type 'IArrangedElement'>, <type 'ISupportOleDropSource'>, <type 'IKeyboardToolTip'>, <type 'object'>
    """
    ToolStripProgressBar()
    ToolStripProgressBar(name: str)
    """
    @property
    def MarqueeAnimationSpeed(self) -> int:
        """
        Get: MarqueeAnimationSpeed(self: ToolStripProgressBar) -> int
        Set: MarqueeAnimationSpeed(self: ToolStripProgressBar) = value
        """
        ...

    @property
    def Maximum(self) -> int:
        """
        Get: Maximum(self: ToolStripProgressBar) -> int
        Set: Maximum(self: ToolStripProgressBar) = value
        """
        ...

    @property
    def Minimum(self) -> int:
        """
        Get: Minimum(self: ToolStripProgressBar) -> int
        Set: Minimum(self: ToolStripProgressBar) = value
        """
        ...

    @property
    def ProgressBar(self) -> ProgressBar:
        """ Get: ProgressBar(self: ToolStripProgressBar) -> ProgressBar """
        ...

    @property
    def RightToLeftLayout(self) -> bool:
        """
        Get: RightToLeftLayout(self: ToolStripProgressBar) -> bool
        Set: RightToLeftLayout(self: ToolStripProgressBar) = value
        """
        ...

    @property
    def Step(self) -> int:
        """
        Get: Step(self: ToolStripProgressBar) -> int
        Set: Step(self: ToolStripProgressBar) = value
        """
        ...

    @property
    def Style(self) -> ProgressBarStyle:
        """
        Get: Style(self: ToolStripProgressBar) -> ProgressBarStyle
        Set: Style(self: ToolStripProgressBar) = value
        """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: ToolStripProgressBar) -> int
        Set: Value(self: ToolStripProgressBar) = value
        """
        ...


    def Increment(self, value:int): # -> 
        """ Increment(self: ToolStripProgressBar, value: int) """
        ...

    def OnRightToLeftLayoutChanged(self, *args): #cannot find CLR method
        """ OnRightToLeftLayoutChanged(self: ToolStripProgressBar, e: EventArgs) """
        ...

    def PerformStep(self): # -> 
        """ PerformStep(self: ToolStripProgressBar) """
        ...

    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    LocationChanged = ...
    OwnerChanged = ...
    RightToLeftLayoutChanged = ...
    TextChanged = ...
    Validated = ...
    Validating = ...


class ToolStripRenderEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ToolStripRenderEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ToolStripRenderEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ToolStripRenderEventHandler, sender: object, e: ToolStripRenderEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ToolStripRenderEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ToolStripRenderEventArgs): # -> 
        """ Invoke(self: ToolStripRenderEventHandler, sender: object, e: ToolStripRenderEventArgs) """
        ...


class ToolStripRenderMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ToolStripRenderMode, values: Custom (0), ManagerRenderMode (3), Professional (2), System (1) """
    Custom: ToolStripRenderMode = ...
    ManagerRenderMode: ToolStripRenderMode = ...
    Professional: ToolStripRenderMode = ...
    System: ToolStripRenderMode = ...
    value__ = ...


class ToolStripSeparator(ToolStripItem): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'IDropTarget'>, <type 'IArrangedElement'>, <type 'ISupportOleDropSource'>, <type 'IKeyboardToolTip'>, <type 'object'>
    """ ToolStripSeparator() """
    DisplayStyleChanged = ...
    EnabledChanged = ...
    TextChanged = ...


class ToolStripSeparatorRenderEventArgs(ToolStripItemRenderEventArgs): # skipped bases: <type 'object'>
    """ ToolStripSeparatorRenderEventArgs(g: Graphics, separator: ToolStripSeparator, vertical: bool) """
    @property
    def Vertical(self) -> bool:
        """ Get: Vertical(self: ToolStripSeparatorRenderEventArgs) -> bool """
        ...



class ToolStripSeparatorRenderEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ToolStripSeparatorRenderEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ToolStripSeparatorRenderEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ToolStripSeparatorRenderEventHandler, sender: object, e: ToolStripSeparatorRenderEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ToolStripSeparatorRenderEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ToolStripSeparatorRenderEventArgs): # -> 
        """ Invoke(self: ToolStripSeparatorRenderEventHandler, sender: object, e: ToolStripSeparatorRenderEventArgs) """
        ...


class ToolStripSplitButton(ToolStripDropDownItem): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'IDropTarget'>, <type 'IArrangedElement'>, <type 'ISupportOleDropSource'>, <type 'IKeyboardToolTip'>, <type 'object'>
    """
    ToolStripSplitButton()
    ToolStripSplitButton(text: str)
    ToolStripSplitButton(image: Image)
    ToolStripSplitButton(text: str, image: Image)
    ToolStripSplitButton(text: str, image: Image, onClick: EventHandler)
    ToolStripSplitButton(text: str, image: Image, onClick: EventHandler, name: str)
    ToolStripSplitButton(text: str, image: Image, *dropDownItems: Array[ToolStripItem])
    """
    @property
    def AutoToolTip(self) -> bool:
        """
        Get: AutoToolTip(self: ToolStripSplitButton) -> bool
        Set: AutoToolTip(self: ToolStripSplitButton) = value
        """
        ...

    @property
    def ButtonBounds(self) -> Rectangle:
        """ Get: ButtonBounds(self: ToolStripSplitButton) -> Rectangle """
        ...

    @property
    def ButtonPressed(self) -> bool:
        """ Get: ButtonPressed(self: ToolStripSplitButton) -> bool """
        ...

    @property
    def ButtonSelected(self) -> bool:
        """ Get: ButtonSelected(self: ToolStripSplitButton) -> bool """
        ...

    @property
    def DefaultItem(self) -> ToolStripItem:
        """
        Get: DefaultItem(self: ToolStripSplitButton) -> ToolStripItem
        Set: DefaultItem(self: ToolStripSplitButton) = value
        """
        ...

    @property
    def DropDownButtonBounds(self) -> Rectangle:
        """ Get: DropDownButtonBounds(self: ToolStripSplitButton) -> Rectangle """
        ...

    @property
    def DropDownButtonPressed(self) -> bool:
        """ Get: DropDownButtonPressed(self: ToolStripSplitButton) -> bool """
        ...

    @property
    def DropDownButtonSelected(self) -> bool:
        """ Get: DropDownButtonSelected(self: ToolStripSplitButton) -> bool """
        ...

    @property
    def DropDownButtonWidth(self) -> int:
        """
        Get: DropDownButtonWidth(self: ToolStripSplitButton) -> int
        Set: DropDownButtonWidth(self: ToolStripSplitButton) = value
        """
        ...

    @property
    def SplitterBounds(self) -> Rectangle:
        """ Get: SplitterBounds(self: ToolStripSplitButton) -> Rectangle """
        ...


    def GetPreferredSize(self, constrainingSize:Size) -> Size:
        """ GetPreferredSize(self: ToolStripSplitButton, constrainingSize: Size) -> Size """
        ...

    def OnButtonClick(self, *args): #cannot find CLR method
        """ OnButtonClick(self: ToolStripSplitButton, e: EventArgs) """
        ...

    def OnButtonDoubleClick(self, e:EventArgs): # -> 
        """ OnButtonDoubleClick(self: ToolStripSplitButton, e: EventArgs) """
        ...

    def OnDefaultItemChanged(self, *args): #cannot find CLR method
        """ OnDefaultItemChanged(self: ToolStripSplitButton, e: EventArgs) """
        ...

    def PerformButtonClick(self): # -> 
        """ PerformButtonClick(self: ToolStripSplitButton) """
        ...

    def ResetDropDownButtonWidth(self): # -> 
        """ ResetDropDownButtonWidth(self: ToolStripSplitButton) """
        ...

    def ToolStripSplitButtonAccessibleObject(self, *args): #cannot find CLR method
        """ ToolStripSplitButtonAccessibleObject(item: ToolStripSplitButton) """
        ...

    ButtonClick = ...
    ButtonDoubleClick = ...
    DefaultItemChanged = ...


class ToolStripStatusLabel(ToolStripLabel, IAutomationLiveRegion): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'IDropTarget'>, <type 'IArrangedElement'>, <type 'ISupportOleDropSource'>, <type 'IKeyboardToolTip'>, <type 'object'>
    """
    ToolStripStatusLabel()
    ToolStripStatusLabel(text: str)
    ToolStripStatusLabel(image: Image)
    ToolStripStatusLabel(text: str, image: Image)
    ToolStripStatusLabel(text: str, image: Image, onClick: EventHandler)
    ToolStripStatusLabel(text: str, image: Image, onClick: EventHandler, name: str)
    """
    @property
    def Alignment(self) -> ToolStripItemAlignment:
        """
        Get: Alignment(self: ToolStripStatusLabel) -> ToolStripItemAlignment
        Set: Alignment(self: ToolStripStatusLabel) = value
        """
        ...

    @property
    def BorderSides(self): # -> ToolStripStatusLabelBorderSides
        """
        Get: BorderSides(self: ToolStripStatusLabel) -> ToolStripStatusLabelBorderSides
        Set: BorderSides(self: ToolStripStatusLabel) = value
        """
        ...

    @property
    def BorderStyle(self) -> Border3DStyle:
        """
        Get: BorderStyle(self: ToolStripStatusLabel) -> Border3DStyle
        Set: BorderStyle(self: ToolStripStatusLabel) = value
        """
        ...

    @property
    def Spring(self) -> bool:
        """
        Get: Spring(self: ToolStripStatusLabel) -> bool
        Set: Spring(self: ToolStripStatusLabel) = value
        """
        ...


    def GetPreferredSize(self, constrainingSize:Size) -> Size:
        """ GetPreferredSize(self: ToolStripStatusLabel, constrainingSize: Size) -> Size """
        ...


class ToolStripStatusLabelBorderSides(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) ToolStripStatusLabelBorderSides, values: All (15), Bottom (8), Left (1), None (0), Right (4), Top (2) """
    All: ToolStripStatusLabelBorderSides = ...
    Bottom: ToolStripStatusLabelBorderSides = ...
    Left: ToolStripStatusLabelBorderSides = ...
    Right: ToolStripStatusLabelBorderSides = ...
    Top: ToolStripStatusLabelBorderSides = ...
    value__ = ...


class ToolStripSystemRenderer(ToolStripRenderer): # skipped bases: <type 'object'>
    """ ToolStripSystemRenderer() """
    pass

class ToolStripTextBox(ToolStripControlHost): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'IDropTarget'>, <type 'IArrangedElement'>, <type 'ISupportOleDropSource'>, <type 'IKeyboardToolTip'>, <type 'object'>
    """
    ToolStripTextBox()
    ToolStripTextBox(name: str)
    ToolStripTextBox(c: Control)
    """
    @property
    def AcceptsReturn(self) -> bool:
        """
        Get: AcceptsReturn(self: ToolStripTextBox) -> bool
        Set: AcceptsReturn(self: ToolStripTextBox) = value
        """
        ...

    @property
    def AcceptsTab(self) -> bool:
        """
        Get: AcceptsTab(self: ToolStripTextBox) -> bool
        Set: AcceptsTab(self: ToolStripTextBox) = value
        """
        ...

    @property
    def AutoCompleteCustomSource(self) -> AutoCompleteStringCollection:
        """
        Get: AutoCompleteCustomSource(self: ToolStripTextBox) -> AutoCompleteStringCollection
        Set: AutoCompleteCustomSource(self: ToolStripTextBox) = value
        """
        ...

    @property
    def AutoCompleteMode(self) -> AutoCompleteMode:
        """
        Get: AutoCompleteMode(self: ToolStripTextBox) -> AutoCompleteMode
        Set: AutoCompleteMode(self: ToolStripTextBox) = value
        """
        ...

    @property
    def AutoCompleteSource(self) -> AutoCompleteSource:
        """
        Get: AutoCompleteSource(self: ToolStripTextBox) -> AutoCompleteSource
        Set: AutoCompleteSource(self: ToolStripTextBox) = value
        """
        ...

    @property
    def BorderStyle(self) -> BorderStyle:
        """
        Get: BorderStyle(self: ToolStripTextBox) -> BorderStyle
        Set: BorderStyle(self: ToolStripTextBox) = value
        """
        ...

    @property
    def CanUndo(self) -> bool:
        """ Get: CanUndo(self: ToolStripTextBox) -> bool """
        ...

    @property
    def CharacterCasing(self) -> CharacterCasing:
        """
        Get: CharacterCasing(self: ToolStripTextBox) -> CharacterCasing
        Set: CharacterCasing(self: ToolStripTextBox) = value
        """
        ...

    @property
    def HideSelection(self) -> bool:
        """
        Get: HideSelection(self: ToolStripTextBox) -> bool
        Set: HideSelection(self: ToolStripTextBox) = value
        """
        ...

    @property
    def Lines(self) -> Array:
        """
        Get: Lines(self: ToolStripTextBox) -> Array[str]
        Set: Lines(self: ToolStripTextBox) = value
        """
        ...

    @property
    def MaxLength(self) -> int:
        """
        Get: MaxLength(self: ToolStripTextBox) -> int
        Set: MaxLength(self: ToolStripTextBox) = value
        """
        ...

    @property
    def Modified(self) -> bool:
        """
        Get: Modified(self: ToolStripTextBox) -> bool
        Set: Modified(self: ToolStripTextBox) = value
        """
        ...

    @property
    def Multiline(self) -> bool:
        """
        Get: Multiline(self: ToolStripTextBox) -> bool
        Set: Multiline(self: ToolStripTextBox) = value
        """
        ...

    @property
    def ReadOnly(self) -> bool:
        """
        Get: ReadOnly(self: ToolStripTextBox) -> bool
        Set: ReadOnly(self: ToolStripTextBox) = value
        """
        ...

    @property
    def SelectedText(self) -> str:
        """
        Get: SelectedText(self: ToolStripTextBox) -> str
        Set: SelectedText(self: ToolStripTextBox) = value
        """
        ...

    @property
    def SelectionLength(self) -> int:
        """
        Get: SelectionLength(self: ToolStripTextBox) -> int
        Set: SelectionLength(self: ToolStripTextBox) = value
        """
        ...

    @property
    def SelectionStart(self) -> int:
        """
        Get: SelectionStart(self: ToolStripTextBox) -> int
        Set: SelectionStart(self: ToolStripTextBox) = value
        """
        ...

    @property
    def ShortcutsEnabled(self) -> bool:
        """
        Get: ShortcutsEnabled(self: ToolStripTextBox) -> bool
        Set: ShortcutsEnabled(self: ToolStripTextBox) = value
        """
        ...

    @property
    def TextBox(self) -> TextBox:
        """ Get: TextBox(self: ToolStripTextBox) -> TextBox """
        ...

    @property
    def TextBoxTextAlign(self) -> HorizontalAlignment:
        """
        Get: TextBoxTextAlign(self: ToolStripTextBox) -> HorizontalAlignment
        Set: TextBoxTextAlign(self: ToolStripTextBox) = value
        """
        ...

    @property
    def TextLength(self) -> int:
        """ Get: TextLength(self: ToolStripTextBox) -> int """
        ...

    @property
    def WordWrap(self) -> bool:
        """
        Get: WordWrap(self: ToolStripTextBox) -> bool
        Set: WordWrap(self: ToolStripTextBox) = value
        """
        ...


    def AppendText(self, text:str): # -> 
        """ AppendText(self: ToolStripTextBox, text: str) """
        ...

    def Clear(self): # -> 
        """ Clear(self: ToolStripTextBox) """
        ...

    def ClearUndo(self): # -> 
        """ ClearUndo(self: ToolStripTextBox) """
        ...

    def Copy(self): # -> 
        """ Copy(self: ToolStripTextBox) """
        ...

    def Cut(self): # -> 
        """ Cut(self: ToolStripTextBox) """
        ...

    def DeselectAll(self): # -> 
        """ DeselectAll(self: ToolStripTextBox) """
        ...

    def GetCharFromPosition(self, pt:Point) -> Char:
        """ GetCharFromPosition(self: ToolStripTextBox, pt: Point) -> Char """
        ...

    def GetCharIndexFromPosition(self, pt:Point) -> int:
        """ GetCharIndexFromPosition(self: ToolStripTextBox, pt: Point) -> int """
        ...

    def GetFirstCharIndexFromLine(self, lineNumber:int) -> int:
        """ GetFirstCharIndexFromLine(self: ToolStripTextBox, lineNumber: int) -> int """
        ...

    def GetFirstCharIndexOfCurrentLine(self) -> int:
        """ GetFirstCharIndexOfCurrentLine(self: ToolStripTextBox) -> int """
        ...

    def GetLineFromCharIndex(self, index:int) -> int:
        """ GetLineFromCharIndex(self: ToolStripTextBox, index: int) -> int """
        ...

    def GetPositionFromCharIndex(self, index:int) -> Point:
        """ GetPositionFromCharIndex(self: ToolStripTextBox, index: int) -> Point """
        ...

    def OnAcceptsTabChanged(self, *args): #cannot find CLR method
        """ OnAcceptsTabChanged(self: ToolStripTextBox, e: EventArgs) """
        ...

    def OnBorderStyleChanged(self, *args): #cannot find CLR method
        """ OnBorderStyleChanged(self: ToolStripTextBox, e: EventArgs) """
        ...

    def OnHideSelectionChanged(self, *args): #cannot find CLR method
        """ OnHideSelectionChanged(self: ToolStripTextBox, e: EventArgs) """
        ...

    def OnModifiedChanged(self, *args): #cannot find CLR method
        """ OnModifiedChanged(self: ToolStripTextBox, e: EventArgs) """
        ...

    def OnMultilineChanged(self, *args): #cannot find CLR method
        """ OnMultilineChanged(self: ToolStripTextBox, e: EventArgs) """
        ...

    def OnReadOnlyChanged(self, *args): #cannot find CLR method
        """ OnReadOnlyChanged(self: ToolStripTextBox, e: EventArgs) """
        ...

    def Paste(self): # -> 
        """ Paste(self: ToolStripTextBox) """
        ...

    def ScrollToCaret(self): # -> 
        """ ScrollToCaret(self: ToolStripTextBox) """
        ...

    def Select(self, start:int = ..., length:int = ...): # -> 
        """ Select(self: ToolStripTextBox, start: int, length: int) """
        ...

    def SelectAll(self): # -> 
        """ SelectAll(self: ToolStripTextBox) """
        ...

    def Undo(self): # -> 
        """ Undo(self: ToolStripTextBox) """
        ...

    AcceptsTabChanged = ...
    BorderStyleChanged = ...
    HideSelectionChanged = ...
    ModifiedChanged = ...
    MultilineChanged = ...
    ReadOnlyChanged = ...
    TextBoxTextAlignChanged = ...


class ToolStripTextDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ToolStripTextDirection, values: Horizontal (1), Inherit (0), Vertical270 (3), Vertical90 (2) """
    Horizontal: ToolStripTextDirection = ...
    Inherit: ToolStripTextDirection = ...
    value__ = ...
    Vertical270: ToolStripTextDirection = ...
    Vertical90: ToolStripTextDirection = ...


class ToolTip(IExtenderProvider, Component): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """
    ToolTip(cont: IContainer)
    ToolTip()
    """
    @property
    def Active(self) -> bool:
        """
        Get: Active(self: ToolTip) -> bool
        Set: Active(self: ToolTip) = value
        """
        ...

    @property
    def AutomaticDelay(self) -> int:
        """
        Get: AutomaticDelay(self: ToolTip) -> int
        Set: AutomaticDelay(self: ToolTip) = value
        """
        ...

    @property
    def AutoPopDelay(self) -> int:
        """
        Get: AutoPopDelay(self: ToolTip) -> int
        Set: AutoPopDelay(self: ToolTip) = value
        """
        ...

    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: ToolTip) -> Color
        Set: BackColor(self: ToolTip) = value
        """
        ...

    @property
    def CreateParams(self):
        ...

    @property
    def ForeColor(self) -> Color:
        """
        Get: ForeColor(self: ToolTip) -> Color
        Set: ForeColor(self: ToolTip) = value
        """
        ...

    @property
    def InitialDelay(self) -> int:
        """
        Get: InitialDelay(self: ToolTip) -> int
        Set: InitialDelay(self: ToolTip) = value
        """
        ...

    @property
    def IsBalloon(self) -> bool:
        """
        Get: IsBalloon(self: ToolTip) -> bool
        Set: IsBalloon(self: ToolTip) = value
        """
        ...

    @property
    def OwnerDraw(self) -> bool:
        """
        Get: OwnerDraw(self: ToolTip) -> bool
        Set: OwnerDraw(self: ToolTip) = value
        """
        ...

    @property
    def ReshowDelay(self) -> int:
        """
        Get: ReshowDelay(self: ToolTip) -> int
        Set: ReshowDelay(self: ToolTip) = value
        """
        ...

    @property
    def ShowAlways(self) -> bool:
        """
        Get: ShowAlways(self: ToolTip) -> bool
        Set: ShowAlways(self: ToolTip) = value
        """
        ...

    @property
    def StripAmpersands(self) -> bool:
        """
        Get: StripAmpersands(self: ToolTip) -> bool
        Set: StripAmpersands(self: ToolTip) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: ToolTip) -> object
        Set: Tag(self: ToolTip) = value
        """
        ...

    @property
    def ToolTipIcon(self): # -> ToolTipIcon
        """
        Get: ToolTipIcon(self: ToolTip) -> ToolTipIcon
        Set: ToolTipIcon(self: ToolTip) = value
        """
        ...

    @property
    def ToolTipTitle(self) -> str:
        """
        Get: ToolTipTitle(self: ToolTip) -> str
        Set: ToolTipTitle(self: ToolTip) = value
        """
        ...

    @property
    def UseAnimation(self) -> bool:
        """
        Get: UseAnimation(self: ToolTip) -> bool
        Set: UseAnimation(self: ToolTip) = value
        """
        ...

    @property
    def UseFading(self) -> bool:
        """
        Get: UseFading(self: ToolTip) -> bool
        Set: UseFading(self: ToolTip) = value
        """
        ...


    def GetToolTip(self, control:Control) -> str:
        """ GetToolTip(self: ToolTip, control: Control) -> str """
        ...

    def Hide(self, win:IWin32Window): # -> 
        """ Hide(self: ToolTip, win: IWin32Window) """
        ...

    def RemoveAll(self): # -> 
        """ RemoveAll(self: ToolTip) """
        ...

    def SetToolTip(self, control:Control, caption:str): # -> 
        """ SetToolTip(self: ToolTip, control: Control, caption: str) """
        ...

    def Show(self, text:str, window:IWin32Window, *__args:int): # -> 
        """ Show(self: ToolTip, text: str, window: IWin32Window)Show(self: ToolTip, text: str, window: IWin32Window, duration: int)Show(self: ToolTip, text: str, window: IWin32Window, point: Point)Show(self: ToolTip, text: str, window: IWin32Window, point: Point, duration: int)Show(self: ToolTip, text: str, window: IWin32Window, x: int, y: int)Show(self: ToolTip, text: str, window: IWin32Window, x: int, y: int, duration: int) """
        ...

    def StopTimer(self, *args): #cannot find CLR method
        """ StopTimer(self: ToolTip) """
        ...

    def __new__(cls, cont:IContainer = ...) -> Self:
        """
        __new__(cls: type, cont: IContainer)
        __new__(cls: type)
        """
        ...

    Draw = ...
    Popup = ...


class ToolTipIcon(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ToolTipIcon, values: Error (3), Info (1), None (0), Warning (2) """
    Error: ToolTipIcon = ...
    Info: ToolTipIcon = ...
    value__ = ...
    Warning: ToolTipIcon = ...


class TrackBar(Control, ISupportInitialize): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ TrackBar() """
    @property
    def LargeChange(self) -> int:
        """
        Get: LargeChange(self: TrackBar) -> int
        Set: LargeChange(self: TrackBar) = value
        """
        ...

    @property
    def Maximum(self) -> int:
        """
        Get: Maximum(self: TrackBar) -> int
        Set: Maximum(self: TrackBar) = value
        """
        ...

    @property
    def Minimum(self) -> int:
        """
        Get: Minimum(self: TrackBar) -> int
        Set: Minimum(self: TrackBar) = value
        """
        ...

    @property
    def Orientation(self) -> Orientation:
        """
        Get: Orientation(self: TrackBar) -> Orientation
        Set: Orientation(self: TrackBar) = value
        """
        ...

    @property
    def RightToLeftLayout(self) -> bool:
        """
        Get: RightToLeftLayout(self: TrackBar) -> bool
        Set: RightToLeftLayout(self: TrackBar) = value
        """
        ...

    @property
    def SmallChange(self) -> int:
        """
        Get: SmallChange(self: TrackBar) -> int
        Set: SmallChange(self: TrackBar) = value
        """
        ...

    @property
    def TickFrequency(self) -> int:
        """
        Get: TickFrequency(self: TrackBar) -> int
        Set: TickFrequency(self: TrackBar) = value
        """
        ...

    @property
    def TickStyle(self) -> TickStyle:
        """
        Get: TickStyle(self: TrackBar) -> TickStyle
        Set: TickStyle(self: TrackBar) = value
        """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: TrackBar) -> int
        Set: Value(self: TrackBar) = value
        """
        ...


    def OnRightToLeftLayoutChanged(self, *args): #cannot find CLR method
        """ OnRightToLeftLayoutChanged(self: TrackBar, e: EventArgs) """
        ...

    def OnScroll(self, *args): #cannot find CLR method
        """ OnScroll(self: TrackBar, e: EventArgs) """
        ...

    def OnValueChanged(self, *args): #cannot find CLR method
        """ OnValueChanged(self: TrackBar, e: EventArgs) """
        ...

    def SetRange(self, minValue:int, maxValue:int): # -> 
        """ SetRange(self: TrackBar, minValue: int, maxValue: int) """
        ...

    def ToString(self) -> str:
        """ ToString(self: TrackBar) -> str """
        ...

    AutoSizeChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    Click = ...
    DoubleClick = ...
    FontChanged = ...
    ForeColorChanged = ...
    ImeModeChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    PaddingChanged = ...
    Paint = ...
    RightToLeftLayoutChanged = ...
    Scroll = ...
    TextChanged = ...
    ValueChanged = ...


class TrackBarRenderer: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def IsSupported(self) -> bool:
        """ Get: IsSupported() -> bool """
        ...


    @staticmethod
    def DrawBottomPointingThumb(g:Graphics, bounds:Rectangle, state:TrackBarThumbState): # -> 
        """ DrawBottomPointingThumb(g: Graphics, bounds: Rectangle, state: TrackBarThumbState) """
        ...

    @staticmethod
    def DrawHorizontalThumb(g:Graphics, bounds:Rectangle, state:TrackBarThumbState): # -> 
        """ DrawHorizontalThumb(g: Graphics, bounds: Rectangle, state: TrackBarThumbState) """
        ...

    @staticmethod
    def DrawHorizontalTicks(g:Graphics, bounds:Rectangle, numTicks:int, edgeStyle:EdgeStyle): # -> 
        """ DrawHorizontalTicks(g: Graphics, bounds: Rectangle, numTicks: int, edgeStyle: EdgeStyle) """
        ...

    @staticmethod
    def DrawHorizontalTrack(g:Graphics, bounds:Rectangle): # -> 
        """ DrawHorizontalTrack(g: Graphics, bounds: Rectangle) """
        ...

    @staticmethod
    def DrawLeftPointingThumb(g:Graphics, bounds:Rectangle, state:TrackBarThumbState): # -> 
        """ DrawLeftPointingThumb(g: Graphics, bounds: Rectangle, state: TrackBarThumbState) """
        ...

    @staticmethod
    def DrawRightPointingThumb(g:Graphics, bounds:Rectangle, state:TrackBarThumbState): # -> 
        """ DrawRightPointingThumb(g: Graphics, bounds: Rectangle, state: TrackBarThumbState) """
        ...

    @staticmethod
    def DrawTopPointingThumb(g:Graphics, bounds:Rectangle, state:TrackBarThumbState): # -> 
        """ DrawTopPointingThumb(g: Graphics, bounds: Rectangle, state: TrackBarThumbState) """
        ...

    @staticmethod
    def DrawVerticalThumb(g:Graphics, bounds:Rectangle, state:TrackBarThumbState): # -> 
        """ DrawVerticalThumb(g: Graphics, bounds: Rectangle, state: TrackBarThumbState) """
        ...

    @staticmethod
    def DrawVerticalTicks(g:Graphics, bounds:Rectangle, numTicks:int, edgeStyle:EdgeStyle): # -> 
        """ DrawVerticalTicks(g: Graphics, bounds: Rectangle, numTicks: int, edgeStyle: EdgeStyle) """
        ...

    @staticmethod
    def DrawVerticalTrack(g:Graphics, bounds:Rectangle): # -> 
        """ DrawVerticalTrack(g: Graphics, bounds: Rectangle) """
        ...

    @staticmethod
    def GetBottomPointingThumbSize(g:Graphics, state:TrackBarThumbState) -> Size:
        """ GetBottomPointingThumbSize(g: Graphics, state: TrackBarThumbState) -> Size """
        ...

    @staticmethod
    def GetLeftPointingThumbSize(g:Graphics, state:TrackBarThumbState) -> Size:
        """ GetLeftPointingThumbSize(g: Graphics, state: TrackBarThumbState) -> Size """
        ...

    @staticmethod
    def GetRightPointingThumbSize(g:Graphics, state:TrackBarThumbState) -> Size:
        """ GetRightPointingThumbSize(g: Graphics, state: TrackBarThumbState) -> Size """
        ...

    @staticmethod
    def GetTopPointingThumbSize(g:Graphics, state:TrackBarThumbState) -> Size:
        """ GetTopPointingThumbSize(g: Graphics, state: TrackBarThumbState) -> Size """
        ...



class TreeNode(ICloneable, MarshalByRefObject, ISerializable): # skipped bases: <type 'object'>
    """
    TreeNode()
    TreeNode(text: str)
    TreeNode(text: str, children: Array[TreeNode])
    TreeNode(text: str, imageIndex: int, selectedImageIndex: int)
    TreeNode(text: str, imageIndex: int, selectedImageIndex: int, children: Array[TreeNode])
    """
    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: TreeNode) -> Color
        Set: BackColor(self: TreeNode) = value
        """
        ...

    @property
    def Bounds(self) -> Rectangle:
        """ Get: Bounds(self: TreeNode) -> Rectangle """
        ...

    @property
    def Checked(self) -> bool:
        """
        Get: Checked(self: TreeNode) -> bool
        Set: Checked(self: TreeNode) = value
        """
        ...

    @property
    def ContextMenu(self) -> ContextMenu:
        """
        Get: ContextMenu(self: TreeNode) -> ContextMenu
        Set: ContextMenu(self: TreeNode) = value
        """
        ...

    @property
    def ContextMenuStrip(self) -> ContextMenuStrip:
        """
        Get: ContextMenuStrip(self: TreeNode) -> ContextMenuStrip
        Set: ContextMenuStrip(self: TreeNode) = value
        """
        ...

    @property
    def FirstNode(self) -> TreeNode:
        """ Get: FirstNode(self: TreeNode) -> TreeNode """
        ...

    @property
    def ForeColor(self) -> Color:
        """
        Get: ForeColor(self: TreeNode) -> Color
        Set: ForeColor(self: TreeNode) = value
        """
        ...

    @property
    def FullPath(self) -> str:
        """ Get: FullPath(self: TreeNode) -> str """
        ...

    @property
    def Handle(self) -> IntPtr:
        """ Get: Handle(self: TreeNode) -> IntPtr """
        ...

    @property
    def ImageIndex(self) -> int:
        """
        Get: ImageIndex(self: TreeNode) -> int
        Set: ImageIndex(self: TreeNode) = value
        """
        ...

    @property
    def ImageKey(self) -> str:
        """
        Get: ImageKey(self: TreeNode) -> str
        Set: ImageKey(self: TreeNode) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: TreeNode) -> int """
        ...

    @property
    def IsEditing(self) -> bool:
        """ Get: IsEditing(self: TreeNode) -> bool """
        ...

    @property
    def IsExpanded(self) -> bool:
        """ Get: IsExpanded(self: TreeNode) -> bool """
        ...

    @property
    def IsSelected(self) -> bool:
        """ Get: IsSelected(self: TreeNode) -> bool """
        ...

    @property
    def IsVisible(self) -> bool:
        """ Get: IsVisible(self: TreeNode) -> bool """
        ...

    @property
    def LastNode(self) -> TreeNode:
        """ Get: LastNode(self: TreeNode) -> TreeNode """
        ...

    @property
    def Level(self) -> int:
        """ Get: Level(self: TreeNode) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: TreeNode) -> str
        Set: Name(self: TreeNode) = value
        """
        ...

    @property
    def NextNode(self) -> TreeNode:
        """ Get: NextNode(self: TreeNode) -> TreeNode """
        ...

    @property
    def NextVisibleNode(self) -> TreeNode:
        """ Get: NextVisibleNode(self: TreeNode) -> TreeNode """
        ...

    @property
    def NodeFont(self) -> Font:
        """
        Get: NodeFont(self: TreeNode) -> Font
        Set: NodeFont(self: TreeNode) = value
        """
        ...

    @property
    def Nodes(self): # -> TreeNodeCollection
        """ Get: Nodes(self: TreeNode) -> TreeNodeCollection """
        ...

    @property
    def Parent(self) -> TreeNode:
        """ Get: Parent(self: TreeNode) -> TreeNode """
        ...

    @property
    def PrevNode(self) -> TreeNode:
        """ Get: PrevNode(self: TreeNode) -> TreeNode """
        ...

    @property
    def PrevVisibleNode(self) -> TreeNode:
        """ Get: PrevVisibleNode(self: TreeNode) -> TreeNode """
        ...

    @property
    def SelectedImageIndex(self) -> int:
        """
        Get: SelectedImageIndex(self: TreeNode) -> int
        Set: SelectedImageIndex(self: TreeNode) = value
        """
        ...

    @property
    def SelectedImageKey(self) -> str:
        """
        Get: SelectedImageKey(self: TreeNode) -> str
        Set: SelectedImageKey(self: TreeNode) = value
        """
        ...

    @property
    def StateImageIndex(self) -> int:
        """
        Get: StateImageIndex(self: TreeNode) -> int
        Set: StateImageIndex(self: TreeNode) = value
        """
        ...

    @property
    def StateImageKey(self) -> str:
        """
        Get: StateImageKey(self: TreeNode) -> str
        Set: StateImageKey(self: TreeNode) = value
        """
        ...

    @property
    def Tag(self) -> object:
        """
        Get: Tag(self: TreeNode) -> object
        Set: Tag(self: TreeNode) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: TreeNode) -> str
        Set: Text(self: TreeNode) = value
        """
        ...

    @property
    def ToolTipText(self) -> str:
        """
        Get: ToolTipText(self: TreeNode) -> str
        Set: ToolTipText(self: TreeNode) = value
        """
        ...

    @property
    def TreeView(self): # -> TreeView
        """ Get: TreeView(self: TreeNode) -> TreeView """
        ...


    def BeginEdit(self): # -> 
        """ BeginEdit(self: TreeNode) """
        ...

    def Collapse(self, ignoreChildren:bool = ...): # -> 
        """ Collapse(self: TreeNode, ignoreChildren: bool)Collapse(self: TreeNode) """
        ...

    def Deserialize(self, *args): #cannot find CLR method
        """ Deserialize(self: TreeNode, serializationInfo: SerializationInfo, context: StreamingContext) """
        ...

    def EndEdit(self, cancel:bool): # -> 
        """ EndEdit(self: TreeNode, cancel: bool) """
        ...

    def EnsureVisible(self): # -> 
        """ EnsureVisible(self: TreeNode) """
        ...

    def Expand(self): # -> 
        """ Expand(self: TreeNode) """
        ...

    def ExpandAll(self): # -> 
        """ ExpandAll(self: TreeNode) """
        ...

    @staticmethod
    def FromHandle(tree, handle:IntPtr) -> TreeNode: # Not found arg types: {'tree': 'TreeView'}
        """ FromHandle(tree: TreeView, handle: IntPtr) -> TreeNode """
        ...

    def GetNodeCount(self, includeSubTrees:bool) -> int:
        """ GetNodeCount(self: TreeNode, includeSubTrees: bool) -> int """
        ...

    def Remove(self): # -> 
        """ Remove(self: TreeNode) """
        ...

    def Serialize(self, *args): #cannot find CLR method
        """ Serialize(self: TreeNode, si: SerializationInfo, context: StreamingContext) """
        ...

    def Toggle(self): # -> 
        """ Toggle(self: TreeNode) """
        ...

    def ToString(self) -> str:
        """ ToString(self: TreeNode) -> str """
        ...

    def __new__(cls, text:str = ..., *__args:Array) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, text: str)
        __new__(cls: type, text: str, children: Array[TreeNode])
        __new__(cls: type, text: str, imageIndex: int, selectedImageIndex: int)
        __new__(cls: type, text: str, imageIndex: int, selectedImageIndex: int, children: Array[TreeNode])
        __new__(cls: type, serializationInfo: SerializationInfo, context: StreamingContext)
        """
        ...

    def __str__(self, *args): #cannot find CLR method
        ...


class TreeNodeCollection(IList): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Count(self) -> int:
        """ Get: Count(self: TreeNodeCollection) -> int """
        ...


    def AddRange(self, nodes:Array): # -> 
        """ AddRange(self: TreeNodeCollection, nodes: Array[TreeNode]) """
        ...

    def ContainsKey(self, key:str) -> bool:
        """ ContainsKey(self: TreeNodeCollection, key: str) -> bool """
        ...

    def CopyTo(self, dest:Array, index:int): # -> 
        """ CopyTo(self: TreeNodeCollection, dest: Array, index: int) """
        ...

    def Find(self, key:str, searchAllChildren:bool) -> Array:
        """ Find(self: TreeNodeCollection, key: str, searchAllChildren: bool) -> Array[TreeNode] """
        ...

    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: TreeNodeCollection) -> IEnumerator """
        ...

    def IndexOfKey(self, key:str) -> int:
        """ IndexOfKey(self: TreeNodeCollection, key: str) -> int """
        ...

    def RemoveByKey(self, key:str): # -> 
        """ RemoveByKey(self: TreeNodeCollection, key: str) """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ Contains(self: IList, value: object) -> bool """
        ...


class TreeNodeConverter(TypeConverter): # skipped bases: <type 'object'>
    """ TreeNodeConverter() """
    pass

class TreeNodeMouseClickEventArgs(MouseEventArgs): # skipped bases: <type 'object'>
    """ TreeNodeMouseClickEventArgs(node: TreeNode, button: MouseButtons, clicks: int, x: int, y: int) """
    @property
    def Node(self) -> TreeNode:
        """ Get: Node(self: TreeNodeMouseClickEventArgs) -> TreeNode """
        ...



class TreeNodeMouseClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ TreeNodeMouseClickEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:TreeNodeMouseClickEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: TreeNodeMouseClickEventHandler, sender: object, e: TreeNodeMouseClickEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: TreeNodeMouseClickEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:TreeNodeMouseClickEventArgs): # -> 
        """ Invoke(self: TreeNodeMouseClickEventHandler, sender: object, e: TreeNodeMouseClickEventArgs) """
        ...


class TreeNodeMouseHoverEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ TreeNodeMouseHoverEventArgs(node: TreeNode) """
    @property
    def Node(self) -> TreeNode:
        """ Get: Node(self: TreeNodeMouseHoverEventArgs) -> TreeNode """
        ...


    def __new__(cls, node:TreeNode) -> Self:
        """ __new__(cls: type, node: TreeNode) """
        ...


class TreeNodeMouseHoverEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ TreeNodeMouseHoverEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:TreeNodeMouseHoverEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: TreeNodeMouseHoverEventHandler, sender: object, e: TreeNodeMouseHoverEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: TreeNodeMouseHoverEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:TreeNodeMouseHoverEventArgs): # -> 
        """ Invoke(self: TreeNodeMouseHoverEventHandler, sender: object, e: TreeNodeMouseHoverEventArgs) """
        ...


class TreeNodeStates(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) TreeNodeStates, values: Checked (8), Default (32), Focused (16), Grayed (2), Hot (64), Indeterminate (256), Marked (128), Selected (1), ShowKeyboardCues (512) """
    Checked: TreeNodeStates = ...
    Default: TreeNodeStates = ...
    Focused: TreeNodeStates = ...
    Grayed: TreeNodeStates = ...
    Hot: TreeNodeStates = ...
    Indeterminate: TreeNodeStates = ...
    Marked: TreeNodeStates = ...
    Selected: TreeNodeStates = ...
    ShowKeyboardCues: TreeNodeStates = ...
    value__ = ...


class TreeView(Control): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ TreeView() """
    @property
    def BorderStyle(self) -> BorderStyle:
        """
        Get: BorderStyle(self: TreeView) -> BorderStyle
        Set: BorderStyle(self: TreeView) = value
        """
        ...

    @property
    def CheckBoxes(self) -> bool:
        """
        Get: CheckBoxes(self: TreeView) -> bool
        Set: CheckBoxes(self: TreeView) = value
        """
        ...

    @property
    def DrawMode(self): # -> TreeViewDrawMode
        """
        Get: DrawMode(self: TreeView) -> TreeViewDrawMode
        Set: DrawMode(self: TreeView) = value
        """
        ...

    @property
    def FullRowSelect(self) -> bool:
        """
        Get: FullRowSelect(self: TreeView) -> bool
        Set: FullRowSelect(self: TreeView) = value
        """
        ...

    @property
    def HideSelection(self) -> bool:
        """
        Get: HideSelection(self: TreeView) -> bool
        Set: HideSelection(self: TreeView) = value
        """
        ...

    @property
    def HotTracking(self) -> bool:
        """
        Get: HotTracking(self: TreeView) -> bool
        Set: HotTracking(self: TreeView) = value
        """
        ...

    @property
    def ImageIndex(self) -> int:
        """
        Get: ImageIndex(self: TreeView) -> int
        Set: ImageIndex(self: TreeView) = value
        """
        ...

    @property
    def ImageKey(self) -> str:
        """
        Get: ImageKey(self: TreeView) -> str
        Set: ImageKey(self: TreeView) = value
        """
        ...

    @property
    def ImageList(self) -> ImageList:
        """
        Get: ImageList(self: TreeView) -> ImageList
        Set: ImageList(self: TreeView) = value
        """
        ...

    @property
    def Indent(self) -> int:
        """
        Get: Indent(self: TreeView) -> int
        Set: Indent(self: TreeView) = value
        """
        ...

    @property
    def ItemHeight(self) -> int:
        """
        Get: ItemHeight(self: TreeView) -> int
        Set: ItemHeight(self: TreeView) = value
        """
        ...

    @property
    def LabelEdit(self) -> bool:
        """
        Get: LabelEdit(self: TreeView) -> bool
        Set: LabelEdit(self: TreeView) = value
        """
        ...

    @property
    def LineColor(self) -> Color:
        """
        Get: LineColor(self: TreeView) -> Color
        Set: LineColor(self: TreeView) = value
        """
        ...

    @property
    def Nodes(self) -> TreeNodeCollection:
        """ Get: Nodes(self: TreeView) -> TreeNodeCollection """
        ...

    @property
    def PathSeparator(self) -> str:
        """
        Get: PathSeparator(self: TreeView) -> str
        Set: PathSeparator(self: TreeView) = value
        """
        ...

    @property
    def RightToLeftLayout(self) -> bool:
        """
        Get: RightToLeftLayout(self: TreeView) -> bool
        Set: RightToLeftLayout(self: TreeView) = value
        """
        ...

    @property
    def Scrollable(self) -> bool:
        """
        Get: Scrollable(self: TreeView) -> bool
        Set: Scrollable(self: TreeView) = value
        """
        ...

    @property
    def SelectedImageIndex(self) -> int:
        """
        Get: SelectedImageIndex(self: TreeView) -> int
        Set: SelectedImageIndex(self: TreeView) = value
        """
        ...

    @property
    def SelectedImageKey(self) -> str:
        """
        Get: SelectedImageKey(self: TreeView) -> str
        Set: SelectedImageKey(self: TreeView) = value
        """
        ...

    @property
    def SelectedNode(self) -> TreeNode:
        """
        Get: SelectedNode(self: TreeView) -> TreeNode
        Set: SelectedNode(self: TreeView) = value
        """
        ...

    @property
    def ShowLines(self) -> bool:
        """
        Get: ShowLines(self: TreeView) -> bool
        Set: ShowLines(self: TreeView) = value
        """
        ...

    @property
    def ShowNodeToolTips(self) -> bool:
        """
        Get: ShowNodeToolTips(self: TreeView) -> bool
        Set: ShowNodeToolTips(self: TreeView) = value
        """
        ...

    @property
    def ShowPlusMinus(self) -> bool:
        """
        Get: ShowPlusMinus(self: TreeView) -> bool
        Set: ShowPlusMinus(self: TreeView) = value
        """
        ...

    @property
    def ShowRootLines(self) -> bool:
        """
        Get: ShowRootLines(self: TreeView) -> bool
        Set: ShowRootLines(self: TreeView) = value
        """
        ...

    @property
    def Sorted(self) -> bool:
        """
        Get: Sorted(self: TreeView) -> bool
        Set: Sorted(self: TreeView) = value
        """
        ...

    @property
    def StateImageList(self) -> ImageList:
        """
        Get: StateImageList(self: TreeView) -> ImageList
        Set: StateImageList(self: TreeView) = value
        """
        ...

    @property
    def TopNode(self) -> TreeNode:
        """
        Get: TopNode(self: TreeView) -> TreeNode
        Set: TopNode(self: TreeView) = value
        """
        ...

    @property
    def TreeViewNodeSorter(self) -> IComparer:
        """
        Get: TreeViewNodeSorter(self: TreeView) -> IComparer
        Set: TreeViewNodeSorter(self: TreeView) = value
        """
        ...

    @property
    def VisibleCount(self) -> int:
        """ Get: VisibleCount(self: TreeView) -> int """
        ...


    def BeginUpdate(self): # -> 
        """ BeginUpdate(self: TreeView) """
        ...

    def CollapseAll(self): # -> 
        """ CollapseAll(self: TreeView) """
        ...

    def EndUpdate(self): # -> 
        """ EndUpdate(self: TreeView) """
        ...

    def ExpandAll(self): # -> 
        """ ExpandAll(self: TreeView) """
        ...

    def GetItemRenderStyles(self, *args): #cannot find CLR method
        """ GetItemRenderStyles(self: TreeView, node: TreeNode, state: int) -> OwnerDrawPropertyBag """
        ...

    def GetNodeAt(self, *__args:Point) -> TreeNode:
        """
        GetNodeAt(self: TreeView, pt: Point) -> TreeNode
        GetNodeAt(self: TreeView, x: int, y: int) -> TreeNode
        """
        ...

    def GetNodeCount(self, includeSubTrees:bool) -> int:
        """ GetNodeCount(self: TreeView, includeSubTrees: bool) -> int """
        ...

    def HitTest(self, *__args:Point): # -> TreeViewHitTestInfo
        """
        HitTest(self: TreeView, pt: Point) -> TreeViewHitTestInfo
        HitTest(self: TreeView, x: int, y: int) -> TreeViewHitTestInfo
        """
        ...

    def OnAfterCheck(self, *args): #cannot find CLR method
        """ OnAfterCheck(self: TreeView, e: TreeViewEventArgs) """
        ...

    def OnAfterCollapse(self, *args): #cannot find CLR method
        """ OnAfterCollapse(self: TreeView, e: TreeViewEventArgs) """
        ...

    def OnAfterExpand(self, *args): #cannot find CLR method
        """ OnAfterExpand(self: TreeView, e: TreeViewEventArgs) """
        ...

    def OnAfterLabelEdit(self, *args): #cannot find CLR method
        """ OnAfterLabelEdit(self: TreeView, e: NodeLabelEditEventArgs) """
        ...

    def OnAfterSelect(self, *args): #cannot find CLR method
        """ OnAfterSelect(self: TreeView, e: TreeViewEventArgs) """
        ...

    def OnBeforeCheck(self, *args): #cannot find CLR method
        """ OnBeforeCheck(self: TreeView, e: TreeViewCancelEventArgs) """
        ...

    def OnBeforeCollapse(self, *args): #cannot find CLR method
        """ OnBeforeCollapse(self: TreeView, e: TreeViewCancelEventArgs) """
        ...

    def OnBeforeExpand(self, *args): #cannot find CLR method
        """ OnBeforeExpand(self: TreeView, e: TreeViewCancelEventArgs) """
        ...

    def OnBeforeLabelEdit(self, *args): #cannot find CLR method
        """ OnBeforeLabelEdit(self: TreeView, e: NodeLabelEditEventArgs) """
        ...

    def OnBeforeSelect(self, *args): #cannot find CLR method
        """ OnBeforeSelect(self: TreeView, e: TreeViewCancelEventArgs) """
        ...

    def OnDrawNode(self, *args): #cannot find CLR method
        """ OnDrawNode(self: TreeView, e: DrawTreeNodeEventArgs) """
        ...

    def OnItemDrag(self, *args): #cannot find CLR method
        """ OnItemDrag(self: TreeView, e: ItemDragEventArgs) """
        ...

    def OnNodeMouseClick(self, *args): #cannot find CLR method
        """ OnNodeMouseClick(self: TreeView, e: TreeNodeMouseClickEventArgs) """
        ...

    def OnNodeMouseDoubleClick(self, *args): #cannot find CLR method
        """ OnNodeMouseDoubleClick(self: TreeView, e: TreeNodeMouseClickEventArgs) """
        ...

    def OnNodeMouseHover(self, *args): #cannot find CLR method
        """ OnNodeMouseHover(self: TreeView, e: TreeNodeMouseHoverEventArgs) """
        ...

    def OnRightToLeftLayoutChanged(self, *args): #cannot find CLR method
        """ OnRightToLeftLayoutChanged(self: TreeView, e: EventArgs) """
        ...

    def Sort(self): # -> 
        """ Sort(self: TreeView) """
        ...

    def ToString(self) -> str:
        """ ToString(self: TreeView) -> str """
        ...

    AfterCheck = ...
    AfterCollapse = ...
    AfterExpand = ...
    AfterLabelEdit = ...
    AfterSelect = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    BeforeCheck = ...
    BeforeCollapse = ...
    BeforeExpand = ...
    BeforeLabelEdit = ...
    BeforeSelect = ...
    DrawNode = ...
    ItemDrag = ...
    NodeMouseClick = ...
    NodeMouseDoubleClick = ...
    NodeMouseHover = ...
    PaddingChanged = ...
    Paint = ...
    RightToLeftLayoutChanged = ...
    TextChanged = ...


class TreeViewAction(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TreeViewAction, values: ByKeyboard (1), ByMouse (2), Collapse (3), Expand (4), Unknown (0) """
    ByKeyboard: TreeViewAction = ...
    ByMouse: TreeViewAction = ...
    Collapse: TreeViewAction = ...
    Expand: TreeViewAction = ...
    Unknown: TreeViewAction = ...
    value__ = ...


class TreeViewCancelEventArgs(CancelEventArgs): # skipped bases: <type 'object'>
    """ TreeViewCancelEventArgs(node: TreeNode, cancel: bool, action: TreeViewAction) """
    @property
    def Action(self) -> TreeViewAction:
        """ Get: Action(self: TreeViewCancelEventArgs) -> TreeViewAction """
        ...

    @property
    def Node(self) -> TreeNode:
        """ Get: Node(self: TreeViewCancelEventArgs) -> TreeNode """
        ...



class TreeViewCancelEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ TreeViewCancelEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:TreeViewCancelEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: TreeViewCancelEventHandler, sender: object, e: TreeViewCancelEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: TreeViewCancelEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:TreeViewCancelEventArgs): # -> 
        """ Invoke(self: TreeViewCancelEventHandler, sender: object, e: TreeViewCancelEventArgs) """
        ...


class TreeViewDrawMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TreeViewDrawMode, values: Normal (0), OwnerDrawAll (2), OwnerDrawText (1) """
    Normal: TreeViewDrawMode = ...
    OwnerDrawAll: TreeViewDrawMode = ...
    OwnerDrawText: TreeViewDrawMode = ...
    value__ = ...


class TreeViewEventArgs(EventArgs): # skipped bases: <type 'object'>
    """
    TreeViewEventArgs(node: TreeNode)
    TreeViewEventArgs(node: TreeNode, action: TreeViewAction)
    """
    @property
    def Action(self) -> TreeViewAction:
        """ Get: Action(self: TreeViewEventArgs) -> TreeViewAction """
        ...

    @property
    def Node(self) -> TreeNode:
        """ Get: Node(self: TreeViewEventArgs) -> TreeNode """
        ...


    def __new__(cls, node:TreeNode, action:TreeViewAction = ...) -> Self:
        """
        __new__(cls: type, node: TreeNode)
        __new__(cls: type, node: TreeNode, action: TreeViewAction)
        """
        ...


class TreeViewEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ TreeViewEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:TreeViewEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: TreeViewEventHandler, sender: object, e: TreeViewEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: TreeViewEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:TreeViewEventArgs): # -> 
        """ Invoke(self: TreeViewEventHandler, sender: object, e: TreeViewEventArgs) """
        ...


class TreeViewHitTestInfo: # skipped bases: <type 'object'>, <type 'object'>
    """ TreeViewHitTestInfo(hitNode: TreeNode, hitLocation: TreeViewHitTestLocations) """
    @property
    def Location(self): # -> TreeViewHitTestLocations
        """ Get: Location(self: TreeViewHitTestInfo) -> TreeViewHitTestLocations """
        ...

    @property
    def Node(self) -> TreeNode:
        """ Get: Node(self: TreeViewHitTestInfo) -> TreeNode """
        ...



class TreeViewHitTestLocations(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) TreeViewHitTestLocations, values: AboveClientArea (256), BelowClientArea (512), Image (2), Indent (8), Label (4), LeftOfClientArea (2048), None (1), PlusMinus (16), RightOfClientArea (1024), RightOfLabel (32), StateImage (64) """
    AboveClientArea: TreeViewHitTestLocations = ...
    BelowClientArea: TreeViewHitTestLocations = ...
    Image: TreeViewHitTestLocations = ...
    Indent: TreeViewHitTestLocations = ...
    Label: TreeViewHitTestLocations = ...
    LeftOfClientArea: TreeViewHitTestLocations = ...
    PlusMinus: TreeViewHitTestLocations = ...
    RightOfClientArea: TreeViewHitTestLocations = ...
    RightOfLabel: TreeViewHitTestLocations = ...
    StateImage: TreeViewHitTestLocations = ...
    value__ = ...


class TreeViewImageIndexConverter(ImageIndexConverter): # skipped bases: <type 'object'>
    """ TreeViewImageIndexConverter() """
    pass

class TreeViewImageKeyConverter(ImageKeyConverter): # skipped bases: <type 'object'>
    """ TreeViewImageKeyConverter() """
    pass

class TypeValidationEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ TypeValidationEventArgs(validatingType: Type, isValidInput: bool, returnValue: object, message: str) """
    @property
    def Cancel(self) -> bool:
        """
        Get: Cancel(self: TypeValidationEventArgs) -> bool
        Set: Cancel(self: TypeValidationEventArgs) = value
        """
        ...

    @property
    def IsValidInput(self) -> bool:
        """ Get: IsValidInput(self: TypeValidationEventArgs) -> bool """
        ...

    @property
    def Message(self) -> str:
        """ Get: Message(self: TypeValidationEventArgs) -> str """
        ...

    @property
    def ReturnValue(self) -> object:
        """ Get: ReturnValue(self: TypeValidationEventArgs) -> object """
        ...

    @property
    def ValidatingType(self) -> Type:
        """ Get: ValidatingType(self: TypeValidationEventArgs) -> Type """
        ...


    def __new__(cls, validatingType:Type, isValidInput:bool, returnValue:object, message:str) -> Self:
        """ __new__(cls: type, validatingType: Type, isValidInput: bool, returnValue: object, message: str) """
        ...


class TypeValidationEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ TypeValidationEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:TypeValidationEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: TypeValidationEventHandler, sender: object, e: TypeValidationEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: TypeValidationEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:TypeValidationEventArgs): # -> 
        """ Invoke(self: TypeValidationEventHandler, sender: object, e: TypeValidationEventArgs) """
        ...


class UICues(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) UICues, values: Changed (12), ChangeFocus (4), ChangeKeyboard (8), None (0), ShowFocus (1), ShowKeyboard (2), Shown (3) """
    Changed: UICues = ...
    ChangeFocus: UICues = ...
    ChangeKeyboard: UICues = ...
    ShowFocus: UICues = ...
    ShowKeyboard: UICues = ...
    Shown: UICues = ...
    value__ = ...


class UICuesEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ UICuesEventArgs(uicues: UICues) """
    @property
    def Changed(self) -> UICues:
        """ Get: Changed(self: UICuesEventArgs) -> UICues """
        ...

    @property
    def ChangeFocus(self) -> bool:
        """ Get: ChangeFocus(self: UICuesEventArgs) -> bool """
        ...

    @property
    def ChangeKeyboard(self) -> bool:
        """ Get: ChangeKeyboard(self: UICuesEventArgs) -> bool """
        ...

    @property
    def ShowFocus(self) -> bool:
        """ Get: ShowFocus(self: UICuesEventArgs) -> bool """
        ...

    @property
    def ShowKeyboard(self) -> bool:
        """ Get: ShowKeyboard(self: UICuesEventArgs) -> bool """
        ...


    def __new__(cls, uicues:UICues) -> Self:
        """ __new__(cls: type, uicues: UICues) """
        ...


class UICuesEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ UICuesEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:UICuesEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: UICuesEventHandler, sender: object, e: UICuesEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: UICuesEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:UICuesEventArgs): # -> 
        """ Invoke(self: UICuesEventHandler, sender: object, e: UICuesEventArgs) """
        ...


class UnhandledExceptionMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum UnhandledExceptionMode, values: Automatic (0), CatchException (2), ThrowException (1) """
    Automatic: UnhandledExceptionMode = ...
    CatchException: UnhandledExceptionMode = ...
    ThrowException: UnhandledExceptionMode = ...
    value__ = ...


class UpDownEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ UpDownEventArgs(buttonPushed: int) """
    @property
    def ButtonID(self) -> int:
        """ Get: ButtonID(self: UpDownEventArgs) -> int """
        ...


    def __new__(cls, buttonPushed:int) -> Self:
        """ __new__(cls: type, buttonPushed: int) """
        ...


class UpDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ UpDownEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, source:object, e:UpDownEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: UpDownEventHandler, source: object, e: UpDownEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: UpDownEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, source:object, e:UpDownEventArgs): # -> 
        """ Invoke(self: UpDownEventHandler, source: object, e: UpDownEventArgs) """
        ...


class UserControl(ContainerControl): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'IContainerControl'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ UserControl() """
    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: UserControl) -> bool
        Set: AutoSize(self: UserControl) = value
        """
        ...

    @property
    def AutoSizeMode(self) -> AutoSizeMode:
        """
        Get: AutoSizeMode(self: UserControl) -> AutoSizeMode
        Set: AutoSizeMode(self: UserControl) = value
        """
        ...

    @property
    def BorderStyle(self) -> BorderStyle:
        """
        Get: BorderStyle(self: UserControl) -> BorderStyle
        Set: BorderStyle(self: UserControl) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: UserControl) -> str
        Set: Text(self: UserControl) = value
        """
        ...


    def OnLoad(self, *args): #cannot find CLR method
        """ OnLoad(self: UserControl, e: EventArgs) """
        ...

    AutoSizeChanged = ...
    AutoValidateChanged = ...
    Load = ...
    TextChanged = ...


class ValidationConstraints(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) ValidationConstraints, values: Enabled (2), ImmediateChildren (16), None (0), Selectable (1), TabStop (8), Visible (4) """
    Enabled: ValidationConstraints = ...
    ImmediateChildren: ValidationConstraints = ...
    Selectable: ValidationConstraints = ...
    TabStop: ValidationConstraints = ...
    value__ = ...
    Visible: ValidationConstraints = ...


class View(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum View, values: Details (1), LargeIcon (0), List (3), SmallIcon (2), Tile (4) """
    Details: View = ...
    LargeIcon: View = ...
    List: View = ...
    SmallIcon: View = ...
    Tile: View = ...
    value__ = ...


class VScrollBar(ScrollBar): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'object'>
    """ VScrollBar() """
    @property
    def RightToLeft(self) -> RightToLeft:
        """
        Get: RightToLeft(self: VScrollBar) -> RightToLeft
        Set: RightToLeft(self: VScrollBar) = value
        """
        ...


    RightToLeftChanged = ...


class VScrollProperties(ScrollProperties): # skipped bases: <type 'object'>
    """ VScrollProperties(container: ScrollableControl) """
    pass

class WebBrowserBase(Control): # skipped bases: <type 'IViewObject'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IPersistStorage'>, <type 'IWin32Window'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'object'>
    """ no doc """
    @property
    def ActiveXInstance(self) -> object:
        """ Get: ActiveXInstance(self: WebBrowserBase) -> object """
        ...


    def AttachInterfaces(self, *args): #cannot find CLR method
        """ AttachInterfaces(self: WebBrowserBase, nativeActiveXObject: object) """
        ...

    def CreateSink(self, *args): #cannot find CLR method
        """ CreateSink(self: WebBrowserBase) """
        ...

    def CreateWebBrowserSiteBase(self, *args): #cannot find CLR method
        """ CreateWebBrowserSiteBase(self: WebBrowserBase) -> WebBrowserSiteBase """
        ...

    def DetachInterfaces(self, *args): #cannot find CLR method
        """ DetachInterfaces(self: WebBrowserBase) """
        ...

    def DetachSink(self, *args): #cannot find CLR method
        """ DetachSink(self: WebBrowserBase) """
        ...

    BackColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    BindingContextChanged = ...
    ChangeUICues = ...
    Click = ...
    CursorChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    Enter = ...
    FontChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    ImeModeChanged = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    MouseWheel = ...
    Paint = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RightToLeftChanged = ...
    StyleChanged = ...
    TextChanged = ...


class WebBrowser(WebBrowserBase): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleInPlaceObject'>, <type 'IViewObject2'>, <type 'IOleObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'object'>
    """ WebBrowser() """
    @property
    def AllowNavigation(self) -> bool:
        """
        Get: AllowNavigation(self: WebBrowser) -> bool
        Set: AllowNavigation(self: WebBrowser) = value
        """
        ...

    @property
    def AllowWebBrowserDrop(self) -> bool:
        """
        Get: AllowWebBrowserDrop(self: WebBrowser) -> bool
        Set: AllowWebBrowserDrop(self: WebBrowser) = value
        """
        ...

    @property
    def CanGoBack(self) -> bool:
        """ Get: CanGoBack(self: WebBrowser) -> bool """
        ...

    @property
    def CanGoForward(self) -> bool:
        """ Get: CanGoForward(self: WebBrowser) -> bool """
        ...

    @property
    def Document(self) -> HtmlDocument:
        """ Get: Document(self: WebBrowser) -> HtmlDocument """
        ...

    @property
    def DocumentStream(self) -> Stream:
        """
        Get: DocumentStream(self: WebBrowser) -> Stream
        Set: DocumentStream(self: WebBrowser) = value
        """
        ...

    @property
    def DocumentText(self) -> str:
        """
        Get: DocumentText(self: WebBrowser) -> str
        Set: DocumentText(self: WebBrowser) = value
        """
        ...

    @property
    def DocumentTitle(self) -> str:
        """ Get: DocumentTitle(self: WebBrowser) -> str """
        ...

    @property
    def DocumentType(self) -> str:
        """ Get: DocumentType(self: WebBrowser) -> str """
        ...

    @property
    def EncryptionLevel(self): # -> WebBrowserEncryptionLevel
        """ Get: EncryptionLevel(self: WebBrowser) -> WebBrowserEncryptionLevel """
        ...

    @property
    def Focused(self) -> bool:
        """ Get: Focused(self: WebBrowser) -> bool """
        ...

    @property
    def IsBusy(self) -> bool:
        """ Get: IsBusy(self: WebBrowser) -> bool """
        ...

    @property
    def IsOffline(self) -> bool:
        """ Get: IsOffline(self: WebBrowser) -> bool """
        ...

    @property
    def IsWebBrowserContextMenuEnabled(self) -> bool:
        """
        Get: IsWebBrowserContextMenuEnabled(self: WebBrowser) -> bool
        Set: IsWebBrowserContextMenuEnabled(self: WebBrowser) = value
        """
        ...

    @property
    def ObjectForScripting(self) -> object:
        """
        Get: ObjectForScripting(self: WebBrowser) -> object
        Set: ObjectForScripting(self: WebBrowser) = value
        """
        ...

    @property
    def Padding(self) -> Padding:
        """
        Get: Padding(self: WebBrowser) -> Padding
        Set: Padding(self: WebBrowser) = value
        """
        ...

    @property
    def ReadyState(self): # -> WebBrowserReadyState
        """ Get: ReadyState(self: WebBrowser) -> WebBrowserReadyState """
        ...

    @property
    def ScriptErrorsSuppressed(self) -> bool:
        """
        Get: ScriptErrorsSuppressed(self: WebBrowser) -> bool
        Set: ScriptErrorsSuppressed(self: WebBrowser) = value
        """
        ...

    @property
    def ScrollBarsEnabled(self) -> bool:
        """
        Get: ScrollBarsEnabled(self: WebBrowser) -> bool
        Set: ScrollBarsEnabled(self: WebBrowser) = value
        """
        ...

    @property
    def StatusText(self) -> str:
        """ Get: StatusText(self: WebBrowser) -> str """
        ...

    @property
    def Url(self) -> Uri:
        """
        Get: Url(self: WebBrowser) -> Uri
        Set: Url(self: WebBrowser) = value
        """
        ...

    @property
    def Version(self) -> Version:
        """ Get: Version(self: WebBrowser) -> Version """
        ...

    @property
    def WebBrowserShortcutsEnabled(self) -> bool:
        """
        Get: WebBrowserShortcutsEnabled(self: WebBrowser) -> bool
        Set: WebBrowserShortcutsEnabled(self: WebBrowser) = value
        """
        ...


    def GoBack(self) -> bool:
        """ GoBack(self: WebBrowser) -> bool """
        ...

    def GoForward(self) -> bool:
        """ GoForward(self: WebBrowser) -> bool """
        ...

    def GoHome(self): # -> 
        """ GoHome(self: WebBrowser) """
        ...

    def GoSearch(self): # -> 
        """ GoSearch(self: WebBrowser) """
        ...

    def Navigate(self, *__args:Uri): # -> 
        """ Navigate(self: WebBrowser, url: Uri)Navigate(self: WebBrowser, urlString: str)Navigate(self: WebBrowser, url: Uri, targetFrameName: str)Navigate(self: WebBrowser, urlString: str, targetFrameName: str)Navigate(self: WebBrowser, url: Uri, newWindow: bool)Navigate(self: WebBrowser, urlString: str, newWindow: bool)Navigate(self: WebBrowser, url: Uri, targetFrameName: str, postData: Array[Byte], additionalHeaders: str)Navigate(self: WebBrowser, urlString: str, targetFrameName: str, postData: Array[Byte], additionalHeaders: str) """
        ...

    def OnCanGoBackChanged(self, *args): #cannot find CLR method
        """ OnCanGoBackChanged(self: WebBrowser, e: EventArgs) """
        ...

    def OnCanGoForwardChanged(self, *args): #cannot find CLR method
        """ OnCanGoForwardChanged(self: WebBrowser, e: EventArgs) """
        ...

    def OnDocumentCompleted(self, *args): #cannot find CLR method
        """ OnDocumentCompleted(self: WebBrowser, e: WebBrowserDocumentCompletedEventArgs) """
        ...

    def OnDocumentTitleChanged(self, *args): #cannot find CLR method
        """ OnDocumentTitleChanged(self: WebBrowser, e: EventArgs) """
        ...

    def OnEncryptionLevelChanged(self, *args): #cannot find CLR method
        """ OnEncryptionLevelChanged(self: WebBrowser, e: EventArgs) """
        ...

    def OnFileDownload(self, *args): #cannot find CLR method
        """ OnFileDownload(self: WebBrowser, e: EventArgs) """
        ...

    def OnNavigated(self, *args): #cannot find CLR method
        """ OnNavigated(self: WebBrowser, e: WebBrowserNavigatedEventArgs) """
        ...

    def OnNavigating(self, *args): #cannot find CLR method
        """ OnNavigating(self: WebBrowser, e: WebBrowserNavigatingEventArgs) """
        ...

    def OnNewWindow(self, *args): #cannot find CLR method
        """ OnNewWindow(self: WebBrowser, e: CancelEventArgs) """
        ...

    def OnProgressChanged(self, *args): #cannot find CLR method
        """ OnProgressChanged(self: WebBrowser, e: WebBrowserProgressChangedEventArgs) """
        ...

    def OnStatusTextChanged(self, *args): #cannot find CLR method
        """ OnStatusTextChanged(self: WebBrowser, e: EventArgs) """
        ...

    def Print(self): # -> 
        """ Print(self: WebBrowser) """
        ...

    def Refresh(self, opt = ...): # ->  # Not found arg types: {'opt': 'WebBrowserRefreshOption'}
        """ Refresh(self: WebBrowser)Refresh(self: WebBrowser, opt: WebBrowserRefreshOption) """
        ...

    def ShowPageSetupDialog(self): # -> 
        """ ShowPageSetupDialog(self: WebBrowser) """
        ...

    def ShowPrintDialog(self): # -> 
        """ ShowPrintDialog(self: WebBrowser) """
        ...

    def ShowPrintPreviewDialog(self): # -> 
        """ ShowPrintPreviewDialog(self: WebBrowser) """
        ...

    def ShowPropertiesDialog(self): # -> 
        """ ShowPropertiesDialog(self: WebBrowser) """
        ...

    def ShowSaveAsDialog(self): # -> 
        """ ShowSaveAsDialog(self: WebBrowser) """
        ...

    def Stop(self): # -> 
        """ Stop(self: WebBrowser) """
        ...

    def WebBrowserSite(self, *args): #cannot find CLR method
        """ WebBrowserSite(host: WebBrowser) """
        ...

    CanGoBackChanged = ...
    CanGoForwardChanged = ...
    DocumentCompleted = ...
    DocumentTitleChanged = ...
    EncryptionLevelChanged = ...
    FileDownload = ...
    Navigated = ...
    Navigating = ...
    NewWindow = ...
    PaddingChanged = ...
    ProgressChanged = ...
    StatusTextChanged = ...


class WebBrowserDocumentCompletedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ WebBrowserDocumentCompletedEventArgs(url: Uri) """
    @property
    def Url(self) -> Uri:
        """ Get: Url(self: WebBrowserDocumentCompletedEventArgs) -> Uri """
        ...


    def __new__(cls, url:Uri) -> Self:
        """ __new__(cls: type, url: Uri) """
        ...


class WebBrowserDocumentCompletedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WebBrowserDocumentCompletedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:WebBrowserDocumentCompletedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: WebBrowserDocumentCompletedEventHandler, sender: object, e: WebBrowserDocumentCompletedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: WebBrowserDocumentCompletedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:WebBrowserDocumentCompletedEventArgs): # -> 
        """ Invoke(self: WebBrowserDocumentCompletedEventHandler, sender: object, e: WebBrowserDocumentCompletedEventArgs) """
        ...


class WebBrowserEncryptionLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WebBrowserEncryptionLevel, values: Bit128 (6), Bit40 (3), Bit56 (4), Fortezza (5), Insecure (0), Mixed (1), Unknown (2) """
    Bit128: WebBrowserEncryptionLevel = ...
    Bit40: WebBrowserEncryptionLevel = ...
    Bit56: WebBrowserEncryptionLevel = ...
    Fortezza: WebBrowserEncryptionLevel = ...
    Insecure: WebBrowserEncryptionLevel = ...
    Mixed: WebBrowserEncryptionLevel = ...
    Unknown: WebBrowserEncryptionLevel = ...
    value__ = ...


class WebBrowserNavigatedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ WebBrowserNavigatedEventArgs(url: Uri) """
    @property
    def Url(self) -> Uri:
        """ Get: Url(self: WebBrowserNavigatedEventArgs) -> Uri """
        ...


    def __new__(cls, url:Uri) -> Self:
        """ __new__(cls: type, url: Uri) """
        ...


class WebBrowserNavigatedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WebBrowserNavigatedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:WebBrowserNavigatedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: WebBrowserNavigatedEventHandler, sender: object, e: WebBrowserNavigatedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: WebBrowserNavigatedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:WebBrowserNavigatedEventArgs): # -> 
        """ Invoke(self: WebBrowserNavigatedEventHandler, sender: object, e: WebBrowserNavigatedEventArgs) """
        ...


class WebBrowserNavigatingEventArgs(CancelEventArgs): # skipped bases: <type 'object'>
    """ WebBrowserNavigatingEventArgs(url: Uri, targetFrameName: str) """
    @property
    def TargetFrameName(self) -> str:
        """ Get: TargetFrameName(self: WebBrowserNavigatingEventArgs) -> str """
        ...

    @property
    def Url(self) -> Uri:
        """ Get: Url(self: WebBrowserNavigatingEventArgs) -> Uri """
        ...



class WebBrowserNavigatingEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WebBrowserNavigatingEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:WebBrowserNavigatingEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: WebBrowserNavigatingEventHandler, sender: object, e: WebBrowserNavigatingEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: WebBrowserNavigatingEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:WebBrowserNavigatingEventArgs): # -> 
        """ Invoke(self: WebBrowserNavigatingEventHandler, sender: object, e: WebBrowserNavigatingEventArgs) """
        ...


class WebBrowserProgressChangedEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ WebBrowserProgressChangedEventArgs(currentProgress: Int64, maximumProgress: Int64) """
    @property
    def CurrentProgress(self) -> Int64:
        """ Get: CurrentProgress(self: WebBrowserProgressChangedEventArgs) -> Int64 """
        ...

    @property
    def MaximumProgress(self) -> Int64:
        """ Get: MaximumProgress(self: WebBrowserProgressChangedEventArgs) -> Int64 """
        ...


    def __new__(cls, currentProgress:Int64, maximumProgress:Int64) -> Self:
        """ __new__(cls: type, currentProgress: Int64, maximumProgress: Int64) """
        ...


class WebBrowserProgressChangedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WebBrowserProgressChangedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:WebBrowserProgressChangedEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: WebBrowserProgressChangedEventHandler, sender: object, e: WebBrowserProgressChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: WebBrowserProgressChangedEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:WebBrowserProgressChangedEventArgs): # -> 
        """ Invoke(self: WebBrowserProgressChangedEventHandler, sender: object, e: WebBrowserProgressChangedEventArgs) """
        ...


class WebBrowserReadyState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WebBrowserReadyState, values: Complete (4), Interactive (3), Loaded (2), Loading (1), Uninitialized (0) """
    Complete: WebBrowserReadyState = ...
    Interactive: WebBrowserReadyState = ...
    Loaded: WebBrowserReadyState = ...
    Loading: WebBrowserReadyState = ...
    Uninitialized: WebBrowserReadyState = ...
    value__ = ...


class WebBrowserRefreshOption(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WebBrowserRefreshOption, values: Completely (3), Continue (2), IfExpired (1), Normal (0) """
    Completely: WebBrowserRefreshOption = ...
    Continue: WebBrowserRefreshOption = ...
    IfExpired: WebBrowserRefreshOption = ...
    Normal: WebBrowserRefreshOption = ...
    value__ = ...


class WebBrowserSiteBase(IDisposable, ISimpleFrameSite, IOleClientSite, IPropertyNotifySink, IOleControlSite, IOleInPlaceSite): # skipped bases: <type 'object'>
    """ no doc """
    pass

class WindowsFormsSection(ConfigurationSection): # skipped bases: <type 'object'>
    """ WindowsFormsSection() """
    @property
    def JitDebugging(self) -> bool:
        """
        Get: JitDebugging(self: WindowsFormsSection) -> bool
        Set: JitDebugging(self: WindowsFormsSection) = value
        """
        ...



class WindowsFormsSynchronizationContext(SynchronizationContext, IDisposable): # skipped bases: <type 'object'>
    """ WindowsFormsSynchronizationContext() """
    @property
    def AutoInstall(self) -> bool:
        """
        Get: AutoInstall() -> bool
        Set: AutoInstall() = value
        """
        ...


    @staticmethod
    def Uninstall(): # -> 
        """ Uninstall() """
        ...



# variables with complex values

